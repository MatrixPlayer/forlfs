// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto

#ifndef PROTOBUF_common_2eproto__INCLUDED
#define PROTOBUF_common_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace model {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_common_2eproto();
void protobuf_AssignDesc_common_2eproto();
void protobuf_ShutdownFile_common_2eproto();

class Color;
class Cutboard;
class CutboardImage;
class FeatureVector;
class Image;
class VideoMetadata;

enum ObjType {
  UNKNOWNOBJ = 0,
  VEHICLE = 1,
  BICYCLE = 2,
  TRICYCLE = 3,
  PEDESTRIAN = 4,
  FACE = 1024,
  VEHICLE_VECTOR = 2048,
  BICYCLE_VECTOR = 2049,
  TRICYCLE_VECTOR = 2050,
  PEDESTRIAN_VECTOR = 2051,
  FACE_VECTOR = 3072,
  ObjType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ObjType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ObjType_IsValid(int value);
const ObjType ObjType_MIN = UNKNOWNOBJ;
const ObjType ObjType_MAX = FACE_VECTOR;
const int ObjType_ARRAYSIZE = ObjType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ObjType_descriptor();
inline const ::std::string& ObjType_Name(ObjType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ObjType_descriptor(), value);
}
inline bool ObjType_Parse(
    const ::std::string& name, ObjType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ObjType>(
    ObjType_descriptor(), name, value);
}
enum DataFmtType {
  UNKNOWNFMT = 0,
  JSON = 1,
  PROTOBUF = 2,
  DataFmtType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  DataFmtType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool DataFmtType_IsValid(int value);
const DataFmtType DataFmtType_MIN = UNKNOWNFMT;
const DataFmtType DataFmtType_MAX = PROTOBUF;
const int DataFmtType_ARRAYSIZE = DataFmtType_MAX + 1;

const ::google::protobuf::EnumDescriptor* DataFmtType_descriptor();
inline const ::std::string& DataFmtType_Name(DataFmtType value) {
  return ::google::protobuf::internal::NameOfEnum(
    DataFmtType_descriptor(), value);
}
inline bool DataFmtType_Parse(
    const ::std::string& name, DataFmtType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DataFmtType>(
    DataFmtType_descriptor(), name, value);
}
// ===================================================================

class VideoMetadata : public ::google::protobuf::Message {
 public:
  VideoMetadata();
  virtual ~VideoMetadata();

  VideoMetadata(const VideoMetadata& from);

  inline VideoMetadata& operator=(const VideoMetadata& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VideoMetadata& default_instance();

  void Swap(VideoMetadata* other);

  // implements Message ----------------------------------------------

  inline VideoMetadata* New() const { return New(NULL); }

  VideoMetadata* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VideoMetadata& from);
  void MergeFrom(const VideoMetadata& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VideoMetadata* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 Timestamp = 1;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // optional int32 Duration = 2;
  void clear_duration();
  static const int kDurationFieldNumber = 2;
  ::google::protobuf::int32 duration() const;
  void set_duration(::google::protobuf::int32 value);

  // optional int32 SensorId = 3;
  void clear_sensorid();
  static const int kSensorIdFieldNumber = 3;
  ::google::protobuf::int32 sensorid() const;
  void set_sensorid(::google::protobuf::int32 value);

  // optional string SensorName = 4;
  void clear_sensorname();
  static const int kSensorNameFieldNumber = 4;
  const ::std::string& sensorname() const;
  void set_sensorname(const ::std::string& value);
  void set_sensorname(const char* value);
  void set_sensorname(const char* value, size_t size);
  ::std::string* mutable_sensorname();
  ::std::string* release_sensorname();
  void set_allocated_sensorname(::std::string* sensorname);

  // optional string SensorUrl = 5;
  void clear_sensorurl();
  static const int kSensorUrlFieldNumber = 5;
  const ::std::string& sensorurl() const;
  void set_sensorurl(const ::std::string& value);
  void set_sensorurl(const char* value);
  void set_sensorurl(const char* value, size_t size);
  ::std::string* mutable_sensorurl();
  ::std::string* release_sensorurl();
  void set_allocated_sensorurl(::std::string* sensorurl);

  // @@protoc_insertion_point(class_scope:model.VideoMetadata)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 timestamp_;
  ::google::protobuf::int32 duration_;
  ::google::protobuf::int32 sensorid_;
  ::google::protobuf::internal::ArenaStringPtr sensorname_;
  ::google::protobuf::internal::ArenaStringPtr sensorurl_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static VideoMetadata* default_instance_;
};
// -------------------------------------------------------------------

class Image : public ::google::protobuf::Message {
 public:
  Image();
  virtual ~Image();

  Image(const Image& from);

  inline Image& operator=(const Image& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Image& default_instance();

  void Swap(Image* other);

  // implements Message ----------------------------------------------

  inline Image* New() const { return New(NULL); }

  Image* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Image& from);
  void MergeFrom(const Image& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Image* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // optional int32 Width = 2;
  void clear_width();
  static const int kWidthFieldNumber = 2;
  ::google::protobuf::int32 width() const;
  void set_width(::google::protobuf::int32 value);

  // optional int32 Height = 3;
  void clear_height();
  static const int kHeightFieldNumber = 3;
  ::google::protobuf::int32 height() const;
  void set_height(::google::protobuf::int32 value);

  // optional bytes BinData = 4;
  void clear_bindata();
  static const int kBinDataFieldNumber = 4;
  const ::std::string& bindata() const;
  void set_bindata(const ::std::string& value);
  void set_bindata(const char* value);
  void set_bindata(const void* value, size_t size);
  ::std::string* mutable_bindata();
  ::std::string* release_bindata();
  void set_allocated_bindata(::std::string* bindata);

  // @@protoc_insertion_point(class_scope:model.Image)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::int32 width_;
  ::google::protobuf::int32 height_;
  ::google::protobuf::internal::ArenaStringPtr bindata_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static Image* default_instance_;
};
// -------------------------------------------------------------------

class CutboardImage : public ::google::protobuf::Message {
 public:
  CutboardImage();
  virtual ~CutboardImage();

  CutboardImage(const CutboardImage& from);

  inline CutboardImage& operator=(const CutboardImage& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CutboardImage& default_instance();

  void Swap(CutboardImage* other);

  // implements Message ----------------------------------------------

  inline CutboardImage* New() const { return New(NULL); }

  CutboardImage* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CutboardImage& from);
  void MergeFrom(const CutboardImage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CutboardImage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .model.VideoMetadata Metadata = 1;
  bool has_metadata() const;
  void clear_metadata();
  static const int kMetadataFieldNumber = 1;
  const ::model::VideoMetadata& metadata() const;
  ::model::VideoMetadata* mutable_metadata();
  ::model::VideoMetadata* release_metadata();
  void set_allocated_metadata(::model::VideoMetadata* metadata);

  // optional .model.Cutboard Cutboard = 2;
  bool has_cutboard() const;
  void clear_cutboard();
  static const int kCutboardFieldNumber = 2;
  const ::model::Cutboard& cutboard() const;
  ::model::Cutboard* mutable_cutboard();
  ::model::Cutboard* release_cutboard();
  void set_allocated_cutboard(::model::Cutboard* cutboard);

  // optional .model.Image Img = 3;
  bool has_img() const;
  void clear_img();
  static const int kImgFieldNumber = 3;
  const ::model::Image& img() const;
  ::model::Image* mutable_img();
  ::model::Image* release_img();
  void set_allocated_img(::model::Image* img);

  // @@protoc_insertion_point(class_scope:model.CutboardImage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::model::VideoMetadata* metadata_;
  ::model::Cutboard* cutboard_;
  ::model::Image* img_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static CutboardImage* default_instance_;
};
// -------------------------------------------------------------------

class Color : public ::google::protobuf::Message {
 public:
  Color();
  virtual ~Color();

  Color(const Color& from);

  inline Color& operator=(const Color& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Color& default_instance();

  void Swap(Color* other);

  // implements Message ----------------------------------------------

  inline Color* New() const { return New(NULL); }

  Color* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Color& from);
  void MergeFrom(const Color& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Color* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // optional float Confidence = 2;
  void clear_confidence();
  static const int kConfidenceFieldNumber = 2;
  float confidence() const;
  void set_confidence(float value);

  // optional string ColorName = 3;
  void clear_colorname();
  static const int kColorNameFieldNumber = 3;
  const ::std::string& colorname() const;
  void set_colorname(const ::std::string& value);
  void set_colorname(const char* value);
  void set_colorname(const char* value, size_t size);
  ::std::string* mutable_colorname();
  ::std::string* release_colorname();
  void set_allocated_colorname(::std::string* colorname);

  // @@protoc_insertion_point(class_scope:model.Color)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int32 id_;
  float confidence_;
  ::google::protobuf::internal::ArenaStringPtr colorname_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static Color* default_instance_;
};
// -------------------------------------------------------------------

class Cutboard : public ::google::protobuf::Message {
 public:
  Cutboard();
  virtual ~Cutboard();

  Cutboard(const Cutboard& from);

  inline Cutboard& operator=(const Cutboard& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Cutboard& default_instance();

  void Swap(Cutboard* other);

  // implements Message ----------------------------------------------

  inline Cutboard* New() const { return New(NULL); }

  Cutboard* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Cutboard& from);
  void MergeFrom(const Cutboard& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Cutboard* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 X = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  ::google::protobuf::uint32 x() const;
  void set_x(::google::protobuf::uint32 value);

  // optional uint32 Y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  ::google::protobuf::uint32 y() const;
  void set_y(::google::protobuf::uint32 value);

  // optional uint32 Width = 3;
  void clear_width();
  static const int kWidthFieldNumber = 3;
  ::google::protobuf::uint32 width() const;
  void set_width(::google::protobuf::uint32 value);

  // optional uint32 Height = 4;
  void clear_height();
  static const int kHeightFieldNumber = 4;
  ::google::protobuf::uint32 height() const;
  void set_height(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:model.Cutboard)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint32 x_;
  ::google::protobuf::uint32 y_;
  ::google::protobuf::uint32 width_;
  ::google::protobuf::uint32 height_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static Cutboard* default_instance_;
};
// -------------------------------------------------------------------

class FeatureVector : public ::google::protobuf::Message {
 public:
  FeatureVector();
  virtual ~FeatureVector();

  FeatureVector(const FeatureVector& from);

  inline FeatureVector& operator=(const FeatureVector& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FeatureVector& default_instance();

  void Swap(FeatureVector* other);

  // implements Message ----------------------------------------------

  inline FeatureVector* New() const { return New(NULL); }

  FeatureVector* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FeatureVector& from);
  void MergeFrom(const FeatureVector& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FeatureVector* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 Id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int64 id() const;
  void set_id(::google::protobuf::int64 value);

  // optional bytes Feature = 2;
  void clear_feature();
  static const int kFeatureFieldNumber = 2;
  const ::std::string& feature() const;
  void set_feature(const ::std::string& value);
  void set_feature(const char* value);
  void set_feature(const void* value, size_t size);
  ::std::string* mutable_feature();
  ::std::string* release_feature();
  void set_allocated_feature(::std::string* feature);

  // @@protoc_insertion_point(class_scope:model.FeatureVector)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 id_;
  ::google::protobuf::internal::ArenaStringPtr feature_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static FeatureVector* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// VideoMetadata

// optional int64 Timestamp = 1;
inline void VideoMetadata::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 VideoMetadata::timestamp() const {
  // @@protoc_insertion_point(field_get:model.VideoMetadata.Timestamp)
  return timestamp_;
}
inline void VideoMetadata::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:model.VideoMetadata.Timestamp)
}

// optional int32 Duration = 2;
inline void VideoMetadata::clear_duration() {
  duration_ = 0;
}
inline ::google::protobuf::int32 VideoMetadata::duration() const {
  // @@protoc_insertion_point(field_get:model.VideoMetadata.Duration)
  return duration_;
}
inline void VideoMetadata::set_duration(::google::protobuf::int32 value) {
  
  duration_ = value;
  // @@protoc_insertion_point(field_set:model.VideoMetadata.Duration)
}

// optional int32 SensorId = 3;
inline void VideoMetadata::clear_sensorid() {
  sensorid_ = 0;
}
inline ::google::protobuf::int32 VideoMetadata::sensorid() const {
  // @@protoc_insertion_point(field_get:model.VideoMetadata.SensorId)
  return sensorid_;
}
inline void VideoMetadata::set_sensorid(::google::protobuf::int32 value) {
  
  sensorid_ = value;
  // @@protoc_insertion_point(field_set:model.VideoMetadata.SensorId)
}

// optional string SensorName = 4;
inline void VideoMetadata::clear_sensorname() {
  sensorname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VideoMetadata::sensorname() const {
  // @@protoc_insertion_point(field_get:model.VideoMetadata.SensorName)
  return sensorname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoMetadata::set_sensorname(const ::std::string& value) {
  
  sensorname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:model.VideoMetadata.SensorName)
}
inline void VideoMetadata::set_sensorname(const char* value) {
  
  sensorname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:model.VideoMetadata.SensorName)
}
inline void VideoMetadata::set_sensorname(const char* value, size_t size) {
  
  sensorname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:model.VideoMetadata.SensorName)
}
inline ::std::string* VideoMetadata::mutable_sensorname() {
  
  // @@protoc_insertion_point(field_mutable:model.VideoMetadata.SensorName)
  return sensorname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VideoMetadata::release_sensorname() {
  
  return sensorname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoMetadata::set_allocated_sensorname(::std::string* sensorname) {
  if (sensorname != NULL) {
    
  } else {
    
  }
  sensorname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sensorname);
  // @@protoc_insertion_point(field_set_allocated:model.VideoMetadata.SensorName)
}

// optional string SensorUrl = 5;
inline void VideoMetadata::clear_sensorurl() {
  sensorurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VideoMetadata::sensorurl() const {
  // @@protoc_insertion_point(field_get:model.VideoMetadata.SensorUrl)
  return sensorurl_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoMetadata::set_sensorurl(const ::std::string& value) {
  
  sensorurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:model.VideoMetadata.SensorUrl)
}
inline void VideoMetadata::set_sensorurl(const char* value) {
  
  sensorurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:model.VideoMetadata.SensorUrl)
}
inline void VideoMetadata::set_sensorurl(const char* value, size_t size) {
  
  sensorurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:model.VideoMetadata.SensorUrl)
}
inline ::std::string* VideoMetadata::mutable_sensorurl() {
  
  // @@protoc_insertion_point(field_mutable:model.VideoMetadata.SensorUrl)
  return sensorurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VideoMetadata::release_sensorurl() {
  
  return sensorurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoMetadata::set_allocated_sensorurl(::std::string* sensorurl) {
  if (sensorurl != NULL) {
    
  } else {
    
  }
  sensorurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sensorurl);
  // @@protoc_insertion_point(field_set_allocated:model.VideoMetadata.SensorUrl)
}

// -------------------------------------------------------------------

// Image

// optional string Id = 1;
inline void Image::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Image::id() const {
  // @@protoc_insertion_point(field_get:model.Image.Id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Image::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:model.Image.Id)
}
inline void Image::set_id(const char* value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:model.Image.Id)
}
inline void Image::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:model.Image.Id)
}
inline ::std::string* Image::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:model.Image.Id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Image::release_id() {
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Image::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:model.Image.Id)
}

// optional int32 Width = 2;
inline void Image::clear_width() {
  width_ = 0;
}
inline ::google::protobuf::int32 Image::width() const {
  // @@protoc_insertion_point(field_get:model.Image.Width)
  return width_;
}
inline void Image::set_width(::google::protobuf::int32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:model.Image.Width)
}

// optional int32 Height = 3;
inline void Image::clear_height() {
  height_ = 0;
}
inline ::google::protobuf::int32 Image::height() const {
  // @@protoc_insertion_point(field_get:model.Image.Height)
  return height_;
}
inline void Image::set_height(::google::protobuf::int32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:model.Image.Height)
}

// optional bytes BinData = 4;
inline void Image::clear_bindata() {
  bindata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Image::bindata() const {
  // @@protoc_insertion_point(field_get:model.Image.BinData)
  return bindata_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Image::set_bindata(const ::std::string& value) {
  
  bindata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:model.Image.BinData)
}
inline void Image::set_bindata(const char* value) {
  
  bindata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:model.Image.BinData)
}
inline void Image::set_bindata(const void* value, size_t size) {
  
  bindata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:model.Image.BinData)
}
inline ::std::string* Image::mutable_bindata() {
  
  // @@protoc_insertion_point(field_mutable:model.Image.BinData)
  return bindata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Image::release_bindata() {
  
  return bindata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Image::set_allocated_bindata(::std::string* bindata) {
  if (bindata != NULL) {
    
  } else {
    
  }
  bindata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bindata);
  // @@protoc_insertion_point(field_set_allocated:model.Image.BinData)
}

// -------------------------------------------------------------------

// CutboardImage

// optional .model.VideoMetadata Metadata = 1;
inline bool CutboardImage::has_metadata() const {
  return !_is_default_instance_ && metadata_ != NULL;
}
inline void CutboardImage::clear_metadata() {
  if (GetArenaNoVirtual() == NULL && metadata_ != NULL) delete metadata_;
  metadata_ = NULL;
}
inline const ::model::VideoMetadata& CutboardImage::metadata() const {
  // @@protoc_insertion_point(field_get:model.CutboardImage.Metadata)
  return metadata_ != NULL ? *metadata_ : *default_instance_->metadata_;
}
inline ::model::VideoMetadata* CutboardImage::mutable_metadata() {
  
  if (metadata_ == NULL) {
    metadata_ = new ::model::VideoMetadata;
  }
  // @@protoc_insertion_point(field_mutable:model.CutboardImage.Metadata)
  return metadata_;
}
inline ::model::VideoMetadata* CutboardImage::release_metadata() {
  
  ::model::VideoMetadata* temp = metadata_;
  metadata_ = NULL;
  return temp;
}
inline void CutboardImage::set_allocated_metadata(::model::VideoMetadata* metadata) {
  delete metadata_;
  metadata_ = metadata;
  if (metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:model.CutboardImage.Metadata)
}

// optional .model.Cutboard Cutboard = 2;
inline bool CutboardImage::has_cutboard() const {
  return !_is_default_instance_ && cutboard_ != NULL;
}
inline void CutboardImage::clear_cutboard() {
  if (GetArenaNoVirtual() == NULL && cutboard_ != NULL) delete cutboard_;
  cutboard_ = NULL;
}
inline const ::model::Cutboard& CutboardImage::cutboard() const {
  // @@protoc_insertion_point(field_get:model.CutboardImage.Cutboard)
  return cutboard_ != NULL ? *cutboard_ : *default_instance_->cutboard_;
}
inline ::model::Cutboard* CutboardImage::mutable_cutboard() {
  
  if (cutboard_ == NULL) {
    cutboard_ = new ::model::Cutboard;
  }
  // @@protoc_insertion_point(field_mutable:model.CutboardImage.Cutboard)
  return cutboard_;
}
inline ::model::Cutboard* CutboardImage::release_cutboard() {
  
  ::model::Cutboard* temp = cutboard_;
  cutboard_ = NULL;
  return temp;
}
inline void CutboardImage::set_allocated_cutboard(::model::Cutboard* cutboard) {
  delete cutboard_;
  cutboard_ = cutboard;
  if (cutboard) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:model.CutboardImage.Cutboard)
}

// optional .model.Image Img = 3;
inline bool CutboardImage::has_img() const {
  return !_is_default_instance_ && img_ != NULL;
}
inline void CutboardImage::clear_img() {
  if (GetArenaNoVirtual() == NULL && img_ != NULL) delete img_;
  img_ = NULL;
}
inline const ::model::Image& CutboardImage::img() const {
  // @@protoc_insertion_point(field_get:model.CutboardImage.Img)
  return img_ != NULL ? *img_ : *default_instance_->img_;
}
inline ::model::Image* CutboardImage::mutable_img() {
  
  if (img_ == NULL) {
    img_ = new ::model::Image;
  }
  // @@protoc_insertion_point(field_mutable:model.CutboardImage.Img)
  return img_;
}
inline ::model::Image* CutboardImage::release_img() {
  
  ::model::Image* temp = img_;
  img_ = NULL;
  return temp;
}
inline void CutboardImage::set_allocated_img(::model::Image* img) {
  delete img_;
  img_ = img;
  if (img) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:model.CutboardImage.Img)
}

// -------------------------------------------------------------------

// Color

// optional int32 Id = 1;
inline void Color::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 Color::id() const {
  // @@protoc_insertion_point(field_get:model.Color.Id)
  return id_;
}
inline void Color::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:model.Color.Id)
}

// optional float Confidence = 2;
inline void Color::clear_confidence() {
  confidence_ = 0;
}
inline float Color::confidence() const {
  // @@protoc_insertion_point(field_get:model.Color.Confidence)
  return confidence_;
}
inline void Color::set_confidence(float value) {
  
  confidence_ = value;
  // @@protoc_insertion_point(field_set:model.Color.Confidence)
}

// optional string ColorName = 3;
inline void Color::clear_colorname() {
  colorname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Color::colorname() const {
  // @@protoc_insertion_point(field_get:model.Color.ColorName)
  return colorname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Color::set_colorname(const ::std::string& value) {
  
  colorname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:model.Color.ColorName)
}
inline void Color::set_colorname(const char* value) {
  
  colorname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:model.Color.ColorName)
}
inline void Color::set_colorname(const char* value, size_t size) {
  
  colorname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:model.Color.ColorName)
}
inline ::std::string* Color::mutable_colorname() {
  
  // @@protoc_insertion_point(field_mutable:model.Color.ColorName)
  return colorname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Color::release_colorname() {
  
  return colorname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Color::set_allocated_colorname(::std::string* colorname) {
  if (colorname != NULL) {
    
  } else {
    
  }
  colorname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), colorname);
  // @@protoc_insertion_point(field_set_allocated:model.Color.ColorName)
}

// -------------------------------------------------------------------

// Cutboard

// optional uint32 X = 1;
inline void Cutboard::clear_x() {
  x_ = 0u;
}
inline ::google::protobuf::uint32 Cutboard::x() const {
  // @@protoc_insertion_point(field_get:model.Cutboard.X)
  return x_;
}
inline void Cutboard::set_x(::google::protobuf::uint32 value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:model.Cutboard.X)
}

// optional uint32 Y = 2;
inline void Cutboard::clear_y() {
  y_ = 0u;
}
inline ::google::protobuf::uint32 Cutboard::y() const {
  // @@protoc_insertion_point(field_get:model.Cutboard.Y)
  return y_;
}
inline void Cutboard::set_y(::google::protobuf::uint32 value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:model.Cutboard.Y)
}

// optional uint32 Width = 3;
inline void Cutboard::clear_width() {
  width_ = 0u;
}
inline ::google::protobuf::uint32 Cutboard::width() const {
  // @@protoc_insertion_point(field_get:model.Cutboard.Width)
  return width_;
}
inline void Cutboard::set_width(::google::protobuf::uint32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:model.Cutboard.Width)
}

// optional uint32 Height = 4;
inline void Cutboard::clear_height() {
  height_ = 0u;
}
inline ::google::protobuf::uint32 Cutboard::height() const {
  // @@protoc_insertion_point(field_get:model.Cutboard.Height)
  return height_;
}
inline void Cutboard::set_height(::google::protobuf::uint32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:model.Cutboard.Height)
}

// -------------------------------------------------------------------

// FeatureVector

// optional int64 Id = 1;
inline void FeatureVector::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 FeatureVector::id() const {
  // @@protoc_insertion_point(field_get:model.FeatureVector.Id)
  return id_;
}
inline void FeatureVector::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:model.FeatureVector.Id)
}

// optional bytes Feature = 2;
inline void FeatureVector::clear_feature() {
  feature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FeatureVector::feature() const {
  // @@protoc_insertion_point(field_get:model.FeatureVector.Feature)
  return feature_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FeatureVector::set_feature(const ::std::string& value) {
  
  feature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:model.FeatureVector.Feature)
}
inline void FeatureVector::set_feature(const char* value) {
  
  feature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:model.FeatureVector.Feature)
}
inline void FeatureVector::set_feature(const void* value, size_t size) {
  
  feature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:model.FeatureVector.Feature)
}
inline ::std::string* FeatureVector::mutable_feature() {
  
  // @@protoc_insertion_point(field_mutable:model.FeatureVector.Feature)
  return feature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FeatureVector::release_feature() {
  
  return feature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FeatureVector::set_allocated_feature(::std::string* feature) {
  if (feature != NULL) {
    
  } else {
    
  }
  feature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), feature);
  // @@protoc_insertion_point(field_set_allocated:model.FeatureVector.Feature)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace model

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::model::ObjType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::model::ObjType>() {
  return ::model::ObjType_descriptor();
}
template <> struct is_proto_enum< ::model::DataFmtType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::model::DataFmtType>() {
  return ::model::DataFmtType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_common_2eproto__INCLUDED
