// Code generated by protoc-gen-go.
// source: ranker.proto
// DO NOT EDIT!

/*
Package dg_model is a generated protocol buffer package.

It is generated from these files:
	ranker.proto

It has these top-level messages:
	RankRequestContext
	RankResponseContext
	RankFeatureRequest
	RankItem
	RankFeatureResponse
	RankImageRequest
	RankImageResponse
	FeatureRankingRequest
	FeatureRankingResponse
	InfoAndFeature
	AddFeaturesRequest
	AddFeaturesResponse
*/
package dg_model

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import dg_model1 "."
import dg_model2 "."

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type RankRequestContext struct {
	SessionId string             `protobuf:"bytes,1,opt,name=SessionId,json=sessionId" json:"SessionId,omitempty"`
	UserName  string             `protobuf:"bytes,2,opt,name=UserName,json=userName" json:"UserName,omitempty"`
	Token     string             `protobuf:"bytes,3,opt,name=Token,json=token" json:"Token,omitempty"`
	Type      dg_model2.RankType `protobuf:"varint,4,opt,name=Type,json=type,enum=dg.model.RankType" json:"Type,omitempty"`
	Params    map[string]string  `protobuf:"bytes,5,rep,name=Params,json=params" json:"Params,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *RankRequestContext) Reset()                    { *m = RankRequestContext{} }
func (m *RankRequestContext) String() string            { return proto.CompactTextString(m) }
func (*RankRequestContext) ProtoMessage()               {}
func (*RankRequestContext) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *RankRequestContext) GetParams() map[string]string {
	if m != nil {
		return m.Params
	}
	return nil
}

type RankResponseContext struct {
	SessionId  string                     `protobuf:"bytes,1,opt,name=SessionId,json=sessionId" json:"SessionId,omitempty"`
	Status     string                     `protobuf:"bytes,2,opt,name=Status,json=status" json:"Status,omitempty"`
	Message    string                     `protobuf:"bytes,3,opt,name=Message,json=message" json:"Message,omitempty"`
	RequestTs  *dg_model2.Time            `protobuf:"bytes,4,opt,name=RequestTs,json=requestTs" json:"RequestTs,omitempty"`
	ResponseTs *dg_model2.Time            `protobuf:"bytes,5,opt,name=ResponseTs,json=responseTs" json:"ResponseTs,omitempty"`
	DebugTs    map[string]*dg_model2.Time `protobuf:"bytes,6,rep,name=DebugTs,json=debugTs" json:"DebugTs,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *RankResponseContext) Reset()                    { *m = RankResponseContext{} }
func (m *RankResponseContext) String() string            { return proto.CompactTextString(m) }
func (*RankResponseContext) ProtoMessage()               {}
func (*RankResponseContext) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *RankResponseContext) GetRequestTs() *dg_model2.Time {
	if m != nil {
		return m.RequestTs
	}
	return nil
}

func (m *RankResponseContext) GetResponseTs() *dg_model2.Time {
	if m != nil {
		return m.ResponseTs
	}
	return nil
}

func (m *RankResponseContext) GetDebugTs() map[string]*dg_model2.Time {
	if m != nil {
		return m.DebugTs
	}
	return nil
}

type RankFeatureRequest struct {
	Context       *RankRequestContext      `protobuf:"bytes,1,opt,name=Context,json=context" json:"Context,omitempty"`
	Feature       *dg_model1.FeatureVector `protobuf:"bytes,2,opt,name=Feature,json=feature" json:"Feature,omitempty"`
	MaxCandidates int32                    `protobuf:"varint,3,opt,name=MaxCandidates,json=maxCandidates" json:"MaxCandidates,omitempty"`
}

func (m *RankFeatureRequest) Reset()                    { *m = RankFeatureRequest{} }
func (m *RankFeatureRequest) String() string            { return proto.CompactTextString(m) }
func (*RankFeatureRequest) ProtoMessage()               {}
func (*RankFeatureRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *RankFeatureRequest) GetContext() *RankRequestContext {
	if m != nil {
		return m.Context
	}
	return nil
}

func (m *RankFeatureRequest) GetFeature() *dg_model1.FeatureVector {
	if m != nil {
		return m.Feature
	}
	return nil
}

type RankItem struct {
	Id    int32   `protobuf:"varint,1,opt,name=Id,json=id" json:"Id,omitempty"`
	Score float32 `protobuf:"fixed32,2,opt,name=Score,json=score" json:"Score,omitempty"`
	Name  string  `protobuf:"bytes,3,opt,name=Name,json=name" json:"Name,omitempty"`
	Uri   string  `protobuf:"bytes,4,opt,name=Uri,json=uri" json:"Uri,omitempty"`
	Data  string  `protobuf:"bytes,5,opt,name=Data,json=data" json:"Data,omitempty"`
}

func (m *RankItem) Reset()                    { *m = RankItem{} }
func (m *RankItem) String() string            { return proto.CompactTextString(m) }
func (*RankItem) ProtoMessage()               {}
func (*RankItem) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type RankFeatureResponse struct {
	Context    *RankResponseContext `protobuf:"bytes,1,opt,name=Context,json=context" json:"Context,omitempty"`
	Candidates []*RankItem          `protobuf:"bytes,2,rep,name=Candidates,json=candidates" json:"Candidates,omitempty"`
}

func (m *RankFeatureResponse) Reset()                    { *m = RankFeatureResponse{} }
func (m *RankFeatureResponse) String() string            { return proto.CompactTextString(m) }
func (*RankFeatureResponse) ProtoMessage()               {}
func (*RankFeatureResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *RankFeatureResponse) GetContext() *RankResponseContext {
	if m != nil {
		return m.Context
	}
	return nil
}

func (m *RankFeatureResponse) GetCandidates() []*RankItem {
	if m != nil {
		return m.Candidates
	}
	return nil
}

type RankImageRequest struct {
	Context         *RankRequestContext        `protobuf:"bytes,1,opt,name=Context,json=context" json:"Context,omitempty"`
	Image           *dg_model1.Image           `protobuf:"bytes,2,opt,name=Image,json=image" json:"Image,omitempty"`
	InterestedAreas []*dg_model1.Cutboard      `protobuf:"bytes,3,rep,name=InterestedAreas,json=interestedAreas" json:"InterestedAreas,omitempty"`
	Candidates      []*dg_model1.FeatureVector `protobuf:"bytes,4,rep,name=Candidates,json=candidates" json:"Candidates,omitempty"`
	MaxCandidates   int32                      `protobuf:"varint,5,opt,name=MaxCandidates,json=maxCandidates" json:"MaxCandidates,omitempty"`
}

func (m *RankImageRequest) Reset()                    { *m = RankImageRequest{} }
func (m *RankImageRequest) String() string            { return proto.CompactTextString(m) }
func (*RankImageRequest) ProtoMessage()               {}
func (*RankImageRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *RankImageRequest) GetContext() *RankRequestContext {
	if m != nil {
		return m.Context
	}
	return nil
}

func (m *RankImageRequest) GetImage() *dg_model1.Image {
	if m != nil {
		return m.Image
	}
	return nil
}

func (m *RankImageRequest) GetInterestedAreas() []*dg_model1.Cutboard {
	if m != nil {
		return m.InterestedAreas
	}
	return nil
}

func (m *RankImageRequest) GetCandidates() []*dg_model1.FeatureVector {
	if m != nil {
		return m.Candidates
	}
	return nil
}

type RankImageResponse struct {
	Context    *RankResponseContext `protobuf:"bytes,1,opt,name=Context,json=context" json:"Context,omitempty"`
	Candidates []*RankItem          `protobuf:"bytes,2,rep,name=Candidates,json=candidates" json:"Candidates,omitempty"`
}

func (m *RankImageResponse) Reset()                    { *m = RankImageResponse{} }
func (m *RankImageResponse) String() string            { return proto.CompactTextString(m) }
func (*RankImageResponse) ProtoMessage()               {}
func (*RankImageResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *RankImageResponse) GetContext() *RankResponseContext {
	if m != nil {
		return m.Context
	}
	return nil
}

func (m *RankImageResponse) GetCandidates() []*RankItem {
	if m != nil {
		return m.Candidates
	}
	return nil
}

// Deprecated
type FeatureRankingRequest struct {
	ReqId           int64                      `protobuf:"varint,1,opt,name=ReqId,json=reqId" json:"ReqId,omitempty"`
	Type            dg_model2.RecognizeType    `protobuf:"varint,2,opt,name=Type,json=type,enum=dg.model.RecognizeType" json:"Type,omitempty"`
	Image           *dg_model1.Image           `protobuf:"bytes,3,opt,name=Image,json=image" json:"Image,omitempty"`
	InterestedAreas []*dg_model1.Cutboard      `protobuf:"bytes,4,rep,name=InterestedAreas,json=interestedAreas" json:"InterestedAreas,omitempty"`
	DisabledAreas   []*dg_model1.Cutboard      `protobuf:"bytes,5,rep,name=DisabledAreas,json=disabledAreas" json:"DisabledAreas,omitempty"`
	Candidates      []*dg_model1.FeatureVector `protobuf:"bytes,6,rep,name=Candidates,json=candidates" json:"Candidates,omitempty"`
	Limit           int32                      `protobuf:"varint,7,opt,name=Limit,json=limit" json:"Limit,omitempty"`
}

func (m *FeatureRankingRequest) Reset()                    { *m = FeatureRankingRequest{} }
func (m *FeatureRankingRequest) String() string            { return proto.CompactTextString(m) }
func (*FeatureRankingRequest) ProtoMessage()               {}
func (*FeatureRankingRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *FeatureRankingRequest) GetImage() *dg_model1.Image {
	if m != nil {
		return m.Image
	}
	return nil
}

func (m *FeatureRankingRequest) GetInterestedAreas() []*dg_model1.Cutboard {
	if m != nil {
		return m.InterestedAreas
	}
	return nil
}

func (m *FeatureRankingRequest) GetDisabledAreas() []*dg_model1.Cutboard {
	if m != nil {
		return m.DisabledAreas
	}
	return nil
}

func (m *FeatureRankingRequest) GetCandidates() []*dg_model1.FeatureVector {
	if m != nil {
		return m.Candidates
	}
	return nil
}

// Deprecated
type FeatureRankingResponse struct {
	ReqId  int64     `protobuf:"varint,1,opt,name=ReqId,json=reqId" json:"ReqId,omitempty"`
	Ids    []int64   `protobuf:"varint,2,rep,packed,name=Ids,json=ids" json:"Ids,omitempty"`
	Scores []float32 `protobuf:"fixed32,3,rep,packed,name=Scores,json=scores" json:"Scores,omitempty"`
}

func (m *FeatureRankingResponse) Reset()                    { *m = FeatureRankingResponse{} }
func (m *FeatureRankingResponse) String() string            { return proto.CompactTextString(m) }
func (*FeatureRankingResponse) ProtoMessage()               {}
func (*FeatureRankingResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

type InfoAndFeature struct {
	Info    *RankItem                `protobuf:"bytes,1,opt,name=Info,json=info" json:"Info,omitempty"`
	Feature *dg_model1.FeatureVector `protobuf:"bytes,2,opt,name=Feature,json=feature" json:"Feature,omitempty"`
}

func (m *InfoAndFeature) Reset()                    { *m = InfoAndFeature{} }
func (m *InfoAndFeature) String() string            { return proto.CompactTextString(m) }
func (*InfoAndFeature) ProtoMessage()               {}
func (*InfoAndFeature) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *InfoAndFeature) GetInfo() *RankItem {
	if m != nil {
		return m.Info
	}
	return nil
}

func (m *InfoAndFeature) GetFeature() *dg_model1.FeatureVector {
	if m != nil {
		return m.Feature
	}
	return nil
}

type AddFeaturesRequest struct {
	Context  *RankRequestContext `protobuf:"bytes,1,opt,name=Context,json=context" json:"Context,omitempty"`
	Features []*InfoAndFeature   `protobuf:"bytes,2,rep,name=Features,json=features" json:"Features,omitempty"`
}

func (m *AddFeaturesRequest) Reset()                    { *m = AddFeaturesRequest{} }
func (m *AddFeaturesRequest) String() string            { return proto.CompactTextString(m) }
func (*AddFeaturesRequest) ProtoMessage()               {}
func (*AddFeaturesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *AddFeaturesRequest) GetContext() *RankRequestContext {
	if m != nil {
		return m.Context
	}
	return nil
}

func (m *AddFeaturesRequest) GetFeatures() []*InfoAndFeature {
	if m != nil {
		return m.Features
	}
	return nil
}

type AddFeaturesResponse struct {
	Context *RankResponseContext `protobuf:"bytes,1,opt,name=Context,json=context" json:"Context,omitempty"`
}

func (m *AddFeaturesResponse) Reset()                    { *m = AddFeaturesResponse{} }
func (m *AddFeaturesResponse) String() string            { return proto.CompactTextString(m) }
func (*AddFeaturesResponse) ProtoMessage()               {}
func (*AddFeaturesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *AddFeaturesResponse) GetContext() *RankResponseContext {
	if m != nil {
		return m.Context
	}
	return nil
}

func init() {
	proto.RegisterType((*RankRequestContext)(nil), "dg.model.RankRequestContext")
	proto.RegisterType((*RankResponseContext)(nil), "dg.model.RankResponseContext")
	proto.RegisterType((*RankFeatureRequest)(nil), "dg.model.RankFeatureRequest")
	proto.RegisterType((*RankItem)(nil), "dg.model.RankItem")
	proto.RegisterType((*RankFeatureResponse)(nil), "dg.model.RankFeatureResponse")
	proto.RegisterType((*RankImageRequest)(nil), "dg.model.RankImageRequest")
	proto.RegisterType((*RankImageResponse)(nil), "dg.model.RankImageResponse")
	proto.RegisterType((*FeatureRankingRequest)(nil), "dg.model.FeatureRankingRequest")
	proto.RegisterType((*FeatureRankingResponse)(nil), "dg.model.FeatureRankingResponse")
	proto.RegisterType((*InfoAndFeature)(nil), "dg.model.InfoAndFeature")
	proto.RegisterType((*AddFeaturesRequest)(nil), "dg.model.AddFeaturesRequest")
	proto.RegisterType((*AddFeaturesResponse)(nil), "dg.model.AddFeaturesResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for SimilarityService service

type SimilarityServiceClient interface {
	RankImage(ctx context.Context, in *RankImageRequest, opts ...grpc.CallOption) (*RankImageResponse, error)
	RankFeature(ctx context.Context, in *RankFeatureRequest, opts ...grpc.CallOption) (*RankFeatureResponse, error)
	AddFeatures(ctx context.Context, in *AddFeaturesRequest, opts ...grpc.CallOption) (*AddFeaturesResponse, error)
	// Deprecated
	GetRankedVector(ctx context.Context, in *FeatureRankingRequest, opts ...grpc.CallOption) (*FeatureRankingResponse, error)
}

type similarityServiceClient struct {
	cc *grpc.ClientConn
}

func NewSimilarityServiceClient(cc *grpc.ClientConn) SimilarityServiceClient {
	return &similarityServiceClient{cc}
}

func (c *similarityServiceClient) RankImage(ctx context.Context, in *RankImageRequest, opts ...grpc.CallOption) (*RankImageResponse, error) {
	out := new(RankImageResponse)
	err := grpc.Invoke(ctx, "/dg.model.SimilarityService/RankImage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *similarityServiceClient) RankFeature(ctx context.Context, in *RankFeatureRequest, opts ...grpc.CallOption) (*RankFeatureResponse, error) {
	out := new(RankFeatureResponse)
	err := grpc.Invoke(ctx, "/dg.model.SimilarityService/RankFeature", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *similarityServiceClient) AddFeatures(ctx context.Context, in *AddFeaturesRequest, opts ...grpc.CallOption) (*AddFeaturesResponse, error) {
	out := new(AddFeaturesResponse)
	err := grpc.Invoke(ctx, "/dg.model.SimilarityService/AddFeatures", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *similarityServiceClient) GetRankedVector(ctx context.Context, in *FeatureRankingRequest, opts ...grpc.CallOption) (*FeatureRankingResponse, error) {
	out := new(FeatureRankingResponse)
	err := grpc.Invoke(ctx, "/dg.model.SimilarityService/GetRankedVector", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SimilarityService service

type SimilarityServiceServer interface {
	RankImage(context.Context, *RankImageRequest) (*RankImageResponse, error)
	RankFeature(context.Context, *RankFeatureRequest) (*RankFeatureResponse, error)
	AddFeatures(context.Context, *AddFeaturesRequest) (*AddFeaturesResponse, error)
	// Deprecated
	GetRankedVector(context.Context, *FeatureRankingRequest) (*FeatureRankingResponse, error)
}

func RegisterSimilarityServiceServer(s *grpc.Server, srv SimilarityServiceServer) {
	s.RegisterService(&_SimilarityService_serviceDesc, srv)
}

func _SimilarityService_RankImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RankImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimilarityServiceServer).RankImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dg.model.SimilarityService/RankImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimilarityServiceServer).RankImage(ctx, req.(*RankImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SimilarityService_RankFeature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RankFeatureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimilarityServiceServer).RankFeature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dg.model.SimilarityService/RankFeature",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimilarityServiceServer).RankFeature(ctx, req.(*RankFeatureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SimilarityService_AddFeatures_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddFeaturesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimilarityServiceServer).AddFeatures(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dg.model.SimilarityService/AddFeatures",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimilarityServiceServer).AddFeatures(ctx, req.(*AddFeaturesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SimilarityService_GetRankedVector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeatureRankingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimilarityServiceServer).GetRankedVector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dg.model.SimilarityService/GetRankedVector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimilarityServiceServer).GetRankedVector(ctx, req.(*FeatureRankingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SimilarityService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dg.model.SimilarityService",
	HandlerType: (*SimilarityServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RankImage",
			Handler:    _SimilarityService_RankImage_Handler,
		},
		{
			MethodName: "RankFeature",
			Handler:    _SimilarityService_RankFeature_Handler,
		},
		{
			MethodName: "AddFeatures",
			Handler:    _SimilarityService_AddFeatures_Handler,
		},
		{
			MethodName: "GetRankedVector",
			Handler:    _SimilarityService_GetRankedVector_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("ranker.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 895 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xc4, 0x56, 0x4f, 0x6f, 0x1b, 0x45,
	0x14, 0xc7, 0x6b, 0xaf, 0xd7, 0x7e, 0xce, 0x9f, 0x66, 0x0a, 0x65, 0xb5, 0xb4, 0x22, 0x5a, 0x01,
	0x8a, 0x00, 0x59, 0xc2, 0x20, 0x28, 0x88, 0x03, 0x51, 0x42, 0x91, 0x51, 0x5b, 0xa1, 0xb1, 0x5b,
	0x71, 0x9d, 0xec, 0x4e, 0xad, 0x21, 0xde, 0xdd, 0x30, 0x33, 0xae, 0x1a, 0x4e, 0x88, 0x1b, 0x17,
	0xbe, 0x05, 0xdf, 0x85, 0x1b, 0x27, 0xbe, 0x0f, 0xf3, 0x6f, 0xe3, 0xd9, 0x8d, 0x13, 0x05, 0x72,
	0xe8, 0x25, 0xd9, 0x37, 0xef, 0xcd, 0xfb, 0xf3, 0xfb, 0xbd, 0xf7, 0xc6, 0xb0, 0xc5, 0x49, 0x79,
	0x4a, 0xf9, 0xf8, 0x8c, 0x57, 0xb2, 0x42, 0x83, 0x7c, 0x31, 0x2e, 0xaa, 0x9c, 0x2e, 0x93, 0xad,
	0xac, 0x2a, 0x8a, 0xaa, 0xb4, 0xe7, 0xc9, 0xde, 0xb2, 0xca, 0xc8, 0xd2, 0x3f, 0x4a, 0x7f, 0x0f,
	0x00, 0x61, 0x75, 0x17, 0xd3, 0x9f, 0x57, 0x54, 0xc8, 0xa3, 0xaa, 0x94, 0xf4, 0x95, 0x44, 0xf7,
	0x61, 0x38, 0xa3, 0x42, 0xb0, 0xaa, 0x9c, 0xe6, 0x71, 0x67, 0xbf, 0x73, 0x30, 0xc4, 0x43, 0x51,
	0x1f, 0xa0, 0x04, 0x06, 0xcf, 0x04, 0xe5, 0x4f, 0x49, 0x41, 0xe3, 0xc0, 0x28, 0x07, 0x2b, 0x27,
	0xa3, 0x37, 0x21, 0x9c, 0x57, 0xa7, 0xb4, 0x8c, 0xbb, 0x46, 0x11, 0x4a, 0x2d, 0xa0, 0x0f, 0xa0,
	0x37, 0x3f, 0x3f, 0xa3, 0x71, 0x4f, 0x1d, 0xee, 0x4c, 0xd0, 0xb8, 0x4e, 0x70, 0xac, 0x63, 0x6b,
	0x0d, 0xee, 0x49, 0xf5, 0x17, 0x7d, 0x03, 0xfd, 0x1f, 0x08, 0x27, 0x85, 0x88, 0xc3, 0xfd, 0xee,
	0xc1, 0x68, 0x72, 0xd0, 0xb4, 0x6c, 0x66, 0x39, 0xb6, 0xa6, 0xdf, 0x96, 0x92, 0x9f, 0xe3, 0xfe,
	0x99, 0x11, 0x92, 0x2f, 0x61, 0xe4, 0x1d, 0xa3, 0x3b, 0xd0, 0x3d, 0xa5, 0xe7, 0xae, 0x04, 0xfd,
	0xa9, 0x13, 0x7c, 0x49, 0x96, 0xab, 0x3a, 0x73, 0x2b, 0x7c, 0x15, 0x3c, 0xec, 0xa4, 0xff, 0x04,
	0x70, 0xd7, 0x46, 0x11, 0x67, 0x55, 0x29, 0xe8, 0xcd, 0xc0, 0xb8, 0x07, 0xfd, 0x99, 0x24, 0x72,
	0x25, 0x9c, 0xc3, 0xbe, 0x30, 0x12, 0x8a, 0x21, 0x7a, 0xa2, 0x8c, 0xc8, 0x82, 0x3a, 0x28, 0xa2,
	0xc2, 0x8a, 0xe8, 0x63, 0x18, 0xba, 0x42, 0xe6, 0xc2, 0x20, 0x32, 0x9a, 0xec, 0xac, 0xeb, 0x9c,
	0xb3, 0x82, 0xe2, 0x21, 0xaf, 0x0d, 0xd0, 0x18, 0xa0, 0x4e, 0x68, 0xae, 0x61, 0xd9, 0x64, 0x0e,
	0xfc, 0xc2, 0x02, 0x1d, 0x43, 0x74, 0x4c, 0x4f, 0x56, 0x0b, 0x65, 0xdc, 0x37, 0x18, 0x7e, 0xd8,
	0xc6, 0xb0, 0x51, 0xdd, 0xd8, 0x19, 0x5b, 0x14, 0xa3, 0xdc, 0x4a, 0xc9, 0xf7, 0xb0, 0xe5, 0x2b,
	0x36, 0xe0, 0xf8, 0x9e, 0x8f, 0xe3, 0xe5, 0x94, 0x3c, 0x5c, 0xff, 0xec, 0xd8, 0x1e, 0x7b, 0x44,
	0x15, 0x30, 0x9c, 0xba, 0xda, 0xd1, 0xe7, 0x10, 0xb9, 0x1c, 0x8c, 0xdb, 0xd1, 0xe4, 0xfe, 0x75,
	0x64, 0xe3, 0x28, 0x73, 0x74, 0x7c, 0x02, 0x91, 0xf3, 0xe4, 0x42, 0xbf, 0xbd, 0xbe, 0xe7, 0x14,
	0xcf, 0x69, 0x26, 0x2b, 0x8e, 0xa3, 0x17, 0x56, 0x54, 0xb9, 0x6e, 0x3f, 0x21, 0xaf, 0x8e, 0x48,
	0x99, 0xb3, 0x9c, 0x48, 0x2a, 0x0c, 0x23, 0x21, 0xde, 0x2e, 0xfc, 0xc3, 0xf4, 0x27, 0x18, 0xe8,
	0xb8, 0x53, 0x49, 0x0b, 0xb4, 0x03, 0x81, 0x23, 0x3b, 0xc4, 0x01, 0xcb, 0x75, 0xd7, 0xcc, 0xb2,
	0xca, 0x85, 0x0c, 0x70, 0x28, 0xb4, 0x80, 0x10, 0xf4, 0xcc, 0x10, 0x58, 0x82, 0x7b, 0xa5, 0x1e,
	0x00, 0x85, 0xd4, 0x33, 0xce, 0x0c, 0xaf, 0x0a, 0xa9, 0x15, 0x67, 0xda, 0xea, 0x98, 0x48, 0x62,
	0xb8, 0x53, 0x56, 0x2a, 0x18, 0x49, 0x7f, 0xeb, 0xd8, 0x5e, 0xbb, 0xc0, 0xc4, 0x92, 0x82, 0xbe,
	0x68, 0x83, 0xf2, 0xe0, 0x5a, 0xf6, 0xd6, 0xa8, 0x4c, 0x00, 0xbc, 0xfa, 0x02, 0xc3, 0x7c, 0x6b,
	0xce, 0x74, 0x61, 0x18, 0xb2, 0x75, 0xc1, 0x7f, 0x04, 0x70, 0xc7, 0x28, 0x0a, 0xd5, 0x96, 0xb7,
	0xa5, 0xe5, 0x7d, 0x08, 0x8d, 0x1f, 0x47, 0xca, 0xee, 0xfa, 0x96, 0x75, 0x1f, 0x32, 0xfd, 0x0f,
	0x7d, 0x0d, 0xbb, 0x53, 0x75, 0x41, 0x35, 0xac, 0xa4, 0xf9, 0x21, 0xa7, 0x44, 0x93, 0xd1, 0x4a,
	0xf6, 0x68, 0x25, 0x4f, 0x2a, 0xc2, 0x73, 0xbc, 0xcb, 0x9a, 0xa6, 0x0a, 0x1e, 0xbf, 0xca, 0x9e,
	0xb9, 0x78, 0x25, 0xfd, 0x5e, 0xa9, 0x97, 0x3b, 0x20, 0xdc, 0xd4, 0x01, 0xbf, 0x76, 0x60, 0xcf,
	0x03, 0xe4, 0x75, 0x70, 0xf2, 0x57, 0x00, 0x6f, 0xd5, 0x4d, 0xa1, 0xf4, 0xac, 0x5c, 0xd4, 0xc4,
	0xa8, 0x16, 0x54, 0x9f, 0xae, 0x2b, 0xbb, 0x38, 0xe4, 0x5a, 0x40, 0x1f, 0xb9, 0xcd, 0x1a, 0x98,
	0xcd, 0xea, 0x61, 0x81, 0x69, 0x56, 0x2d, 0x4a, 0xf6, 0x0b, 0xf5, 0xd6, 0xeb, 0x05, 0x47, 0xdd,
	0xff, 0xca, 0x51, 0xef, 0xe6, 0x1c, 0x3d, 0x84, 0xed, 0x63, 0x26, 0xc8, 0xc9, 0xb2, 0xbe, 0x1b,
	0x5e, 0x79, 0x77, 0x3b, 0xf7, 0x0d, 0x5b, 0xec, 0xf6, 0x6f, 0xce, 0xae, 0x82, 0xe6, 0x31, 0x2b,
	0x98, 0x8c, 0x23, 0xc3, 0x6a, 0xb8, 0xd4, 0x42, 0xfa, 0x23, 0xdc, 0x6b, 0x23, 0xe9, 0x18, 0xdd,
	0x0c, 0xa5, 0x9a, 0xdc, 0x69, 0x6e, 0x79, 0xea, 0xe2, 0x2e, 0xcb, 0x85, 0xd9, 0xed, 0x7a, 0xd0,
	0x6d, 0x8f, 0x06, 0x6a, 0xb7, 0x1b, 0x29, 0x3d, 0x85, 0x9d, 0x69, 0xf9, 0xa2, 0x3a, 0x2c, 0x73,
	0x17, 0x40, 0x3f, 0x70, 0xfa, 0xc4, 0x35, 0xc8, 0x26, 0x92, 0x7b, 0x4c, 0xe9, 0xff, 0xc7, 0xf2,
	0xd2, 0xab, 0x02, 0x1d, 0xe6, 0x75, 0x24, 0x71, 0xdb, 0x39, 0xfd, 0x0c, 0x06, 0xb5, 0x2b, 0xd7,
	0x92, 0xb1, 0xd7, 0x06, 0x8d, 0xaa, 0xf0, 0xc0, 0xe5, 0x20, 0xd2, 0xa7, 0x70, 0xb7, 0x91, 0xc3,
	0x2d, 0x47, 0x63, 0xf2, 0x77, 0x00, 0x7b, 0x33, 0xc5, 0xd2, 0x92, 0x70, 0x26, 0xcf, 0x67, 0x94,
	0xbf, 0x64, 0x19, 0x45, 0x8f, 0xd4, 0xcb, 0x58, 0x8f, 0x1f, 0x4a, 0x5a, 0x20, 0x7a, 0x4b, 0x2a,
	0x79, 0x67, 0xa3, 0xce, 0xc6, 0x4a, 0xdf, 0x40, 0x8f, 0x61, 0xe4, 0x2d, 0x57, 0xd4, 0x42, 0xa6,
	0xf9, 0x0e, 0x25, 0x0f, 0xae, 0xd0, 0xfa, 0xde, 0xbc, 0xda, 0x7d, 0x6f, 0x97, 0x69, 0xf1, 0xbd,
	0x6d, 0x00, 0x4c, 0x79, 0x7b, 0x0e, 0xbb, 0xdf, 0x51, 0xa9, 0x23, 0xd1, 0xdc, 0x52, 0x8d, 0xde,
	0xbd, 0xd4, 0x03, 0xcd, 0xd1, 0x4f, 0xf6, 0xaf, 0x36, 0xa8, 0xfd, 0x9e, 0xf4, 0xcd, 0x0f, 0xba,
	0x4f, 0xff, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x11, 0x11, 0x3d, 0xc4, 0x0b, 0x0a, 0x00, 0x00,
}
