// Code generated by protoc-gen-go.
// source: witness.proto
// DO NOT EDIT!

/*
Package dg_model is a generated protocol buffer package.

It is generated from these files:
	witness.proto

It has these top-level messages:
	IndexRequest
	IndexTxtRequest
	IndexTxtResponse
	CommonIndex
	BrandIndex
	IndexResponse
	WitnessRequest
	WitnessBatchRequest
	WitnessResponse
	WitnessBatchResponse
	WitnessRelativeROI
	WitnessMarginROI
	WitnessRequestContext
	WitnessImage
	WitnessResponseContext
	WitnessResult
*/
package dg_model

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import dg_model1 "."
import dg_model2 "."

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type IndexType int32

const (
	IndexType_INDEX_DEFAULT                  IndexType = 0
	IndexType_INDEX_CAR_BRAND                IndexType = 1
	IndexType_INDEX_CAR_TYPE                 IndexType = 2
	IndexType_INDEX_CAR_COLOR                IndexType = 3
	IndexType_INDEX_CAR_MARKER               IndexType = 4
	IndexType_INDEX_CAR_PLATE_TYPE           IndexType = 5
	IndexType_INDEX_CAR_PLATE_COLOR          IndexType = 6
	IndexType_INDEX_CAR_PEDESTRIAN_ATTR_TYPE IndexType = 7
)

var IndexType_name = map[int32]string{
	0: "INDEX_DEFAULT",
	1: "INDEX_CAR_BRAND",
	2: "INDEX_CAR_TYPE",
	3: "INDEX_CAR_COLOR",
	4: "INDEX_CAR_MARKER",
	5: "INDEX_CAR_PLATE_TYPE",
	6: "INDEX_CAR_PLATE_COLOR",
	7: "INDEX_CAR_PEDESTRIAN_ATTR_TYPE",
}
var IndexType_value = map[string]int32{
	"INDEX_DEFAULT":                  0,
	"INDEX_CAR_BRAND":                1,
	"INDEX_CAR_TYPE":                 2,
	"INDEX_CAR_COLOR":                3,
	"INDEX_CAR_MARKER":               4,
	"INDEX_CAR_PLATE_TYPE":           5,
	"INDEX_CAR_PLATE_COLOR":          6,
	"INDEX_CAR_PEDESTRIAN_ATTR_TYPE": 7,
}

func (x IndexType) String() string {
	return proto.EnumName(IndexType_name, int32(x))
}
func (IndexType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type IndexRequest struct {
	IndexType IndexType `protobuf:"varint,1,opt,name=IndexType,json=indexType,enum=dg.model.IndexType" json:"IndexType,omitempty"`
}

func (m *IndexRequest) Reset()                    { *m = IndexRequest{} }
func (m *IndexRequest) String() string            { return proto.CompactTextString(m) }
func (*IndexRequest) ProtoMessage()               {}
func (*IndexRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type IndexTxtRequest struct {
	IndexType IndexType `protobuf:"varint,1,opt,name=IndexType,json=indexType,enum=dg.model.IndexType" json:"IndexType,omitempty"`
}

func (m *IndexTxtRequest) Reset()                    { *m = IndexTxtRequest{} }
func (m *IndexTxtRequest) String() string            { return proto.CompactTextString(m) }
func (*IndexTxtRequest) ProtoMessage()               {}
func (*IndexTxtRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type IndexTxtResponse struct {
	Context string `protobuf:"bytes,1,opt,name=Context,json=context" json:"Context,omitempty"`
}

func (m *IndexTxtResponse) Reset()                    { *m = IndexTxtResponse{} }
func (m *IndexTxtResponse) String() string            { return proto.CompactTextString(m) }
func (*IndexTxtResponse) ProtoMessage()               {}
func (*IndexTxtResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type CommonIndex struct {
	Items []*CommonIndex_Item `protobuf:"bytes,1,rep,name=Items,json=items" json:"Items,omitempty"`
}

func (m *CommonIndex) Reset()                    { *m = CommonIndex{} }
func (m *CommonIndex) String() string            { return proto.CompactTextString(m) }
func (*CommonIndex) ProtoMessage()               {}
func (*CommonIndex) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *CommonIndex) GetItems() []*CommonIndex_Item {
	if m != nil {
		return m.Items
	}
	return nil
}

type CommonIndex_Item struct {
	Id   int32  `protobuf:"varint,1,opt,name=Id,json=id" json:"Id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=Name,json=name" json:"Name,omitempty"`
}

func (m *CommonIndex_Item) Reset()                    { *m = CommonIndex_Item{} }
func (m *CommonIndex_Item) String() string            { return proto.CompactTextString(m) }
func (*CommonIndex_Item) ProtoMessage()               {}
func (*CommonIndex_Item) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3, 0} }

type BrandIndex struct {
	Items []*BrandIndex_Item `protobuf:"bytes,1,rep,name=Items,json=items" json:"Items,omitempty"`
}

func (m *BrandIndex) Reset()                    { *m = BrandIndex{} }
func (m *BrandIndex) String() string            { return proto.CompactTextString(m) }
func (*BrandIndex) ProtoMessage()               {}
func (*BrandIndex) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *BrandIndex) GetItems() []*BrandIndex_Item {
	if m != nil {
		return m.Items
	}
	return nil
}

type BrandIndex_Item struct {
	MainBrandId   int32  `protobuf:"varint,2,opt,name=MainBrandId,json=mainBrandId" json:"MainBrandId,omitempty"`
	SubBrandId    int32  `protobuf:"varint,3,opt,name=SubBrandId,json=subBrandId" json:"SubBrandId,omitempty"`
	YearModelId   int32  `protobuf:"varint,4,opt,name=YearModelId,json=yearModelId" json:"YearModelId,omitempty"`
	MainBrandName string `protobuf:"bytes,5,opt,name=MainBrandName,json=mainBrandName" json:"MainBrandName,omitempty"`
	SubBrandName  string `protobuf:"bytes,6,opt,name=SubBrandName,json=subBrandName" json:"SubBrandName,omitempty"`
	YearModelName string `protobuf:"bytes,7,opt,name=YearModelName,json=yearModelName" json:"YearModelName,omitempty"`
}

func (m *BrandIndex_Item) Reset()                    { *m = BrandIndex_Item{} }
func (m *BrandIndex_Item) String() string            { return proto.CompactTextString(m) }
func (*BrandIndex_Item) ProtoMessage()               {}
func (*BrandIndex_Item) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4, 0} }

type IndexResponse struct {
	// Types that are valid to be assigned to IndexContent:
	//	*IndexResponse_Index
	//	*IndexResponse_BrandIndex
	IndexContent isIndexResponse_IndexContent `protobuf_oneof:"index_content"`
}

func (m *IndexResponse) Reset()                    { *m = IndexResponse{} }
func (m *IndexResponse) String() string            { return proto.CompactTextString(m) }
func (*IndexResponse) ProtoMessage()               {}
func (*IndexResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type isIndexResponse_IndexContent interface {
	isIndexResponse_IndexContent()
}

type IndexResponse_Index struct {
	Index *CommonIndex `protobuf:"bytes,1,opt,name=Index,json=index,oneof"`
}
type IndexResponse_BrandIndex struct {
	BrandIndex *BrandIndex `protobuf:"bytes,2,opt,name=BrandIndex,json=brandIndex,oneof"`
}

func (*IndexResponse_Index) isIndexResponse_IndexContent()      {}
func (*IndexResponse_BrandIndex) isIndexResponse_IndexContent() {}

func (m *IndexResponse) GetIndexContent() isIndexResponse_IndexContent {
	if m != nil {
		return m.IndexContent
	}
	return nil
}

func (m *IndexResponse) GetIndex() *CommonIndex {
	if x, ok := m.GetIndexContent().(*IndexResponse_Index); ok {
		return x.Index
	}
	return nil
}

func (m *IndexResponse) GetBrandIndex() *BrandIndex {
	if x, ok := m.GetIndexContent().(*IndexResponse_BrandIndex); ok {
		return x.BrandIndex
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*IndexResponse) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _IndexResponse_OneofMarshaler, _IndexResponse_OneofUnmarshaler, _IndexResponse_OneofSizer, []interface{}{
		(*IndexResponse_Index)(nil),
		(*IndexResponse_BrandIndex)(nil),
	}
}

func _IndexResponse_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*IndexResponse)
	// index_content
	switch x := m.IndexContent.(type) {
	case *IndexResponse_Index:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Index); err != nil {
			return err
		}
	case *IndexResponse_BrandIndex:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BrandIndex); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("IndexResponse.IndexContent has unexpected type %T", x)
	}
	return nil
}

func _IndexResponse_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*IndexResponse)
	switch tag {
	case 1: // index_content.Index
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CommonIndex)
		err := b.DecodeMessage(msg)
		m.IndexContent = &IndexResponse_Index{msg}
		return true, err
	case 2: // index_content.BrandIndex
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(BrandIndex)
		err := b.DecodeMessage(msg)
		m.IndexContent = &IndexResponse_BrandIndex{msg}
		return true, err
	default:
		return false, nil
	}
}

func _IndexResponse_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*IndexResponse)
	// index_content
	switch x := m.IndexContent.(type) {
	case *IndexResponse_Index:
		s := proto.Size(x.Index)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *IndexResponse_BrandIndex:
		s := proto.Size(x.BrandIndex)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type WitnessRequest struct {
	Context *WitnessRequestContext `protobuf:"bytes,1,opt,name=Context,json=context" json:"Context,omitempty"`
	Image   *WitnessImage          `protobuf:"bytes,2,opt,name=Image,json=image" json:"Image,omitempty"`
}

func (m *WitnessRequest) Reset()                    { *m = WitnessRequest{} }
func (m *WitnessRequest) String() string            { return proto.CompactTextString(m) }
func (*WitnessRequest) ProtoMessage()               {}
func (*WitnessRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *WitnessRequest) GetContext() *WitnessRequestContext {
	if m != nil {
		return m.Context
	}
	return nil
}

func (m *WitnessRequest) GetImage() *WitnessImage {
	if m != nil {
		return m.Image
	}
	return nil
}

type WitnessBatchRequest struct {
	Context *WitnessRequestContext `protobuf:"bytes,1,opt,name=Context,json=context" json:"Context,omitempty"`
	Images  []*WitnessImage        `protobuf:"bytes,2,rep,name=Images,json=images" json:"Images,omitempty"`
}

func (m *WitnessBatchRequest) Reset()                    { *m = WitnessBatchRequest{} }
func (m *WitnessBatchRequest) String() string            { return proto.CompactTextString(m) }
func (*WitnessBatchRequest) ProtoMessage()               {}
func (*WitnessBatchRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *WitnessBatchRequest) GetContext() *WitnessRequestContext {
	if m != nil {
		return m.Context
	}
	return nil
}

func (m *WitnessBatchRequest) GetImages() []*WitnessImage {
	if m != nil {
		return m.Images
	}
	return nil
}

type WitnessResponse struct {
	Context *WitnessResponseContext `protobuf:"bytes,1,opt,name=Context,json=context" json:"Context,omitempty"`
	Result  *WitnessResult          `protobuf:"bytes,2,opt,name=Result,json=result" json:"Result,omitempty"`
}

func (m *WitnessResponse) Reset()                    { *m = WitnessResponse{} }
func (m *WitnessResponse) String() string            { return proto.CompactTextString(m) }
func (*WitnessResponse) ProtoMessage()               {}
func (*WitnessResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *WitnessResponse) GetContext() *WitnessResponseContext {
	if m != nil {
		return m.Context
	}
	return nil
}

func (m *WitnessResponse) GetResult() *WitnessResult {
	if m != nil {
		return m.Result
	}
	return nil
}

type WitnessBatchResponse struct {
	Context *WitnessResponseContext `protobuf:"bytes,1,opt,name=Context,json=context" json:"Context,omitempty"`
	Results []*WitnessResult        `protobuf:"bytes,2,rep,name=Results,json=results" json:"Results,omitempty"`
}

func (m *WitnessBatchResponse) Reset()                    { *m = WitnessBatchResponse{} }
func (m *WitnessBatchResponse) String() string            { return proto.CompactTextString(m) }
func (*WitnessBatchResponse) ProtoMessage()               {}
func (*WitnessBatchResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *WitnessBatchResponse) GetContext() *WitnessResponseContext {
	if m != nil {
		return m.Context
	}
	return nil
}

func (m *WitnessBatchResponse) GetResults() []*WitnessResult {
	if m != nil {
		return m.Results
	}
	return nil
}

type WitnessRelativeROI struct {
	PosX   int32 `protobuf:"varint,1,opt,name=PosX,json=posX" json:"PosX,omitempty"`
	PosY   int32 `protobuf:"varint,2,opt,name=PosY,json=posY" json:"PosY,omitempty"`
	Width  int32 `protobuf:"varint,3,opt,name=Width,json=width" json:"Width,omitempty"`
	Height int32 `protobuf:"varint,4,opt,name=Height,json=height" json:"Height,omitempty"`
}

func (m *WitnessRelativeROI) Reset()                    { *m = WitnessRelativeROI{} }
func (m *WitnessRelativeROI) String() string            { return proto.CompactTextString(m) }
func (*WitnessRelativeROI) ProtoMessage()               {}
func (*WitnessRelativeROI) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

type WitnessMarginROI struct {
	Left   int32 `protobuf:"varint,1,opt,name=Left,json=left" json:"Left,omitempty"`
	Top    int32 `protobuf:"varint,2,opt,name=Top,json=top" json:"Top,omitempty"`
	Right  int32 `protobuf:"varint,3,opt,name=Right,json=right" json:"Right,omitempty"`
	Bottom int32 `protobuf:"varint,4,opt,name=Bottom,json=bottom" json:"Bottom,omitempty"`
}

func (m *WitnessMarginROI) Reset()                    { *m = WitnessMarginROI{} }
func (m *WitnessMarginROI) String() string            { return proto.CompactTextString(m) }
func (*WitnessMarginROI) ProtoMessage()               {}
func (*WitnessMarginROI) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

type WitnessRequestContext struct {
	SessionId string                         `protobuf:"bytes,1,opt,name=SessionId,json=sessionId" json:"SessionId,omitempty"`
	UserName  string                         `protobuf:"bytes,2,opt,name=UserName,json=userName" json:"UserName,omitempty"`
	Token     string                         `protobuf:"bytes,3,opt,name=Token,json=token" json:"Token,omitempty"`
	Functions []dg_model2.RecognizeFunctions `protobuf:"varint,4,rep,packed,name=Functions,json=functions,enum=dg.model.RecognizeFunctions" json:"Functions,omitempty"`
	Type      dg_model2.RecognizeType        `protobuf:"varint,5,opt,name=Type,json=type,enum=dg.model.RecognizeType" json:"Type,omitempty"`
	Storages  []*dg_model1.StorageConfig     `protobuf:"bytes,6,rep,name=Storages,json=storages" json:"Storages,omitempty"`
	Params    map[string]string              `protobuf:"bytes,7,rep,name=Params,json=params" json:"Params,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *WitnessRequestContext) Reset()                    { *m = WitnessRequestContext{} }
func (m *WitnessRequestContext) String() string            { return proto.CompactTextString(m) }
func (*WitnessRequestContext) ProtoMessage()               {}
func (*WitnessRequestContext) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *WitnessRequestContext) GetStorages() []*dg_model1.StorageConfig {
	if m != nil {
		return m.Storages
	}
	return nil
}

func (m *WitnessRequestContext) GetParams() map[string]string {
	if m != nil {
		return m.Params
	}
	return nil
}

type WitnessImage struct {
	Data            *dg_model1.Image       `protobuf:"bytes,1,opt,name=Data,json=data" json:"Data,omitempty"`
	WitnessMetaData *dg_model1.SrcMetadata `protobuf:"bytes,2,opt,name=WitnessMetaData,json=witnessMetaData" json:"WitnessMetaData,omitempty"`
	RelativeRoi     []*WitnessRelativeROI  `protobuf:"bytes,3,rep,name=RelativeRoi,json=relativeRoi" json:"RelativeRoi,omitempty"`
	MarginRoi       []*WitnessMarginROI    `protobuf:"bytes,4,rep,name=MarginRoi,json=marginRoi" json:"MarginRoi,omitempty"`
}

func (m *WitnessImage) Reset()                    { *m = WitnessImage{} }
func (m *WitnessImage) String() string            { return proto.CompactTextString(m) }
func (*WitnessImage) ProtoMessage()               {}
func (*WitnessImage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *WitnessImage) GetData() *dg_model1.Image {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *WitnessImage) GetWitnessMetaData() *dg_model1.SrcMetadata {
	if m != nil {
		return m.WitnessMetaData
	}
	return nil
}

func (m *WitnessImage) GetRelativeRoi() []*WitnessRelativeROI {
	if m != nil {
		return m.RelativeRoi
	}
	return nil
}

func (m *WitnessImage) GetMarginRoi() []*WitnessMarginROI {
	if m != nil {
		return m.MarginRoi
	}
	return nil
}

type WitnessResponseContext struct {
	SessionId  string                     `protobuf:"bytes,1,opt,name=SessionId,json=sessionId" json:"SessionId,omitempty"`
	Status     string                     `protobuf:"bytes,2,opt,name=Status,json=status" json:"Status,omitempty"`
	Message    string                     `protobuf:"bytes,3,opt,name=Message,json=message" json:"Message,omitempty"`
	RequestTs  *dg_model2.Time            `protobuf:"bytes,4,opt,name=RequestTs,json=requestTs" json:"RequestTs,omitempty"`
	ResponseTs *dg_model2.Time            `protobuf:"bytes,5,opt,name=ResponseTs,json=responseTs" json:"ResponseTs,omitempty"`
	DebugTs    map[string]*dg_model2.Time `protobuf:"bytes,6,rep,name=DebugTs,json=debugTs" json:"DebugTs,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *WitnessResponseContext) Reset()                    { *m = WitnessResponseContext{} }
func (m *WitnessResponseContext) String() string            { return proto.CompactTextString(m) }
func (*WitnessResponseContext) ProtoMessage()               {}
func (*WitnessResponseContext) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *WitnessResponseContext) GetRequestTs() *dg_model2.Time {
	if m != nil {
		return m.RequestTs
	}
	return nil
}

func (m *WitnessResponseContext) GetResponseTs() *dg_model2.Time {
	if m != nil {
		return m.ResponseTs
	}
	return nil
}

func (m *WitnessResponseContext) GetDebugTs() map[string]*dg_model2.Time {
	if m != nil {
		return m.DebugTs
	}
	return nil
}

type WitnessResult struct {
	InnerStatus  string                     `protobuf:"bytes,1,opt,name=InnerStatus,json=innerStatus" json:"InnerStatus,omitempty"`
	InnerMessage string                     `protobuf:"bytes,2,opt,name=InnerMessage,json=innerMessage" json:"InnerMessage,omitempty"`
	Image        *WitnessImage              `protobuf:"bytes,3,opt,name=Image,json=image" json:"Image,omitempty"`
	Vehicles     []*dg_model1.RecVehicle    `protobuf:"bytes,4,rep,name=Vehicles,json=vehicles" json:"Vehicles,omitempty"`
	Pedestrian   []*dg_model1.RecPedestrian `protobuf:"bytes,5,rep,name=Pedestrian,json=pedestrian" json:"Pedestrian,omitempty"`
}

func (m *WitnessResult) Reset()                    { *m = WitnessResult{} }
func (m *WitnessResult) String() string            { return proto.CompactTextString(m) }
func (*WitnessResult) ProtoMessage()               {}
func (*WitnessResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *WitnessResult) GetImage() *WitnessImage {
	if m != nil {
		return m.Image
	}
	return nil
}

func (m *WitnessResult) GetVehicles() []*dg_model1.RecVehicle {
	if m != nil {
		return m.Vehicles
	}
	return nil
}

func (m *WitnessResult) GetPedestrian() []*dg_model1.RecPedestrian {
	if m != nil {
		return m.Pedestrian
	}
	return nil
}

func init() {
	proto.RegisterType((*IndexRequest)(nil), "dg.model.IndexRequest")
	proto.RegisterType((*IndexTxtRequest)(nil), "dg.model.IndexTxtRequest")
	proto.RegisterType((*IndexTxtResponse)(nil), "dg.model.IndexTxtResponse")
	proto.RegisterType((*CommonIndex)(nil), "dg.model.CommonIndex")
	proto.RegisterType((*CommonIndex_Item)(nil), "dg.model.CommonIndex.Item")
	proto.RegisterType((*BrandIndex)(nil), "dg.model.BrandIndex")
	proto.RegisterType((*BrandIndex_Item)(nil), "dg.model.BrandIndex.Item")
	proto.RegisterType((*IndexResponse)(nil), "dg.model.IndexResponse")
	proto.RegisterType((*WitnessRequest)(nil), "dg.model.WitnessRequest")
	proto.RegisterType((*WitnessBatchRequest)(nil), "dg.model.WitnessBatchRequest")
	proto.RegisterType((*WitnessResponse)(nil), "dg.model.WitnessResponse")
	proto.RegisterType((*WitnessBatchResponse)(nil), "dg.model.WitnessBatchResponse")
	proto.RegisterType((*WitnessRelativeROI)(nil), "dg.model.WitnessRelativeROI")
	proto.RegisterType((*WitnessMarginROI)(nil), "dg.model.WitnessMarginROI")
	proto.RegisterType((*WitnessRequestContext)(nil), "dg.model.WitnessRequestContext")
	proto.RegisterType((*WitnessImage)(nil), "dg.model.WitnessImage")
	proto.RegisterType((*WitnessResponseContext)(nil), "dg.model.WitnessResponseContext")
	proto.RegisterType((*WitnessResult)(nil), "dg.model.WitnessResult")
	proto.RegisterEnum("dg.model.IndexType", IndexType_name, IndexType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for WitnessService service

type WitnessServiceClient interface {
	Recognize(ctx context.Context, in *WitnessRequest, opts ...grpc.CallOption) (*WitnessResponse, error)
	BatchRecognize(ctx context.Context, in *WitnessBatchRequest, opts ...grpc.CallOption) (*WitnessBatchResponse, error)
	GetIndex(ctx context.Context, in *IndexRequest, opts ...grpc.CallOption) (*IndexResponse, error)
	GetIndexTxt(ctx context.Context, in *IndexTxtRequest, opts ...grpc.CallOption) (*IndexTxtResponse, error)
}

type witnessServiceClient struct {
	cc *grpc.ClientConn
}

func NewWitnessServiceClient(cc *grpc.ClientConn) WitnessServiceClient {
	return &witnessServiceClient{cc}
}

func (c *witnessServiceClient) Recognize(ctx context.Context, in *WitnessRequest, opts ...grpc.CallOption) (*WitnessResponse, error) {
	out := new(WitnessResponse)
	err := grpc.Invoke(ctx, "/dg.model.WitnessService/Recognize", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *witnessServiceClient) BatchRecognize(ctx context.Context, in *WitnessBatchRequest, opts ...grpc.CallOption) (*WitnessBatchResponse, error) {
	out := new(WitnessBatchResponse)
	err := grpc.Invoke(ctx, "/dg.model.WitnessService/BatchRecognize", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *witnessServiceClient) GetIndex(ctx context.Context, in *IndexRequest, opts ...grpc.CallOption) (*IndexResponse, error) {
	out := new(IndexResponse)
	err := grpc.Invoke(ctx, "/dg.model.WitnessService/GetIndex", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *witnessServiceClient) GetIndexTxt(ctx context.Context, in *IndexTxtRequest, opts ...grpc.CallOption) (*IndexTxtResponse, error) {
	out := new(IndexTxtResponse)
	err := grpc.Invoke(ctx, "/dg.model.WitnessService/GetIndexTxt", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for WitnessService service

type WitnessServiceServer interface {
	Recognize(context.Context, *WitnessRequest) (*WitnessResponse, error)
	BatchRecognize(context.Context, *WitnessBatchRequest) (*WitnessBatchResponse, error)
	GetIndex(context.Context, *IndexRequest) (*IndexResponse, error)
	GetIndexTxt(context.Context, *IndexTxtRequest) (*IndexTxtResponse, error)
}

func RegisterWitnessServiceServer(s *grpc.Server, srv WitnessServiceServer) {
	s.RegisterService(&_WitnessService_serviceDesc, srv)
}

func _WitnessService_Recognize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WitnessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WitnessServiceServer).Recognize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dg.model.WitnessService/Recognize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WitnessServiceServer).Recognize(ctx, req.(*WitnessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WitnessService_BatchRecognize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WitnessBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WitnessServiceServer).BatchRecognize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dg.model.WitnessService/BatchRecognize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WitnessServiceServer).BatchRecognize(ctx, req.(*WitnessBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WitnessService_GetIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WitnessServiceServer).GetIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dg.model.WitnessService/GetIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WitnessServiceServer).GetIndex(ctx, req.(*IndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WitnessService_GetIndexTxt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IndexTxtRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WitnessServiceServer).GetIndexTxt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dg.model.WitnessService/GetIndexTxt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WitnessServiceServer).GetIndexTxt(ctx, req.(*IndexTxtRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _WitnessService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dg.model.WitnessService",
	HandlerType: (*WitnessServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Recognize",
			Handler:    _WitnessService_Recognize_Handler,
		},
		{
			MethodName: "BatchRecognize",
			Handler:    _WitnessService_BatchRecognize_Handler,
		},
		{
			MethodName: "GetIndex",
			Handler:    _WitnessService_GetIndex_Handler,
		},
		{
			MethodName: "GetIndexTxt",
			Handler:    _WitnessService_GetIndexTxt_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("witness.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1278 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xac, 0x57, 0xdb, 0x72, 0x1a, 0x47,
	0x13, 0x36, 0xa7, 0x05, 0x7a, 0x01, 0xe1, 0xb1, 0x8e, 0x94, 0x7e, 0xfd, 0xaa, 0x8d, 0x2f, 0x5c,
	0x3e, 0xe0, 0x18, 0x57, 0x25, 0xb6, 0xab, 0x92, 0x14, 0x08, 0x64, 0x93, 0x08, 0x49, 0x19, 0xd6,
	0xb1, 0x75, 0xa5, 0x5a, 0xb1, 0x23, 0xb4, 0x11, 0xbb, 0x4b, 0x76, 0x07, 0x49, 0xe4, 0x22, 0x95,
	0x1b, 0x57, 0xde, 0x21, 0x0f, 0x91, 0x17, 0xc9, 0x1b, 0x24, 0xef, 0x90, 0x67, 0xc8, 0xcc, 0xec,
	0xec, 0x01, 0x84, 0xa2, 0x54, 0xc5, 0x37, 0x62, 0xbb, 0xfb, 0x9b, 0xee, 0x9e, 0x9e, 0xaf, 0x7b,
	0x46, 0x50, 0xbe, 0xb4, 0xa8, 0x43, 0x7c, 0xbf, 0x3e, 0xf6, 0x5c, 0xea, 0xa2, 0x82, 0x39, 0xac,
	0xdb, 0xae, 0x49, 0x46, 0xb5, 0xd2, 0xc0, 0xb5, 0x6d, 0xd7, 0x09, 0xf4, 0xb5, 0xbb, 0x23, 0x77,
	0x60, 0x8c, 0x92, 0x2a, 0xad, 0x09, 0xa5, 0xae, 0x63, 0x92, 0x2b, 0x4c, 0x7e, 0x98, 0x10, 0x9f,
	0xa2, 0x67, 0x50, 0x14, 0xb2, 0x3e, 0x1d, 0x93, 0xf5, 0xd4, 0x76, 0xea, 0x41, 0xa5, 0x71, 0xaf,
	0x1e, 0xba, 0xab, 0x47, 0x26, 0x5c, 0xb4, 0xc2, 0x4f, 0xad, 0x0d, 0x4b, 0x81, 0xfe, 0x8a, 0xfe,
	0x07, 0x2f, 0x8f, 0xa1, 0x1a, 0x7b, 0xf1, 0xc7, 0xae, 0xe3, 0x13, 0xb4, 0x0e, 0xf9, 0x1d, 0xd7,
	0xa1, 0xe4, 0x8a, 0x0a, 0x27, 0x45, 0x9c, 0x1f, 0x04, 0xa2, 0x76, 0x0e, 0xea, 0x8e, 0xd8, 0x86,
	0x58, 0x83, 0x3e, 0x85, 0x5c, 0x97, 0x12, 0xdb, 0x67, 0xb0, 0xcc, 0x03, 0xb5, 0x51, 0x8b, 0x63,
	0x25, 0x50, 0x75, 0x0e, 0xc1, 0x39, 0x8b, 0x03, 0x6b, 0x0f, 0x21, 0xcb, 0x45, 0x54, 0x81, 0x74,
	0xd7, 0x14, 0xde, 0x73, 0x38, 0x6d, 0x99, 0x08, 0x41, 0x76, 0xdf, 0xb0, 0xc9, 0x7a, 0x5a, 0xc4,
	0xcb, 0x3a, 0xec, 0x5b, 0xfb, 0x35, 0x0d, 0xd0, 0xf2, 0x0c, 0xc7, 0x0c, 0x82, 0x3d, 0x9d, 0x0d,
	0xb6, 0x11, 0x07, 0x8b, 0x41, 0x33, 0xb1, 0xfe, 0x48, 0xc9, 0x60, 0xdb, 0xa0, 0xf6, 0x0c, 0xcb,
	0x09, 0x60, 0xa6, 0x88, 0x91, 0xc3, 0xaa, 0x1d, 0xab, 0xd0, 0x16, 0x40, 0x7f, 0x72, 0x12, 0x02,
	0x32, 0x02, 0x00, 0x7e, 0xa4, 0xe1, 0x1e, 0x8e, 0x88, 0xe1, 0xf5, 0x78, 0x38, 0x06, 0xc8, 0x06,
	0x1e, 0xa6, 0xb1, 0x0a, 0xdd, 0x87, 0x72, 0x14, 0x43, 0xec, 0x24, 0x27, 0x76, 0x52, 0xb6, 0x93,
	0x4a, 0xa4, 0x41, 0x29, 0x8c, 0x23, 0x40, 0x8a, 0x00, 0x95, 0xfc, 0x84, 0x8e, 0x7b, 0x8a, 0x62,
	0x09, 0x50, 0x3e, 0xf0, 0x34, 0x4d, 0x2a, 0xb5, 0x5f, 0x52, 0x50, 0x96, 0x0c, 0x92, 0xa7, 0xf6,
	0x84, 0xd5, 0x87, 0x2b, 0x44, 0x55, 0xd5, 0xc6, 0xca, 0xc2, 0xc3, 0x78, 0x73, 0x87, 0x55, 0x47,
	0x94, 0xf3, 0xb3, 0x64, 0x71, 0x45, 0x4d, 0xd4, 0xc6, 0xf2, 0xa2, 0x9a, 0xb2, 0x25, 0x70, 0x12,
	0x49, 0xad, 0x25, 0x28, 0x0b, 0x07, 0xc7, 0x82, 0x13, 0x0e, 0xd5, 0xa6, 0x50, 0x79, 0x17, 0xb4,
	0x41, 0x48, 0xc3, 0x97, 0xb3, 0xfc, 0x51, 0x1b, 0xff, 0x8f, 0xfd, 0xce, 0x42, 0x25, 0x2c, 0x22,
	0x18, 0x7a, 0xcc, 0x36, 0x61, 0x1b, 0x43, 0x22, 0x13, 0x5a, 0xbd, 0xb6, 0x50, 0x58, 0xd9, 0x1e,
	0xf8, 0x8f, 0xf6, 0x73, 0x0a, 0xee, 0x49, 0x7d, 0xcb, 0xa0, 0x83, 0xb3, 0x8f, 0x90, 0x40, 0x1d,
	0x14, 0x11, 0xc2, 0x67, 0x19, 0x64, 0xfe, 0x21, 0x03, 0x45, 0x64, 0xe0, 0x6b, 0x3f, 0xc1, 0x52,
	0xe4, 0x51, 0x1e, 0xc4, 0xab, 0xf9, 0xe8, 0xdb, 0x0b, 0xa2, 0x07, 0xd8, 0x6b, 0xe1, 0x9f, 0x82,
	0xc2, 0x6c, 0x93, 0x11, 0x95, 0x05, 0x58, 0x5b, 0xb4, 0x94, 0x99, 0xb1, 0xe2, 0x89, 0x5f, 0xed,
	0x43, 0x0a, 0x96, 0x67, 0x4b, 0xf0, 0x11, 0xb2, 0x78, 0x06, 0xf9, 0x20, 0x4c, 0x58, 0x85, 0x1b,
	0xd3, 0xc8, 0x07, 0x69, 0xf8, 0xda, 0xf7, 0x80, 0x22, 0xcb, 0xc8, 0xa0, 0xd6, 0x05, 0xc1, 0x07,
	0x5d, 0xde, 0xd6, 0x87, 0xae, 0xff, 0x5e, 0x36, 0x7a, 0x76, 0xcc, 0xbe, 0xa5, 0xee, 0x48, 0xb6,
	0x21, 0xd7, 0x1d, 0xa1, 0x65, 0xc8, 0xbd, 0xb3, 0x4c, 0x7a, 0x26, 0x5b, 0x2f, 0x77, 0xc9, 0x05,
	0xb4, 0x0a, 0xca, 0x1b, 0x62, 0x0d, 0xcf, 0xa8, 0x6c, 0x38, 0xe5, 0x4c, 0x48, 0xda, 0x29, 0x54,
	0x65, 0xac, 0x9e, 0xe1, 0x0d, 0x2d, 0x47, 0x46, 0xda, 0x23, 0xa7, 0x34, 0x8c, 0x34, 0x62, 0xdf,
	0xa8, 0x0a, 0x19, 0xdd, 0x1d, 0xcb, 0x40, 0x19, 0xea, 0x8e, 0x79, 0x1c, 0x2c, 0x1c, 0xca, 0x38,
	0x1e, 0x17, 0x78, 0x9c, 0x96, 0x4b, 0xa9, 0x6b, 0x87, 0x71, 0x4e, 0x84, 0xa4, 0x7d, 0xc8, 0xc0,
	0xca, 0x42, 0xba, 0xa0, 0x4d, 0x28, 0xf6, 0x99, 0xd6, 0x62, 0x5d, 0x65, 0xca, 0x19, 0x59, 0xf4,
	0x43, 0x05, 0xaa, 0x41, 0xe1, 0xad, 0x4f, 0xbc, 0xc4, 0x40, 0x2b, 0x4c, 0xa4, 0xcc, 0x33, 0xd0,
	0xdd, 0x73, 0xe2, 0x88, 0x0c, 0x8a, 0x38, 0x47, 0xb9, 0xc0, 0x0e, 0xab, 0xb8, 0x3b, 0x71, 0x06,
	0x94, 0xad, 0xf7, 0x59, 0x12, 0x19, 0x36, 0xb8, 0x37, 0xe3, 0x92, 0x63, 0x32, 0x70, 0x87, 0x8e,
	0xf5, 0x23, 0x89, 0x30, 0xb8, 0x78, 0x1a, 0x7e, 0xa2, 0x47, 0x90, 0x15, 0xf3, 0x3e, 0x27, 0xe6,
	0xfd, 0xda, 0x82, 0x65, 0x62, 0xe6, 0x67, 0x29, 0xfb, 0x8b, 0x9e, 0x43, 0xa1, 0x4f, 0x5d, 0x4f,
	0x10, 0x5c, 0x99, 0x3f, 0x5a, 0x69, 0x61, 0x9b, 0x3c, 0xb5, 0x86, 0xb8, 0xe0, 0x4b, 0x20, 0xda,
	0x01, 0xe5, 0xd0, 0xf0, 0x0c, 0x36, 0x7a, 0xf3, 0x62, 0xc9, 0xa3, 0x5b, 0xba, 0xa9, 0x1e, 0xa0,
	0x3b, 0x0e, 0xf5, 0xa6, 0x58, 0x19, 0x0b, 0xa1, 0xf6, 0x12, 0xd4, 0x84, 0x9a, 0x9f, 0xcd, 0x39,
	0x99, 0xca, 0xda, 0xf1, 0x4f, 0x5e, 0x99, 0x0b, 0x63, 0x34, 0x09, 0x4b, 0x16, 0x08, 0xaf, 0xd2,
	0x2f, 0x52, 0xda, 0x5f, 0x29, 0x28, 0x25, 0x9b, 0x0f, 0x7d, 0x02, 0xd9, 0xb6, 0x41, 0x0d, 0x49,
	0xec, 0xa5, 0xc4, 0x15, 0x27, 0x7a, 0x33, 0x6b, 0x32, 0x23, 0xfa, 0x2a, 0xea, 0xcc, 0x1e, 0xa1,
	0x86, 0xc0, 0xa7, 0xe7, 0x27, 0x63, 0xdf, 0x1b, 0x70, 0x23, 0xc7, 0xe3, 0xa5, 0xcb, 0x59, 0x34,
	0xfa, 0x12, 0xd4, 0x88, 0xcb, 0xae, 0xc5, 0x0e, 0x8c, 0xef, 0x7d, 0x73, 0xc1, 0xde, 0x23, 0xbe,
	0x63, 0xd5, 0x8b, 0x17, 0xa0, 0x17, 0x50, 0x94, 0xfc, 0x64, 0xab, 0xb3, 0xf3, 0x37, 0xe4, 0x3c,
	0x83, 0x71, 0xd1, 0x0e, 0xc1, 0xda, 0x9f, 0x69, 0x58, 0x5d, 0xdc, 0xa3, 0xb7, 0x30, 0x8f, 0x31,
	0xb9, 0x4f, 0x0d, 0x3a, 0xf1, 0x65, 0x11, 0x15, 0x5f, 0x48, 0xfc, 0x46, 0xef, 0x31, 0x10, 0x1f,
	0xac, 0x01, 0xef, 0xf2, 0x76, 0x20, 0xb2, 0x81, 0x5b, 0x94, 0x87, 0xa7, 0xfb, 0x82, 0xfe, 0x6a,
	0xa3, 0x12, 0x27, 0xa9, 0x5b, 0x36, 0x7b, 0x2d, 0x78, 0x21, 0x80, 0x4d, 0x47, 0x08, 0x13, 0x62,
	0xf0, 0xdc, 0x42, 0x38, 0x78, 0x11, 0x02, 0xbd, 0x86, 0x7c, 0x9b, 0x9c, 0x4c, 0x86, 0x7a, 0xc8,
	0xb6, 0x27, 0xb7, 0x0d, 0xa1, 0xba, 0xc4, 0x07, 0xe4, 0xc9, 0x9b, 0x81, 0x54, 0xfb, 0x1a, 0x4a,
	0x49, 0xc3, 0x02, 0xfa, 0xdc, 0x4f, 0xd2, 0xe7, 0x7a, 0x56, 0xb3, 0x74, 0x2a, 0xcf, 0x4c, 0x31,
	0x7e, 0xbd, 0x77, 0x1d, 0x87, 0x78, 0xb2, 0x76, 0x81, 0x57, 0xd5, 0x8a, 0x55, 0xfc, 0xe2, 0x16,
	0x88, 0xb0, 0x8a, 0x41, 0x79, 0x4b, 0x56, 0x42, 0x17, 0xdf, 0x5d, 0x99, 0x7f, 0x71, 0x77, 0xb1,
	0xb7, 0x53, 0xe1, 0x3b, 0x72, 0x66, 0x0d, 0x46, 0xc4, 0x97, 0xe4, 0x58, 0x9e, 0x69, 0x5d, 0x69,
	0xc4, 0x85, 0x0b, 0x89, 0x42, 0x9f, 0x03, 0x1c, 0x12, 0x93, 0x1d, 0x84, 0x67, 0x19, 0x0e, 0x2b,
	0xfe, 0x5c, 0xf7, 0xb2, 0x35, 0xb1, 0x19, 0xc3, 0x38, 0xfa, 0x7e, 0xf8, 0x7b, 0x2a, 0xf1, 0x2e,
	0x44, 0x77, 0xd9, 0xc3, 0x61, 0xbf, 0xdd, 0x79, 0x7f, 0xdc, 0xee, 0xec, 0x36, 0xdf, 0xee, 0xe9,
	0xd5, 0x3b, 0xe8, 0x1e, 0x7b, 0x4a, 0x0a, 0xd5, 0x4e, 0x13, 0x1f, 0xb7, 0x70, 0x73, 0xbf, 0x5d,
	0x4d, 0xb1, 0x89, 0x5a, 0x89, 0x95, 0xfa, 0xd1, 0x61, 0xa7, 0x9a, 0x9e, 0x05, 0xee, 0x1c, 0xec,
	0x1d, 0xe0, 0x6a, 0x86, 0x35, 0x6e, 0x35, 0x56, 0xf6, 0x9a, 0xf8, 0x9b, 0x0e, 0xae, 0x66, 0x19,
	0xe5, 0x96, 0x63, 0xed, 0xe1, 0x5e, 0x53, 0xef, 0x04, 0x4e, 0x72, 0x68, 0x03, 0x56, 0xe6, 0x2d,
	0x81, 0x2b, 0x85, 0x95, 0x79, 0x2b, 0x61, 0xea, 0xb4, 0x3b, 0x7d, 0x1d, 0x77, 0x9b, 0xfb, 0xc7,
	0x4d, 0x5d, 0x97, 0x39, 0xe4, 0x1b, 0xbf, 0xa5, 0xa3, 0x07, 0x47, 0x9f, 0x78, 0x17, 0xd6, 0x80,
	0xa0, 0x16, 0x27, 0xb1, 0x1c, 0x76, 0x68, 0xfd, 0xa6, 0xe9, 0x54, 0xdb, 0xb8, 0x91, 0x7c, 0xda,
	0x1d, 0xf4, 0x2d, 0x54, 0xe4, 0x05, 0x1a, 0x3a, 0xfa, 0xdf, 0x35, 0x78, 0xf2, 0x91, 0x51, 0xdb,
	0xba, 0xc9, 0x1c, 0xb9, 0xfc, 0x02, 0x0a, 0xaf, 0x09, 0x0d, 0x5e, 0xaf, 0xab, 0x73, 0xef, 0xf0,
	0xd0, 0xcb, 0xda, 0x35, 0x7d, 0xb4, 0x7c, 0x17, 0xd4, 0x70, 0x39, 0x7b, 0x9d, 0xa3, 0x8d, 0xf9,
	0x97, 0x7c, 0xf4, 0xee, 0xaf, 0xd5, 0x16, 0x99, 0x42, 0x3f, 0x27, 0x8a, 0xf8, 0x97, 0xe3, 0xf9,
	0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x4d, 0x82, 0x25, 0x61, 0xae, 0x0c, 0x00, 0x00,
}
