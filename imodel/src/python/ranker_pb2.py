# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: ranker.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


import common_pb2 as common__pb2
import localcommon_pb2 as localcommon__pb2


DESCRIPTOR = _descriptor.FileDescriptor(
  name='ranker.proto',
  package='dg.model',
  syntax='proto3',
  serialized_pb=_b('\n\x0cranker.proto\x12\x08\x64g.model\x1a\x0c\x63ommon.proto\x1a\x11localcommon.proto\"\x81\x02\n\x15\x46\x65\x61tureRankingRequest\x12\r\n\x05ReqId\x18\x01 \x01(\x03\x12%\n\x04Type\x18\x02 \x01(\x0e\x32\x17.dg.model.RecognizeType\x12\x1e\n\x05Image\x18\x03 \x01(\x0b\x32\x0f.dg.model.Image\x12+\n\x0fInterestedAreas\x18\x04 \x03(\x0b\x32\x12.dg.model.Cutboard\x12)\n\rDisabledAreas\x18\x05 \x03(\x0b\x32\x12.dg.model.Cutboard\x12+\n\nCandidates\x18\x06 \x03(\x0b\x32\x17.dg.model.FeatureVector\x12\r\n\x05Limit\x18\x07 \x01(\x05\"D\n\x16\x46\x65\x61tureRankingResponse\x12\r\n\x05ReqId\x18\x01 \x01(\x03\x12\x0b\n\x03Ids\x18\x02 \x03(\x03\x12\x0e\n\x06Scores\x18\x03 \x03(\x02\x32k\n\x11SimilarityService\x12V\n\x0fGetRankedVector\x12\x1f.dg.model.FeatureRankingRequest\x1a .dg.model.FeatureRankingResponse\"\x00\x62\x06proto3')
  ,
  dependencies=[common__pb2.DESCRIPTOR,localcommon__pb2.DESCRIPTOR,])
_sym_db.RegisterFileDescriptor(DESCRIPTOR)




_FEATURERANKINGREQUEST = _descriptor.Descriptor(
  name='FeatureRankingRequest',
  full_name='dg.model.FeatureRankingRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='ReqId', full_name='dg.model.FeatureRankingRequest.ReqId', index=0,
      number=1, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='Type', full_name='dg.model.FeatureRankingRequest.Type', index=1,
      number=2, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='Image', full_name='dg.model.FeatureRankingRequest.Image', index=2,
      number=3, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='InterestedAreas', full_name='dg.model.FeatureRankingRequest.InterestedAreas', index=3,
      number=4, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='DisabledAreas', full_name='dg.model.FeatureRankingRequest.DisabledAreas', index=4,
      number=5, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='Candidates', full_name='dg.model.FeatureRankingRequest.Candidates', index=5,
      number=6, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='Limit', full_name='dg.model.FeatureRankingRequest.Limit', index=6,
      number=7, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=60,
  serialized_end=317,
)


_FEATURERANKINGRESPONSE = _descriptor.Descriptor(
  name='FeatureRankingResponse',
  full_name='dg.model.FeatureRankingResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='ReqId', full_name='dg.model.FeatureRankingResponse.ReqId', index=0,
      number=1, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='Ids', full_name='dg.model.FeatureRankingResponse.Ids', index=1,
      number=2, type=3, cpp_type=2, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='Scores', full_name='dg.model.FeatureRankingResponse.Scores', index=2,
      number=3, type=2, cpp_type=6, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=319,
  serialized_end=387,
)

_FEATURERANKINGREQUEST.fields_by_name['Type'].enum_type = localcommon__pb2._RECOGNIZETYPE
_FEATURERANKINGREQUEST.fields_by_name['Image'].message_type = common__pb2._IMAGE
_FEATURERANKINGREQUEST.fields_by_name['InterestedAreas'].message_type = common__pb2._CUTBOARD
_FEATURERANKINGREQUEST.fields_by_name['DisabledAreas'].message_type = common__pb2._CUTBOARD
_FEATURERANKINGREQUEST.fields_by_name['Candidates'].message_type = common__pb2._FEATUREVECTOR
DESCRIPTOR.message_types_by_name['FeatureRankingRequest'] = _FEATURERANKINGREQUEST
DESCRIPTOR.message_types_by_name['FeatureRankingResponse'] = _FEATURERANKINGRESPONSE

FeatureRankingRequest = _reflection.GeneratedProtocolMessageType('FeatureRankingRequest', (_message.Message,), dict(
  DESCRIPTOR = _FEATURERANKINGREQUEST,
  __module__ = 'ranker_pb2'
  # @@protoc_insertion_point(class_scope:dg.model.FeatureRankingRequest)
  ))
_sym_db.RegisterMessage(FeatureRankingRequest)

FeatureRankingResponse = _reflection.GeneratedProtocolMessageType('FeatureRankingResponse', (_message.Message,), dict(
  DESCRIPTOR = _FEATURERANKINGRESPONSE,
  __module__ = 'ranker_pb2'
  # @@protoc_insertion_point(class_scope:dg.model.FeatureRankingResponse)
  ))
_sym_db.RegisterMessage(FeatureRankingResponse)


import grpc
from grpc.beta import implementations as beta_implementations
from grpc.beta import interfaces as beta_interfaces
from grpc.framework.common import cardinality
from grpc.framework.interfaces.face import utilities as face_utilities


class SimilarityServiceStub(object):

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.GetRankedVector = channel.unary_unary(
        '/dg.model.SimilarityService/GetRankedVector',
        request_serializer=FeatureRankingRequest.SerializeToString,
        response_deserializer=FeatureRankingResponse.FromString,
        )


class SimilarityServiceServicer(object):

  def GetRankedVector(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_SimilarityServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'GetRankedVector': grpc.unary_unary_rpc_method_handler(
          servicer.GetRankedVector,
          request_deserializer=FeatureRankingRequest.FromString,
          response_serializer=FeatureRankingResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'dg.model.SimilarityService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class BetaSimilarityServiceServicer(object):
  def GetRankedVector(self, request, context):
    context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


class BetaSimilarityServiceStub(object):
  def GetRankedVector(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
    raise NotImplementedError()
  GetRankedVector.future = None


def beta_create_SimilarityService_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
  request_deserializers = {
    ('dg.model.SimilarityService', 'GetRankedVector'): FeatureRankingRequest.FromString,
  }
  response_serializers = {
    ('dg.model.SimilarityService', 'GetRankedVector'): FeatureRankingResponse.SerializeToString,
  }
  method_implementations = {
    ('dg.model.SimilarityService', 'GetRankedVector'): face_utilities.unary_unary_inline(servicer.GetRankedVector),
  }
  server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
  return beta_implementations.server(method_implementations, options=server_options)


def beta_create_SimilarityService_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
  request_serializers = {
    ('dg.model.SimilarityService', 'GetRankedVector'): FeatureRankingRequest.SerializeToString,
  }
  response_deserializers = {
    ('dg.model.SimilarityService', 'GetRankedVector'): FeatureRankingResponse.FromString,
  }
  cardinalities = {
    'GetRankedVector': cardinality.Cardinality.UNARY_UNARY,
  }
  stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
  return beta_implementations.dynamic_stub(channel, 'dg.model.SimilarityService', cardinalities, options=stub_options)
# @@protoc_insertion_point(module_scope)
