// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: simservice.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "simservice.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace model {

namespace {

const ::google::protobuf::Descriptor* FeatureRankingRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FeatureRankingRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* FeatureRankingResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FeatureRankingResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_simservice_2eproto() {
  protobuf_AddDesc_simservice_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "simservice.proto");
  GOOGLE_CHECK(file != NULL);
  FeatureRankingRequest_descriptor_ = file->message_type(0);
  static const int FeatureRankingRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureRankingRequest, reqid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureRankingRequest, image_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureRankingRequest, interestedareas_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureRankingRequest, candidates_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureRankingRequest, limit_),
  };
  FeatureRankingRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FeatureRankingRequest_descriptor_,
      FeatureRankingRequest::default_instance_,
      FeatureRankingRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(FeatureRankingRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureRankingRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureRankingRequest, _is_default_instance_));
  FeatureRankingResponse_descriptor_ = file->message_type(1);
  static const int FeatureRankingResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureRankingResponse, reqid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureRankingResponse, ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureRankingResponse, scores_),
  };
  FeatureRankingResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FeatureRankingResponse_descriptor_,
      FeatureRankingResponse::default_instance_,
      FeatureRankingResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(FeatureRankingResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureRankingResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureRankingResponse, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_simservice_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FeatureRankingRequest_descriptor_, &FeatureRankingRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FeatureRankingResponse_descriptor_, &FeatureRankingResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_simservice_2eproto() {
  delete FeatureRankingRequest::default_instance_;
  delete FeatureRankingRequest_reflection_;
  delete FeatureRankingResponse::default_instance_;
  delete FeatureRankingResponse_reflection_;
}

void protobuf_AddDesc_simservice_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::model::protobuf_AddDesc_common_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020simservice.proto\022\005model\032\014common.proto\""
    "\246\001\n\025FeatureRankingRequest\022\r\n\005ReqId\030\001 \001(\003"
    "\022\033\n\005Image\030\002 \001(\0132\014.model.Image\022(\n\017Interes"
    "tedAreas\030\003 \003(\0132\017.model.Cutboard\022(\n\nCandi"
    "dates\030\004 \003(\0132\024.model.FeatureVector\022\r\n\005Lim"
    "it\030\005 \001(\005\"D\n\026FeatureRankingResponse\022\r\n\005Re"
    "qId\030\001 \001(\003\022\013\n\003Ids\030\002 \003(\003\022\016\n\006Scores\030\003 \003(\0022\276"
    "\001\n\021SimilarityService\022T\n\023GetRankedFaceVec"
    "tor\022\034.model.FeatureRankingRequest\032\035.mode"
    "l.FeatureRankingResponse\"\000\022S\n\022GetRankedC"
    "arVector\022\034.model.FeatureRankingRequest\032\035"
    ".model.FeatureRankingResponse\"\000b\006proto3", 479);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "simservice.proto", &protobuf_RegisterTypes);
  FeatureRankingRequest::default_instance_ = new FeatureRankingRequest();
  FeatureRankingResponse::default_instance_ = new FeatureRankingResponse();
  FeatureRankingRequest::default_instance_->InitAsDefaultInstance();
  FeatureRankingResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_simservice_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_simservice_2eproto {
  StaticDescriptorInitializer_simservice_2eproto() {
    protobuf_AddDesc_simservice_2eproto();
  }
} static_descriptor_initializer_simservice_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FeatureRankingRequest::kReqIdFieldNumber;
const int FeatureRankingRequest::kImageFieldNumber;
const int FeatureRankingRequest::kInterestedAreasFieldNumber;
const int FeatureRankingRequest::kCandidatesFieldNumber;
const int FeatureRankingRequest::kLimitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FeatureRankingRequest::FeatureRankingRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:model.FeatureRankingRequest)
}

void FeatureRankingRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  image_ = const_cast< ::model::Image*>(&::model::Image::default_instance());
}

FeatureRankingRequest::FeatureRankingRequest(const FeatureRankingRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:model.FeatureRankingRequest)
}

void FeatureRankingRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  reqid_ = GOOGLE_LONGLONG(0);
  image_ = NULL;
  limit_ = 0;
}

FeatureRankingRequest::~FeatureRankingRequest() {
  // @@protoc_insertion_point(destructor:model.FeatureRankingRequest)
  SharedDtor();
}

void FeatureRankingRequest::SharedDtor() {
  if (this != default_instance_) {
    delete image_;
  }
}

void FeatureRankingRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FeatureRankingRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FeatureRankingRequest_descriptor_;
}

const FeatureRankingRequest& FeatureRankingRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_simservice_2eproto();
  return *default_instance_;
}

FeatureRankingRequest* FeatureRankingRequest::default_instance_ = NULL;

FeatureRankingRequest* FeatureRankingRequest::New(::google::protobuf::Arena* arena) const {
  FeatureRankingRequest* n = new FeatureRankingRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FeatureRankingRequest::Clear() {
  reqid_ = GOOGLE_LONGLONG(0);
  if (GetArenaNoVirtual() == NULL && image_ != NULL) delete image_;
  image_ = NULL;
  limit_ = 0;
  interestedareas_.Clear();
  candidates_.Clear();
}

bool FeatureRankingRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:model.FeatureRankingRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 ReqId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &reqid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Image;
        break;
      }

      // optional .model.Image Image = 2;
      case 2: {
        if (tag == 18) {
         parse_Image:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_image()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_InterestedAreas;
        break;
      }

      // repeated .model.Cutboard InterestedAreas = 3;
      case 3: {
        if (tag == 26) {
         parse_InterestedAreas:
          DO_(input->IncrementRecursionDepth());
         parse_loop_InterestedAreas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_interestedareas()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_InterestedAreas;
        if (input->ExpectTag(34)) goto parse_loop_Candidates;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .model.FeatureVector Candidates = 4;
      case 4: {
        if (tag == 34) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_Candidates:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_candidates()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_Candidates;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(40)) goto parse_Limit;
        break;
      }

      // optional int32 Limit = 5;
      case 5: {
        if (tag == 40) {
         parse_Limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &limit_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:model.FeatureRankingRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:model.FeatureRankingRequest)
  return false;
#undef DO_
}

void FeatureRankingRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:model.FeatureRankingRequest)
  // optional int64 ReqId = 1;
  if (this->reqid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->reqid(), output);
  }

  // optional .model.Image Image = 2;
  if (this->has_image()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->image_, output);
  }

  // repeated .model.Cutboard InterestedAreas = 3;
  for (unsigned int i = 0, n = this->interestedareas_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->interestedareas(i), output);
  }

  // repeated .model.FeatureVector Candidates = 4;
  for (unsigned int i = 0, n = this->candidates_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->candidates(i), output);
  }

  // optional int32 Limit = 5;
  if (this->limit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->limit(), output);
  }

  // @@protoc_insertion_point(serialize_end:model.FeatureRankingRequest)
}

::google::protobuf::uint8* FeatureRankingRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:model.FeatureRankingRequest)
  // optional int64 ReqId = 1;
  if (this->reqid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->reqid(), target);
  }

  // optional .model.Image Image = 2;
  if (this->has_image()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->image_, target);
  }

  // repeated .model.Cutboard InterestedAreas = 3;
  for (unsigned int i = 0, n = this->interestedareas_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->interestedareas(i), target);
  }

  // repeated .model.FeatureVector Candidates = 4;
  for (unsigned int i = 0, n = this->candidates_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->candidates(i), target);
  }

  // optional int32 Limit = 5;
  if (this->limit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->limit(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:model.FeatureRankingRequest)
  return target;
}

int FeatureRankingRequest::ByteSize() const {
  int total_size = 0;

  // optional int64 ReqId = 1;
  if (this->reqid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->reqid());
  }

  // optional .model.Image Image = 2;
  if (this->has_image()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->image_);
  }

  // optional int32 Limit = 5;
  if (this->limit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->limit());
  }

  // repeated .model.Cutboard InterestedAreas = 3;
  total_size += 1 * this->interestedareas_size();
  for (int i = 0; i < this->interestedareas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->interestedareas(i));
  }

  // repeated .model.FeatureVector Candidates = 4;
  total_size += 1 * this->candidates_size();
  for (int i = 0; i < this->candidates_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->candidates(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FeatureRankingRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const FeatureRankingRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const FeatureRankingRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FeatureRankingRequest::MergeFrom(const FeatureRankingRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  interestedareas_.MergeFrom(from.interestedareas_);
  candidates_.MergeFrom(from.candidates_);
  if (from.reqid() != 0) {
    set_reqid(from.reqid());
  }
  if (from.has_image()) {
    mutable_image()->::model::Image::MergeFrom(from.image());
  }
  if (from.limit() != 0) {
    set_limit(from.limit());
  }
}

void FeatureRankingRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FeatureRankingRequest::CopyFrom(const FeatureRankingRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeatureRankingRequest::IsInitialized() const {

  return true;
}

void FeatureRankingRequest::Swap(FeatureRankingRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FeatureRankingRequest::InternalSwap(FeatureRankingRequest* other) {
  std::swap(reqid_, other->reqid_);
  std::swap(image_, other->image_);
  interestedareas_.UnsafeArenaSwap(&other->interestedareas_);
  candidates_.UnsafeArenaSwap(&other->candidates_);
  std::swap(limit_, other->limit_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FeatureRankingRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FeatureRankingRequest_descriptor_;
  metadata.reflection = FeatureRankingRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FeatureRankingRequest

// optional int64 ReqId = 1;
void FeatureRankingRequest::clear_reqid() {
  reqid_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 FeatureRankingRequest::reqid() const {
  // @@protoc_insertion_point(field_get:model.FeatureRankingRequest.ReqId)
  return reqid_;
}
 void FeatureRankingRequest::set_reqid(::google::protobuf::int64 value) {
  
  reqid_ = value;
  // @@protoc_insertion_point(field_set:model.FeatureRankingRequest.ReqId)
}

// optional .model.Image Image = 2;
bool FeatureRankingRequest::has_image() const {
  return !_is_default_instance_ && image_ != NULL;
}
void FeatureRankingRequest::clear_image() {
  if (GetArenaNoVirtual() == NULL && image_ != NULL) delete image_;
  image_ = NULL;
}
const ::model::Image& FeatureRankingRequest::image() const {
  // @@protoc_insertion_point(field_get:model.FeatureRankingRequest.Image)
  return image_ != NULL ? *image_ : *default_instance_->image_;
}
::model::Image* FeatureRankingRequest::mutable_image() {
  
  if (image_ == NULL) {
    image_ = new ::model::Image;
  }
  // @@protoc_insertion_point(field_mutable:model.FeatureRankingRequest.Image)
  return image_;
}
::model::Image* FeatureRankingRequest::release_image() {
  
  ::model::Image* temp = image_;
  image_ = NULL;
  return temp;
}
void FeatureRankingRequest::set_allocated_image(::model::Image* image) {
  delete image_;
  image_ = image;
  if (image) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:model.FeatureRankingRequest.Image)
}

// repeated .model.Cutboard InterestedAreas = 3;
int FeatureRankingRequest::interestedareas_size() const {
  return interestedareas_.size();
}
void FeatureRankingRequest::clear_interestedareas() {
  interestedareas_.Clear();
}
const ::model::Cutboard& FeatureRankingRequest::interestedareas(int index) const {
  // @@protoc_insertion_point(field_get:model.FeatureRankingRequest.InterestedAreas)
  return interestedareas_.Get(index);
}
::model::Cutboard* FeatureRankingRequest::mutable_interestedareas(int index) {
  // @@protoc_insertion_point(field_mutable:model.FeatureRankingRequest.InterestedAreas)
  return interestedareas_.Mutable(index);
}
::model::Cutboard* FeatureRankingRequest::add_interestedareas() {
  // @@protoc_insertion_point(field_add:model.FeatureRankingRequest.InterestedAreas)
  return interestedareas_.Add();
}
::google::protobuf::RepeatedPtrField< ::model::Cutboard >*
FeatureRankingRequest::mutable_interestedareas() {
  // @@protoc_insertion_point(field_mutable_list:model.FeatureRankingRequest.InterestedAreas)
  return &interestedareas_;
}
const ::google::protobuf::RepeatedPtrField< ::model::Cutboard >&
FeatureRankingRequest::interestedareas() const {
  // @@protoc_insertion_point(field_list:model.FeatureRankingRequest.InterestedAreas)
  return interestedareas_;
}

// repeated .model.FeatureVector Candidates = 4;
int FeatureRankingRequest::candidates_size() const {
  return candidates_.size();
}
void FeatureRankingRequest::clear_candidates() {
  candidates_.Clear();
}
const ::model::FeatureVector& FeatureRankingRequest::candidates(int index) const {
  // @@protoc_insertion_point(field_get:model.FeatureRankingRequest.Candidates)
  return candidates_.Get(index);
}
::model::FeatureVector* FeatureRankingRequest::mutable_candidates(int index) {
  // @@protoc_insertion_point(field_mutable:model.FeatureRankingRequest.Candidates)
  return candidates_.Mutable(index);
}
::model::FeatureVector* FeatureRankingRequest::add_candidates() {
  // @@protoc_insertion_point(field_add:model.FeatureRankingRequest.Candidates)
  return candidates_.Add();
}
::google::protobuf::RepeatedPtrField< ::model::FeatureVector >*
FeatureRankingRequest::mutable_candidates() {
  // @@protoc_insertion_point(field_mutable_list:model.FeatureRankingRequest.Candidates)
  return &candidates_;
}
const ::google::protobuf::RepeatedPtrField< ::model::FeatureVector >&
FeatureRankingRequest::candidates() const {
  // @@protoc_insertion_point(field_list:model.FeatureRankingRequest.Candidates)
  return candidates_;
}

// optional int32 Limit = 5;
void FeatureRankingRequest::clear_limit() {
  limit_ = 0;
}
 ::google::protobuf::int32 FeatureRankingRequest::limit() const {
  // @@protoc_insertion_point(field_get:model.FeatureRankingRequest.Limit)
  return limit_;
}
 void FeatureRankingRequest::set_limit(::google::protobuf::int32 value) {
  
  limit_ = value;
  // @@protoc_insertion_point(field_set:model.FeatureRankingRequest.Limit)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FeatureRankingResponse::kReqIdFieldNumber;
const int FeatureRankingResponse::kIdsFieldNumber;
const int FeatureRankingResponse::kScoresFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FeatureRankingResponse::FeatureRankingResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:model.FeatureRankingResponse)
}

void FeatureRankingResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

FeatureRankingResponse::FeatureRankingResponse(const FeatureRankingResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:model.FeatureRankingResponse)
}

void FeatureRankingResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  reqid_ = GOOGLE_LONGLONG(0);
}

FeatureRankingResponse::~FeatureRankingResponse() {
  // @@protoc_insertion_point(destructor:model.FeatureRankingResponse)
  SharedDtor();
}

void FeatureRankingResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FeatureRankingResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FeatureRankingResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FeatureRankingResponse_descriptor_;
}

const FeatureRankingResponse& FeatureRankingResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_simservice_2eproto();
  return *default_instance_;
}

FeatureRankingResponse* FeatureRankingResponse::default_instance_ = NULL;

FeatureRankingResponse* FeatureRankingResponse::New(::google::protobuf::Arena* arena) const {
  FeatureRankingResponse* n = new FeatureRankingResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FeatureRankingResponse::Clear() {
  reqid_ = GOOGLE_LONGLONG(0);
  ids_.Clear();
  scores_.Clear();
}

bool FeatureRankingResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:model.FeatureRankingResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 ReqId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &reqid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Ids;
        break;
      }

      // repeated int64 Ids = 2;
      case 2: {
        if (tag == 18) {
         parse_Ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_ids())));
        } else if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 18, input, this->mutable_ids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Scores;
        break;
      }

      // repeated float Scores = 3;
      case 3: {
        if (tag == 26) {
         parse_Scores:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_scores())));
        } else if (tag == 29) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 26, input, this->mutable_scores())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:model.FeatureRankingResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:model.FeatureRankingResponse)
  return false;
#undef DO_
}

void FeatureRankingResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:model.FeatureRankingResponse)
  // optional int64 ReqId = 1;
  if (this->reqid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->reqid(), output);
  }

  // repeated int64 Ids = 2;
  if (this->ids_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_ids_cached_byte_size_);
  }
  for (int i = 0; i < this->ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->ids(i), output);
  }

  // repeated float Scores = 3;
  if (this->scores_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_scores_cached_byte_size_);
  }
  for (int i = 0; i < this->scores_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->scores(i), output);
  }

  // @@protoc_insertion_point(serialize_end:model.FeatureRankingResponse)
}

::google::protobuf::uint8* FeatureRankingResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:model.FeatureRankingResponse)
  // optional int64 ReqId = 1;
  if (this->reqid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->reqid(), target);
  }

  // repeated int64 Ids = 2;
  if (this->ids_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _ids_cached_byte_size_, target);
  }
  for (int i = 0; i < this->ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->ids(i), target);
  }

  // repeated float Scores = 3;
  if (this->scores_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _scores_cached_byte_size_, target);
  }
  for (int i = 0; i < this->scores_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->scores(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:model.FeatureRankingResponse)
  return target;
}

int FeatureRankingResponse::ByteSize() const {
  int total_size = 0;

  // optional int64 ReqId = 1;
  if (this->reqid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->reqid());
  }

  // repeated int64 Ids = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->ids(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _ids_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float Scores = 3;
  {
    int data_size = 0;
    data_size = 4 * this->scores_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _scores_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FeatureRankingResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const FeatureRankingResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const FeatureRankingResponse>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FeatureRankingResponse::MergeFrom(const FeatureRankingResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  ids_.MergeFrom(from.ids_);
  scores_.MergeFrom(from.scores_);
  if (from.reqid() != 0) {
    set_reqid(from.reqid());
  }
}

void FeatureRankingResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FeatureRankingResponse::CopyFrom(const FeatureRankingResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeatureRankingResponse::IsInitialized() const {

  return true;
}

void FeatureRankingResponse::Swap(FeatureRankingResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FeatureRankingResponse::InternalSwap(FeatureRankingResponse* other) {
  std::swap(reqid_, other->reqid_);
  ids_.UnsafeArenaSwap(&other->ids_);
  scores_.UnsafeArenaSwap(&other->scores_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FeatureRankingResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FeatureRankingResponse_descriptor_;
  metadata.reflection = FeatureRankingResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FeatureRankingResponse

// optional int64 ReqId = 1;
void FeatureRankingResponse::clear_reqid() {
  reqid_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 FeatureRankingResponse::reqid() const {
  // @@protoc_insertion_point(field_get:model.FeatureRankingResponse.ReqId)
  return reqid_;
}
 void FeatureRankingResponse::set_reqid(::google::protobuf::int64 value) {
  
  reqid_ = value;
  // @@protoc_insertion_point(field_set:model.FeatureRankingResponse.ReqId)
}

// repeated int64 Ids = 2;
int FeatureRankingResponse::ids_size() const {
  return ids_.size();
}
void FeatureRankingResponse::clear_ids() {
  ids_.Clear();
}
 ::google::protobuf::int64 FeatureRankingResponse::ids(int index) const {
  // @@protoc_insertion_point(field_get:model.FeatureRankingResponse.Ids)
  return ids_.Get(index);
}
 void FeatureRankingResponse::set_ids(int index, ::google::protobuf::int64 value) {
  ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:model.FeatureRankingResponse.Ids)
}
 void FeatureRankingResponse::add_ids(::google::protobuf::int64 value) {
  ids_.Add(value);
  // @@protoc_insertion_point(field_add:model.FeatureRankingResponse.Ids)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
FeatureRankingResponse::ids() const {
  // @@protoc_insertion_point(field_list:model.FeatureRankingResponse.Ids)
  return ids_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
FeatureRankingResponse::mutable_ids() {
  // @@protoc_insertion_point(field_mutable_list:model.FeatureRankingResponse.Ids)
  return &ids_;
}

// repeated float Scores = 3;
int FeatureRankingResponse::scores_size() const {
  return scores_.size();
}
void FeatureRankingResponse::clear_scores() {
  scores_.Clear();
}
 float FeatureRankingResponse::scores(int index) const {
  // @@protoc_insertion_point(field_get:model.FeatureRankingResponse.Scores)
  return scores_.Get(index);
}
 void FeatureRankingResponse::set_scores(int index, float value) {
  scores_.Set(index, value);
  // @@protoc_insertion_point(field_set:model.FeatureRankingResponse.Scores)
}
 void FeatureRankingResponse::add_scores(float value) {
  scores_.Add(value);
  // @@protoc_insertion_point(field_add:model.FeatureRankingResponse.Scores)
}
 const ::google::protobuf::RepeatedField< float >&
FeatureRankingResponse::scores() const {
  // @@protoc_insertion_point(field_list:model.FeatureRankingResponse.Scores)
  return scores_;
}
 ::google::protobuf::RepeatedField< float >*
FeatureRankingResponse::mutable_scores() {
  // @@protoc_insertion_point(field_mutable_list:model.FeatureRankingResponse.Scores)
  return &scores_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace model

// @@protoc_insertion_point(global_scope)
