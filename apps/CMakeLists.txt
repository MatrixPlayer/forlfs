cmake_minimum_required(VERSION 2.8)
PROJECT(matrix_apps)

IF(CMAKE_BUILD_TYPE)
ELSE()
    SET(CMAKE_BUILD_TYPE "Debug")
ENDIF()

SET(CMAKE_CXX_FLAGS_DEBUG " $ENV{CXXFLAGS} -std=c++11 -DDEBUG -DUSE_CUDA -DDLIB_NO_GUI_SUPPORT -g -w ")
SET(CMAKE_CXX_FLAGS_RELEASE " $ENV{CXXFLAGS} -std=c++11 -DNDEBUG -DUSE_CUDA -DDLIB_NO_GUI_SUPPORT -O3 -w")

SET(PLATFORM ${CMAKE_SYSTEM_NAME}-${CMAKE_SYSTEM_PROCESSOR})
SET(INCLUDE_PATH ${PROJECT_SOURCE_DIR}/../include)
SET(LIBS_PATH ${PROJECT_SOURCE_DIR}/../lib)

INCLUDE_DIRECTORIES(${INCLUDE_PATH} src ${INCLUDE_PATH}/matrix_engine ${INCLUDE_PATH}/matrix_util ../imodel/src/cpp)

SET(CUDA_LIB_PATH /usr/local/cuda/lib64)
IF(${PLATFORM} STREQUAL "Linux-armv7l")
    INCLUDE_DIRECTORIES(include/caffe-6.5)
    SET(CUDA_LIB_PATH "/usr/local/cuda/lib")
    FIND_LIBRARY(LIB_TBB NAMES tbb PATHS lib/tbb/${PLATFORM} NO_CMAKE_SYSTEM_PATH NO_DEFAULT_PATH NO_CMAKE_ENVIRONMENT_PATH NO_CMAKE_PATH NO_SYSTEM_ENVIRONMENT_PATH NO_CMAKE_BUILDS_PATH NO_CMAKE_SYSTEM_PATH)
ELSE(${PLATFORM} STREQUAL "Linux-armv7l")
    INCLUDE_DIRECTORIES(include/caffe-7.0)
    SET(LIB_TBB tbb)
ENDIF(${PLATFORM} STREQUAL "Linux-armv7l")

OPTION(ENABLE_CUDA "" ON)

FIND_PACKAGE(CUDA REQUIRED)
FIND_LIBRARY(LIB_CUDART NAMES cudart PATHS ${CUDA_LIB_PATH})

FIND_LIBRARY(LIB_MXNET mxnet PATHS ${LIBS_PATH}/mxnet/${PLATFORM}/${CUDA_VERSION})
FIND_LIBRARY(LIB_CAFFE NAMES caffe PATHS ${LIBS_PATH}/dgcaffe/${PLATFORM}/${CUDA_VERSION})

FIND_PACKAGE(Boost COMPONENTS regex system filesystem coroutine context REQUIRED)
FIND_LIBRARY(LIB_PBJSON NAMES pbjson PATHS ${LIBS_PATH}/pbjson/${PLATFORM})
FIND_LIBRARY(LIB_MATRIX_UTILS NAMES matrix_util PATHS ${LIBS_PATH}/matrix_util/${PLATFORM})
FIND_LIBRARY(LIB_MATRIX matrix PATHS ${LIBS_PATH}/matrix_engine/${PLATFORM})
FIND_LIBRARY(LIB_MATRIX_CUDA matrix_cuda PATHS ${LIBS_PATH}/matrix_engine/${PLATFORM})
FIND_LIBRARY(LIB_THPLATEID NAMES thplateid PATHS ${LIBS_PATH}/thplateid/${PLATFORM})
FIND_LIBRARY(LIB_DLIB dlib PATHS ${LIBS_PATH}/dlib/${PLATFORM})
FIND_LIBRARY(LIB_HASP hasp PATHS ${LIBS_PATH}/watchdog/${PLATFORM})
FIND_LIBRARY(LIB_WATCHDOG watchdog PATHS ${LIBS_PATH}/watchdog/${PLATFORM})
FIND_LIBRARY(LIB_PROTOBUF protobuf HINTS ${LIBS_PATH}/protobuf/${PLATFORM})
FIND_LIBRARY(LIB_GRPC grpc HINTS ${LIBS_PATH}/grpc/${PLATFORM})
FIND_LIBRARY(LIB_GRPC++ grpc++ HINTS ${LIBS_PATH}/grpc/${PLATFORM})
FIND_LIBRARY(LIB_GTEST_MAIN NAMES gtest_main PATHS ${LIBS_PATH}/gtest/${PLATFORM})
FIND_LIBRARY(LIB_GTEST NAMES gtest PATHS ${LIBS_PATH}/gtest/${PLATFORM})


FIND_LIBRARY(LIB_CDNN_SCORE NAMES cdnn-score PATHS ${LIBS_PATH}/dgface/${PLATFORM}/${CUDA_VERSION}/cdnn)
FIND_LIBRARY(LIB_CDNN_FEATURE NAMES cdnn-feature PATHS ${LIBS_PATH}/dgface/${PLATFORM}/${CUDA_VERSION}/cdnn)
FIND_LIBRARY(LIB_CDNN_ALIGN NAMES cdnn-align PATHS ${LIBS_PATH}/dgface/${PLATFORM}/${CUDA_VERSION}/cdnn)

#FIND_LIBRARY(LIB_CDNN_CAFFE_FACE_ALIGNMENT NAMES facealignment PATHS ${LIBS_PATH}/dgface/${PLATFORM}/${CUDA_VERSION}/cdnn-caffe)
#FIND_LIBRARY(LIB_CDNN_CAFFE_FACE_DETECTION NAMES facedetection PATHS ${LIBS_PATH}/dgface/${PLATFORM}/${CUDA_VERSION}/cdnn-caffe)
#FIND_LIBRARY(LIB_CDNN_CAFFE_FACE_RECOGNITION NAMES facerecognition PATHS ${LIBS_PATH}/dgface/${PLATFORM}/${CUDA_VERSION}/cdnn-caffe)
FIND_LIBRARY(LIB_CDNN_CAFFE_FACE_SDK NAMES facesdk PATHS ${LIBS_PATH}/dgface/${PLATFORM}/${CUDA_VERSION}/cdnn-caffe)

FIND_LIBRARY(LIB_DGFACE NAMES dgface cdnn-score PATHS ${LIBS_PATH}/dgface/${PLATFORM}/${CUDA_VERSION})

LIST(APPEND LIBS  ${LIB_GTEST_MAIN} ${LIB_GTEST} ${LIB_MATRIX} ${LIB_WATCHDOG} ${LIB_HASP} ${LIB_MATRIX_CUDA} ${LIB_MATRIX_UTILS} ${LIB_THPLATEID} ${LIB_DGFACE} ${LIB_CDNN_FEATURE} ${LIB_CDNN_ALIGN}   ${LIB_CDNN_SCORE}  ${LIB_CDNN_CAFFE_FACE_SDK} ${LIB_DLIB} )

LIST(APPEND LIBS ${LIB_TBB} ${LIB_GRPC++} ${LIB_GRPC} ${LIB_PROTOBUF} ${LIB_CUDART} ${LIB_CUDNN} ${LIB_MXNET} ${LIB_CAFFE} ${LIB_PBJSON} ${Boost_LIBRARIES})
LIST(APPEND LIBS glog gflags leveldb jsoncpp b64 snappy lmdb jpeg png GL glut curl uuid
freetype hdf5_hl hdf5 m crypto opencv_core opencv_highgui opencv_imgproc opencv_calib3d opencv_features2d gstreamer-0.10
gobject-2.0 gmodule-2.0 gthread-2.0 xml2 glib-2.0 gstapp-0.10 z dl pthread openblas)


ADD_SUBDIRECTORY(src)
#ADD_SUBDIRECTORY(test)
#ADD_SUBDIRECTORY(tools)

