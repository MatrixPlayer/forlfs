// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: system.proto

#include "system.pb.h"
#include "system.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace dg {

static const char* SystemService_method_names[] = {
  "/dg.SystemService/Ping",
  "/dg.SystemService/SystemStatus",
  "/dg.SystemService/GetInstances",
  "/dg.SystemService/ConfigEngine",
};

std::unique_ptr< SystemService::Stub> SystemService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< SystemService::Stub> stub(new SystemService::Stub(channel));
  return stub;
}

SystemService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Ping_(SystemService_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SystemStatus_(SystemService_method_names[1], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetInstances_(SystemService_method_names[2], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ConfigEngine_(SystemService_method_names[3], ::grpc::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status SystemService::Stub::Ping(::grpc::ClientContext* context, const ::dg::PingRequest& request, ::dg::PingResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Ping_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::dg::PingResponse>* SystemService::Stub::AsyncPingRaw(::grpc::ClientContext* context, const ::dg::PingRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::dg::PingResponse>(channel_.get(), cq, rpcmethod_Ping_, context, request);
}

::grpc::Status SystemService::Stub::SystemStatus(::grpc::ClientContext* context, const ::dg::SystemStatusRequest& request, ::dg::SystemStatusResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_SystemStatus_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::dg::SystemStatusResponse>* SystemService::Stub::AsyncSystemStatusRaw(::grpc::ClientContext* context, const ::dg::SystemStatusRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::dg::SystemStatusResponse>(channel_.get(), cq, rpcmethod_SystemStatus_, context, request);
}

::grpc::Status SystemService::Stub::GetInstances(::grpc::ClientContext* context, const ::dg::GetInstancesRequest& request, ::dg::InstanceConfigureResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_GetInstances_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::dg::InstanceConfigureResponse>* SystemService::Stub::AsyncGetInstancesRaw(::grpc::ClientContext* context, const ::dg::GetInstancesRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::dg::InstanceConfigureResponse>(channel_.get(), cq, rpcmethod_GetInstances_, context, request);
}

::grpc::Status SystemService::Stub::ConfigEngine(::grpc::ClientContext* context, const ::dg::InstanceConfigureRequest& request, ::dg::InstanceConfigureResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_ConfigEngine_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::dg::InstanceConfigureResponse>* SystemService::Stub::AsyncConfigEngineRaw(::grpc::ClientContext* context, const ::dg::InstanceConfigureRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::dg::InstanceConfigureResponse>(channel_.get(), cq, rpcmethod_ConfigEngine_, context, request);
}

SystemService::Service::Service() {
  (void)SystemService_method_names;
  AddMethod(new ::grpc::RpcServiceMethod(
      SystemService_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< SystemService::Service, ::dg::PingRequest, ::dg::PingResponse>(
          std::mem_fn(&SystemService::Service::Ping), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      SystemService_method_names[1],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< SystemService::Service, ::dg::SystemStatusRequest, ::dg::SystemStatusResponse>(
          std::mem_fn(&SystemService::Service::SystemStatus), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      SystemService_method_names[2],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< SystemService::Service, ::dg::GetInstancesRequest, ::dg::InstanceConfigureResponse>(
          std::mem_fn(&SystemService::Service::GetInstances), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      SystemService_method_names[3],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< SystemService::Service, ::dg::InstanceConfigureRequest, ::dg::InstanceConfigureResponse>(
          std::mem_fn(&SystemService::Service::ConfigEngine), this)));
}

SystemService::Service::~Service() {
}

::grpc::Status SystemService::Service::Ping(::grpc::ServerContext* context, const ::dg::PingRequest* request, ::dg::PingResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SystemService::Service::SystemStatus(::grpc::ServerContext* context, const ::dg::SystemStatusRequest* request, ::dg::SystemStatusResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SystemService::Service::GetInstances(::grpc::ServerContext* context, const ::dg::GetInstancesRequest* request, ::dg::InstanceConfigureResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SystemService::Service::ConfigEngine(::grpc::ServerContext* context, const ::dg::InstanceConfigureRequest* request, ::dg::InstanceConfigureResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace dg

