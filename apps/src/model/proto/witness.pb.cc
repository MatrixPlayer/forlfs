// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: witness.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "witness.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace dg {
namespace apps {

namespace {

const ::google::protobuf::Descriptor* RecognizeStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecognizeStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* RecognizeParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecognizeParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* RecognizeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecognizeRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* VehicleBrand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VehicleBrand_reflection_ = NULL;
const ::google::protobuf::Descriptor* VehiclePlate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VehiclePlate_reflection_ = NULL;
const ::google::protobuf::Descriptor* VehicleSymbol_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VehicleSymbol_reflection_ = NULL;
const ::google::protobuf::Descriptor* Feature_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Feature_reflection_ = NULL;
const ::google::protobuf::Descriptor* RecognizeResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecognizeResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* RecognizeResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecognizeResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* BatchRecognizeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BatchRecognizeRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* BatchRecognizeResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BatchRecognizeResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* RecognizeType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RecognizeFunction_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_witness_2eproto() {
  protobuf_AddDesc_witness_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "witness.proto");
  GOOGLE_CHECK(file != NULL);
  RecognizeStatus_descriptor_ = file->message_type(0);
  static const int RecognizeStatus_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecognizeStatus, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecognizeStatus, msg_),
  };
  RecognizeStatus_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RecognizeStatus_descriptor_,
      RecognizeStatus::default_instance_,
      RecognizeStatus_offsets_,
      -1,
      -1,
      -1,
      sizeof(RecognizeStatus),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecognizeStatus, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecognizeStatus, _is_default_instance_));
  RecognizeParam_descriptor_ = file->message_type(1);
  static const int RecognizeParam_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecognizeParam, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecognizeParam, function_),
  };
  RecognizeParam_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RecognizeParam_descriptor_,
      RecognizeParam::default_instance_,
      RecognizeParam_offsets_,
      -1,
      -1,
      -1,
      sizeof(RecognizeParam),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecognizeParam, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecognizeParam, _is_default_instance_));
  RecognizeRequest_descriptor_ = file->message_type(2);
  static const int RecognizeRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecognizeRequest, sessionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecognizeRequest, image_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecognizeRequest, param_),
  };
  RecognizeRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RecognizeRequest_descriptor_,
      RecognizeRequest::default_instance_,
      RecognizeRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(RecognizeRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecognizeRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecognizeRequest, _is_default_instance_));
  VehicleBrand_descriptor_ = file->message_type(3);
  static const int VehicleBrand_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleBrand, brandid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleBrand, confidence_),
  };
  VehicleBrand_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      VehicleBrand_descriptor_,
      VehicleBrand::default_instance_,
      VehicleBrand_offsets_,
      -1,
      -1,
      -1,
      sizeof(VehicleBrand),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleBrand, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleBrand, _is_default_instance_));
  VehiclePlate_descriptor_ = file->message_type(4);
  static const int VehiclePlate_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehiclePlate, box_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehiclePlate, platetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehiclePlate, platenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehiclePlate, platecolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehiclePlate, confidence_),
  };
  VehiclePlate_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      VehiclePlate_descriptor_,
      VehiclePlate::default_instance_,
      VehiclePlate_offsets_,
      -1,
      -1,
      -1,
      sizeof(VehiclePlate),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehiclePlate, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehiclePlate, _is_default_instance_));
  VehicleSymbol_descriptor_ = file->message_type(5);
  static const int VehicleSymbol_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleSymbol, box_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleSymbol, symboltype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleSymbol, confidence_),
  };
  VehicleSymbol_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      VehicleSymbol_descriptor_,
      VehicleSymbol::default_instance_,
      VehicleSymbol_offsets_,
      -1,
      -1,
      -1,
      sizeof(VehicleSymbol),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleSymbol, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleSymbol, _is_default_instance_));
  Feature_descriptor_ = file->message_type(6);
  static const int Feature_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Feature, featurevector_),
  };
  Feature_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Feature_descriptor_,
      Feature::default_instance_,
      Feature_offsets_,
      -1,
      -1,
      -1,
      sizeof(Feature),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Feature, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Feature, _is_default_instance_));
  RecognizeResult_descriptor_ = file->message_type(7);
  static const int RecognizeResult_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecognizeResult, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecognizeResult, box_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecognizeResult, brand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecognizeResult, plate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecognizeResult, color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecognizeResult, feature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecognizeResult, symbols_),
  };
  RecognizeResult_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RecognizeResult_descriptor_,
      RecognizeResult::default_instance_,
      RecognizeResult_offsets_,
      -1,
      -1,
      -1,
      sizeof(RecognizeResult),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecognizeResult, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecognizeResult, _is_default_instance_));
  RecognizeResponse_descriptor_ = file->message_type(8);
  static const int RecognizeResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecognizeResponse, sessionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecognizeResponse, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecognizeResponse, result_),
  };
  RecognizeResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RecognizeResponse_descriptor_,
      RecognizeResponse::default_instance_,
      RecognizeResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(RecognizeResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecognizeResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecognizeResponse, _is_default_instance_));
  BatchRecognizeRequest_descriptor_ = file->message_type(9);
  static const int BatchRecognizeRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchRecognizeRequest, requests_),
  };
  BatchRecognizeRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BatchRecognizeRequest_descriptor_,
      BatchRecognizeRequest::default_instance_,
      BatchRecognizeRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(BatchRecognizeRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchRecognizeRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchRecognizeRequest, _is_default_instance_));
  BatchRecognizeResponse_descriptor_ = file->message_type(10);
  static const int BatchRecognizeResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchRecognizeResponse, reponses_),
  };
  BatchRecognizeResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BatchRecognizeResponse_descriptor_,
      BatchRecognizeResponse::default_instance_,
      BatchRecognizeResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(BatchRecognizeResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchRecognizeResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchRecognizeResponse, _is_default_instance_));
  RecognizeType_descriptor_ = file->enum_type(0);
  RecognizeFunction_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_witness_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RecognizeStatus_descriptor_, &RecognizeStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RecognizeParam_descriptor_, &RecognizeParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RecognizeRequest_descriptor_, &RecognizeRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      VehicleBrand_descriptor_, &VehicleBrand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      VehiclePlate_descriptor_, &VehiclePlate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      VehicleSymbol_descriptor_, &VehicleSymbol::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Feature_descriptor_, &Feature::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RecognizeResult_descriptor_, &RecognizeResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RecognizeResponse_descriptor_, &RecognizeResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BatchRecognizeRequest_descriptor_, &BatchRecognizeRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BatchRecognizeResponse_descriptor_, &BatchRecognizeResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_witness_2eproto() {
  delete RecognizeStatus::default_instance_;
  delete RecognizeStatus_reflection_;
  delete RecognizeParam::default_instance_;
  delete RecognizeParam_reflection_;
  delete RecognizeRequest::default_instance_;
  delete RecognizeRequest_reflection_;
  delete VehicleBrand::default_instance_;
  delete VehicleBrand_reflection_;
  delete VehiclePlate::default_instance_;
  delete VehiclePlate_reflection_;
  delete VehicleSymbol::default_instance_;
  delete VehicleSymbol_reflection_;
  delete Feature::default_instance_;
  delete Feature_reflection_;
  delete RecognizeResult::default_instance_;
  delete RecognizeResult_reflection_;
  delete RecognizeResponse::default_instance_;
  delete RecognizeResponse_reflection_;
  delete BatchRecognizeRequest::default_instance_;
  delete BatchRecognizeRequest_reflection_;
  delete BatchRecognizeResponse::default_instance_;
  delete BatchRecognizeResponse_reflection_;
}

void protobuf_AddDesc_witness_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::dg::apps::protobuf_AddDesc_common_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rwitness.proto\022\007dg.apps\032\014common.proto\","
    "\n\017RecognizeStatus\022\014\n\004Code\030\001 \001(\005\022\013\n\003Msg\030\002"
    " \001(\t\"d\n\016RecognizeParam\022$\n\004Type\030\001 \001(\0162\026.d"
    "g.apps.RecognizeType\022,\n\010Function\030\002 \001(\0162\032"
    ".dg.apps.RecognizeFunction\"l\n\020RecognizeR"
    "equest\022\021\n\tSessionId\030\001 \001(\003\022\035\n\005Image\030\002 \001(\013"
    "2\016.dg.apps.Image\022&\n\005Param\030\003 \001(\0132\027.dg.app"
    "s.RecognizeParam\"3\n\014VehicleBrand\022\017\n\007Bran"
    "dId\030\001 \001(\005\022\022\n\nConfidence\030\002 \001(\002\"\213\001\n\014Vehicl"
    "ePlate\022\036\n\003Box\030\001 \001(\0132\021.dg.apps.Cutboard\022\021"
    "\n\tPlateType\030\002 \001(\005\022\020\n\010PlateNum\030\003 \001(\t\022\"\n\nP"
    "lateColor\030\004 \001(\0132\016.dg.apps.Color\022\022\n\nConfi"
    "dence\030\005 \001(\002\"W\n\rVehicleSymbol\022\036\n\003Box\030\001 \001("
    "\0132\021.dg.apps.Cutboard\022\022\n\nSymbolType\030\002 \001(\005"
    "\022\022\n\nConfidence\030\003 \001(\002\" \n\007Feature\022\025\n\rFeatu"
    "reVector\030\001 \001(\014\"\210\002\n\017RecognizeResult\022\036\n\004Ty"
    "pe\030\001 \001(\0162\020.dg.apps.ObjType\022\036\n\003Box\030\002 \001(\0132"
    "\021.dg.apps.Cutboard\022$\n\005Brand\030\003 \001(\0132\025.dg.a"
    "pps.VehicleBrand\022$\n\005Plate\030\004 \001(\0132\025.dg.app"
    "s.VehiclePlate\022\035\n\005Color\030\005 \001(\0132\016.dg.apps."
    "Color\022!\n\007Feature\030\006 \001(\0132\020.dg.apps.Feature"
    "\022\'\n\007Symbols\030\007 \003(\0132\026.dg.apps.VehicleSymbo"
    "l\"z\n\021RecognizeResponse\022\021\n\tSessionId\030\001 \001("
    "\003\022(\n\006Status\030\002 \001(\0132\030.dg.apps.RecognizeSta"
    "tus\022(\n\006Result\030\003 \001(\0132\030.dg.apps.RecognizeR"
    "esult\"D\n\025BatchRecognizeRequest\022+\n\010Reques"
    "ts\030\001 \003(\0132\031.dg.apps.RecognizeRequest\"F\n\026B"
    "atchRecognizeResponse\022,\n\010Reponses\030\001 \003(\0132"
    "\032.dg.apps.RecognizeResponse*N\n\rRecognize"
    "Type\022\024\n\020REC_TYPE_DEFAULT\020\000\022\024\n\020REC_TYPE_V"
    "EHICLE\020\001\022\021\n\rREC_TYPE_FACE\020\002*W\n\021Recognize"
    "Function\022\024\n\020REC_FUNC_DEFAULT\020\000\022\026\n\022REC_FU"
    "NC_DETECTION\020\001\022\024\n\020REC_FUNC_FEATURE\020\0022\253\001\n"
    "\016WitnessService\022D\n\tRecognize\022\031.dg.apps.R"
    "ecognizeRequest\032\032.dg.apps.RecognizeRespo"
    "nse\"\000\022S\n\016BatchRecognize\022\036.dg.apps.BatchR"
    "ecognizeRequest\032\037.dg.apps.BatchRecognize"
    "Response\"\000b\006proto3", 1498);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "witness.proto", &protobuf_RegisterTypes);
  RecognizeStatus::default_instance_ = new RecognizeStatus();
  RecognizeParam::default_instance_ = new RecognizeParam();
  RecognizeRequest::default_instance_ = new RecognizeRequest();
  VehicleBrand::default_instance_ = new VehicleBrand();
  VehiclePlate::default_instance_ = new VehiclePlate();
  VehicleSymbol::default_instance_ = new VehicleSymbol();
  Feature::default_instance_ = new Feature();
  RecognizeResult::default_instance_ = new RecognizeResult();
  RecognizeResponse::default_instance_ = new RecognizeResponse();
  BatchRecognizeRequest::default_instance_ = new BatchRecognizeRequest();
  BatchRecognizeResponse::default_instance_ = new BatchRecognizeResponse();
  RecognizeStatus::default_instance_->InitAsDefaultInstance();
  RecognizeParam::default_instance_->InitAsDefaultInstance();
  RecognizeRequest::default_instance_->InitAsDefaultInstance();
  VehicleBrand::default_instance_->InitAsDefaultInstance();
  VehiclePlate::default_instance_->InitAsDefaultInstance();
  VehicleSymbol::default_instance_->InitAsDefaultInstance();
  Feature::default_instance_->InitAsDefaultInstance();
  RecognizeResult::default_instance_->InitAsDefaultInstance();
  RecognizeResponse::default_instance_->InitAsDefaultInstance();
  BatchRecognizeRequest::default_instance_->InitAsDefaultInstance();
  BatchRecognizeResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_witness_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_witness_2eproto {
  StaticDescriptorInitializer_witness_2eproto() {
    protobuf_AddDesc_witness_2eproto();
  }
} static_descriptor_initializer_witness_2eproto_;
const ::google::protobuf::EnumDescriptor* RecognizeType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecognizeType_descriptor_;
}
bool RecognizeType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RecognizeFunction_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecognizeFunction_descriptor_;
}
bool RecognizeFunction_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RecognizeStatus::kCodeFieldNumber;
const int RecognizeStatus::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RecognizeStatus::RecognizeStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dg.apps.RecognizeStatus)
}

void RecognizeStatus::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

RecognizeStatus::RecognizeStatus(const RecognizeStatus& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dg.apps.RecognizeStatus)
}

void RecognizeStatus::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  code_ = 0;
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

RecognizeStatus::~RecognizeStatus() {
  // @@protoc_insertion_point(destructor:dg.apps.RecognizeStatus)
  SharedDtor();
}

void RecognizeStatus::SharedDtor() {
  msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void RecognizeStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecognizeStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecognizeStatus_descriptor_;
}

const RecognizeStatus& RecognizeStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_witness_2eproto();
  return *default_instance_;
}

RecognizeStatus* RecognizeStatus::default_instance_ = NULL;

RecognizeStatus* RecognizeStatus::New(::google::protobuf::Arena* arena) const {
  RecognizeStatus* n = new RecognizeStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RecognizeStatus::Clear() {
  code_ = 0;
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool RecognizeStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dg.apps.RecognizeStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Code = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Msg;
        break;
      }

      // optional string Msg = 2;
      case 2: {
        if (tag == 18) {
         parse_Msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dg.apps.RecognizeStatus.Msg"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dg.apps.RecognizeStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dg.apps.RecognizeStatus)
  return false;
#undef DO_
}

void RecognizeStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dg.apps.RecognizeStatus)
  // optional int32 Code = 1;
  if (this->code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  // optional string Msg = 2;
  if (this->msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.apps.RecognizeStatus.Msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->msg(), output);
  }

  // @@protoc_insertion_point(serialize_end:dg.apps.RecognizeStatus)
}

::google::protobuf::uint8* RecognizeStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dg.apps.RecognizeStatus)
  // optional int32 Code = 1;
  if (this->code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }

  // optional string Msg = 2;
  if (this->msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.apps.RecognizeStatus.Msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->msg(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:dg.apps.RecognizeStatus)
  return target;
}

int RecognizeStatus::ByteSize() const {
  int total_size = 0;

  // optional int32 Code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->code());
  }

  // optional string Msg = 2;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->msg());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecognizeStatus::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RecognizeStatus* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RecognizeStatus>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RecognizeStatus::MergeFrom(const RecognizeStatus& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.code() != 0) {
    set_code(from.code());
  }
  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
}

void RecognizeStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecognizeStatus::CopyFrom(const RecognizeStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecognizeStatus::IsInitialized() const {

  return true;
}

void RecognizeStatus::Swap(RecognizeStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RecognizeStatus::InternalSwap(RecognizeStatus* other) {
  std::swap(code_, other->code_);
  msg_.Swap(&other->msg_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RecognizeStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecognizeStatus_descriptor_;
  metadata.reflection = RecognizeStatus_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RecognizeStatus

// optional int32 Code = 1;
void RecognizeStatus::clear_code() {
  code_ = 0;
}
 ::google::protobuf::int32 RecognizeStatus::code() const {
  // @@protoc_insertion_point(field_get:dg.apps.RecognizeStatus.Code)
  return code_;
}
 void RecognizeStatus::set_code(::google::protobuf::int32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:dg.apps.RecognizeStatus.Code)
}

// optional string Msg = 2;
void RecognizeStatus::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& RecognizeStatus::msg() const {
  // @@protoc_insertion_point(field_get:dg.apps.RecognizeStatus.Msg)
  return msg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RecognizeStatus::set_msg(const ::std::string& value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.apps.RecognizeStatus.Msg)
}
 void RecognizeStatus::set_msg(const char* value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.apps.RecognizeStatus.Msg)
}
 void RecognizeStatus::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.apps.RecognizeStatus.Msg)
}
 ::std::string* RecognizeStatus::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:dg.apps.RecognizeStatus.Msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RecognizeStatus::release_msg() {
  
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RecognizeStatus::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:dg.apps.RecognizeStatus.Msg)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RecognizeParam::kTypeFieldNumber;
const int RecognizeParam::kFunctionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RecognizeParam::RecognizeParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dg.apps.RecognizeParam)
}

void RecognizeParam::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

RecognizeParam::RecognizeParam(const RecognizeParam& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dg.apps.RecognizeParam)
}

void RecognizeParam::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  type_ = 0;
  function_ = 0;
}

RecognizeParam::~RecognizeParam() {
  // @@protoc_insertion_point(destructor:dg.apps.RecognizeParam)
  SharedDtor();
}

void RecognizeParam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RecognizeParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecognizeParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecognizeParam_descriptor_;
}

const RecognizeParam& RecognizeParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_witness_2eproto();
  return *default_instance_;
}

RecognizeParam* RecognizeParam::default_instance_ = NULL;

RecognizeParam* RecognizeParam::New(::google::protobuf::Arena* arena) const {
  RecognizeParam* n = new RecognizeParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RecognizeParam::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RecognizeParam*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(type_, function_);

#undef ZR_HELPER_
#undef ZR_

}

bool RecognizeParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dg.apps.RecognizeParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .dg.apps.RecognizeType Type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::dg::apps::RecognizeType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Function;
        break;
      }

      // optional .dg.apps.RecognizeFunction Function = 2;
      case 2: {
        if (tag == 16) {
         parse_Function:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_function(static_cast< ::dg::apps::RecognizeFunction >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dg.apps.RecognizeParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dg.apps.RecognizeParam)
  return false;
#undef DO_
}

void RecognizeParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dg.apps.RecognizeParam)
  // optional .dg.apps.RecognizeType Type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .dg.apps.RecognizeFunction Function = 2;
  if (this->function() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->function(), output);
  }

  // @@protoc_insertion_point(serialize_end:dg.apps.RecognizeParam)
}

::google::protobuf::uint8* RecognizeParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dg.apps.RecognizeParam)
  // optional .dg.apps.RecognizeType Type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .dg.apps.RecognizeFunction Function = 2;
  if (this->function() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->function(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:dg.apps.RecognizeParam)
  return target;
}

int RecognizeParam::ByteSize() const {
  int total_size = 0;

  // optional .dg.apps.RecognizeType Type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // optional .dg.apps.RecognizeFunction Function = 2;
  if (this->function() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->function());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecognizeParam::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RecognizeParam* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RecognizeParam>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RecognizeParam::MergeFrom(const RecognizeParam& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.function() != 0) {
    set_function(from.function());
  }
}

void RecognizeParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecognizeParam::CopyFrom(const RecognizeParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecognizeParam::IsInitialized() const {

  return true;
}

void RecognizeParam::Swap(RecognizeParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RecognizeParam::InternalSwap(RecognizeParam* other) {
  std::swap(type_, other->type_);
  std::swap(function_, other->function_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RecognizeParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecognizeParam_descriptor_;
  metadata.reflection = RecognizeParam_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RecognizeParam

// optional .dg.apps.RecognizeType Type = 1;
void RecognizeParam::clear_type() {
  type_ = 0;
}
 ::dg::apps::RecognizeType RecognizeParam::type() const {
  // @@protoc_insertion_point(field_get:dg.apps.RecognizeParam.Type)
  return static_cast< ::dg::apps::RecognizeType >(type_);
}
 void RecognizeParam::set_type(::dg::apps::RecognizeType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:dg.apps.RecognizeParam.Type)
}

// optional .dg.apps.RecognizeFunction Function = 2;
void RecognizeParam::clear_function() {
  function_ = 0;
}
 ::dg::apps::RecognizeFunction RecognizeParam::function() const {
  // @@protoc_insertion_point(field_get:dg.apps.RecognizeParam.Function)
  return static_cast< ::dg::apps::RecognizeFunction >(function_);
}
 void RecognizeParam::set_function(::dg::apps::RecognizeFunction value) {
  
  function_ = value;
  // @@protoc_insertion_point(field_set:dg.apps.RecognizeParam.Function)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RecognizeRequest::kSessionIdFieldNumber;
const int RecognizeRequest::kImageFieldNumber;
const int RecognizeRequest::kParamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RecognizeRequest::RecognizeRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dg.apps.RecognizeRequest)
}

void RecognizeRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  image_ = const_cast< ::dg::apps::Image*>(&::dg::apps::Image::default_instance());
  param_ = const_cast< ::dg::apps::RecognizeParam*>(&::dg::apps::RecognizeParam::default_instance());
}

RecognizeRequest::RecognizeRequest(const RecognizeRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dg.apps.RecognizeRequest)
}

void RecognizeRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  sessionid_ = GOOGLE_LONGLONG(0);
  image_ = NULL;
  param_ = NULL;
}

RecognizeRequest::~RecognizeRequest() {
  // @@protoc_insertion_point(destructor:dg.apps.RecognizeRequest)
  SharedDtor();
}

void RecognizeRequest::SharedDtor() {
  if (this != default_instance_) {
    delete image_;
    delete param_;
  }
}

void RecognizeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecognizeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecognizeRequest_descriptor_;
}

const RecognizeRequest& RecognizeRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_witness_2eproto();
  return *default_instance_;
}

RecognizeRequest* RecognizeRequest::default_instance_ = NULL;

RecognizeRequest* RecognizeRequest::New(::google::protobuf::Arena* arena) const {
  RecognizeRequest* n = new RecognizeRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RecognizeRequest::Clear() {
  sessionid_ = GOOGLE_LONGLONG(0);
  if (GetArenaNoVirtual() == NULL && image_ != NULL) delete image_;
  image_ = NULL;
  if (GetArenaNoVirtual() == NULL && param_ != NULL) delete param_;
  param_ = NULL;
}

bool RecognizeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dg.apps.RecognizeRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 SessionId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sessionid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Image;
        break;
      }

      // optional .dg.apps.Image Image = 2;
      case 2: {
        if (tag == 18) {
         parse_Image:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_image()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Param;
        break;
      }

      // optional .dg.apps.RecognizeParam Param = 3;
      case 3: {
        if (tag == 26) {
         parse_Param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dg.apps.RecognizeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dg.apps.RecognizeRequest)
  return false;
#undef DO_
}

void RecognizeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dg.apps.RecognizeRequest)
  // optional int64 SessionId = 1;
  if (this->sessionid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->sessionid(), output);
  }

  // optional .dg.apps.Image Image = 2;
  if (this->has_image()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->image_, output);
  }

  // optional .dg.apps.RecognizeParam Param = 3;
  if (this->has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->param_, output);
  }

  // @@protoc_insertion_point(serialize_end:dg.apps.RecognizeRequest)
}

::google::protobuf::uint8* RecognizeRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dg.apps.RecognizeRequest)
  // optional int64 SessionId = 1;
  if (this->sessionid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->sessionid(), target);
  }

  // optional .dg.apps.Image Image = 2;
  if (this->has_image()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->image_, target);
  }

  // optional .dg.apps.RecognizeParam Param = 3;
  if (this->has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->param_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:dg.apps.RecognizeRequest)
  return target;
}

int RecognizeRequest::ByteSize() const {
  int total_size = 0;

  // optional int64 SessionId = 1;
  if (this->sessionid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->sessionid());
  }

  // optional .dg.apps.Image Image = 2;
  if (this->has_image()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->image_);
  }

  // optional .dg.apps.RecognizeParam Param = 3;
  if (this->has_param()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->param_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecognizeRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RecognizeRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RecognizeRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RecognizeRequest::MergeFrom(const RecognizeRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.sessionid() != 0) {
    set_sessionid(from.sessionid());
  }
  if (from.has_image()) {
    mutable_image()->::dg::apps::Image::MergeFrom(from.image());
  }
  if (from.has_param()) {
    mutable_param()->::dg::apps::RecognizeParam::MergeFrom(from.param());
  }
}

void RecognizeRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecognizeRequest::CopyFrom(const RecognizeRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecognizeRequest::IsInitialized() const {

  return true;
}

void RecognizeRequest::Swap(RecognizeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RecognizeRequest::InternalSwap(RecognizeRequest* other) {
  std::swap(sessionid_, other->sessionid_);
  std::swap(image_, other->image_);
  std::swap(param_, other->param_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RecognizeRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecognizeRequest_descriptor_;
  metadata.reflection = RecognizeRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RecognizeRequest

// optional int64 SessionId = 1;
void RecognizeRequest::clear_sessionid() {
  sessionid_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 RecognizeRequest::sessionid() const {
  // @@protoc_insertion_point(field_get:dg.apps.RecognizeRequest.SessionId)
  return sessionid_;
}
 void RecognizeRequest::set_sessionid(::google::protobuf::int64 value) {
  
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:dg.apps.RecognizeRequest.SessionId)
}

// optional .dg.apps.Image Image = 2;
bool RecognizeRequest::has_image() const {
  return !_is_default_instance_ && image_ != NULL;
}
void RecognizeRequest::clear_image() {
  if (GetArenaNoVirtual() == NULL && image_ != NULL) delete image_;
  image_ = NULL;
}
const ::dg::apps::Image& RecognizeRequest::image() const {
  // @@protoc_insertion_point(field_get:dg.apps.RecognizeRequest.Image)
  return image_ != NULL ? *image_ : *default_instance_->image_;
}
::dg::apps::Image* RecognizeRequest::mutable_image() {
  
  if (image_ == NULL) {
    image_ = new ::dg::apps::Image;
  }
  // @@protoc_insertion_point(field_mutable:dg.apps.RecognizeRequest.Image)
  return image_;
}
::dg::apps::Image* RecognizeRequest::release_image() {
  
  ::dg::apps::Image* temp = image_;
  image_ = NULL;
  return temp;
}
void RecognizeRequest::set_allocated_image(::dg::apps::Image* image) {
  delete image_;
  image_ = image;
  if (image) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dg.apps.RecognizeRequest.Image)
}

// optional .dg.apps.RecognizeParam Param = 3;
bool RecognizeRequest::has_param() const {
  return !_is_default_instance_ && param_ != NULL;
}
void RecognizeRequest::clear_param() {
  if (GetArenaNoVirtual() == NULL && param_ != NULL) delete param_;
  param_ = NULL;
}
const ::dg::apps::RecognizeParam& RecognizeRequest::param() const {
  // @@protoc_insertion_point(field_get:dg.apps.RecognizeRequest.Param)
  return param_ != NULL ? *param_ : *default_instance_->param_;
}
::dg::apps::RecognizeParam* RecognizeRequest::mutable_param() {
  
  if (param_ == NULL) {
    param_ = new ::dg::apps::RecognizeParam;
  }
  // @@protoc_insertion_point(field_mutable:dg.apps.RecognizeRequest.Param)
  return param_;
}
::dg::apps::RecognizeParam* RecognizeRequest::release_param() {
  
  ::dg::apps::RecognizeParam* temp = param_;
  param_ = NULL;
  return temp;
}
void RecognizeRequest::set_allocated_param(::dg::apps::RecognizeParam* param) {
  delete param_;
  param_ = param;
  if (param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dg.apps.RecognizeRequest.Param)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VehicleBrand::kBrandIdFieldNumber;
const int VehicleBrand::kConfidenceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VehicleBrand::VehicleBrand()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dg.apps.VehicleBrand)
}

void VehicleBrand::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

VehicleBrand::VehicleBrand(const VehicleBrand& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dg.apps.VehicleBrand)
}

void VehicleBrand::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  brandid_ = 0;
  confidence_ = 0;
}

VehicleBrand::~VehicleBrand() {
  // @@protoc_insertion_point(destructor:dg.apps.VehicleBrand)
  SharedDtor();
}

void VehicleBrand::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VehicleBrand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VehicleBrand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VehicleBrand_descriptor_;
}

const VehicleBrand& VehicleBrand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_witness_2eproto();
  return *default_instance_;
}

VehicleBrand* VehicleBrand::default_instance_ = NULL;

VehicleBrand* VehicleBrand::New(::google::protobuf::Arena* arena) const {
  VehicleBrand* n = new VehicleBrand;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VehicleBrand::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<VehicleBrand*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(brandid_, confidence_);

#undef ZR_HELPER_
#undef ZR_

}

bool VehicleBrand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dg.apps.VehicleBrand)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 BrandId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &brandid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_Confidence;
        break;
      }

      // optional float Confidence = 2;
      case 2: {
        if (tag == 21) {
         parse_Confidence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &confidence_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dg.apps.VehicleBrand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dg.apps.VehicleBrand)
  return false;
#undef DO_
}

void VehicleBrand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dg.apps.VehicleBrand)
  // optional int32 BrandId = 1;
  if (this->brandid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->brandid(), output);
  }

  // optional float Confidence = 2;
  if (this->confidence() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->confidence(), output);
  }

  // @@protoc_insertion_point(serialize_end:dg.apps.VehicleBrand)
}

::google::protobuf::uint8* VehicleBrand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dg.apps.VehicleBrand)
  // optional int32 BrandId = 1;
  if (this->brandid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->brandid(), target);
  }

  // optional float Confidence = 2;
  if (this->confidence() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->confidence(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:dg.apps.VehicleBrand)
  return target;
}

int VehicleBrand::ByteSize() const {
  int total_size = 0;

  // optional int32 BrandId = 1;
  if (this->brandid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->brandid());
  }

  // optional float Confidence = 2;
  if (this->confidence() != 0) {
    total_size += 1 + 4;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VehicleBrand::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const VehicleBrand* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const VehicleBrand>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VehicleBrand::MergeFrom(const VehicleBrand& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.brandid() != 0) {
    set_brandid(from.brandid());
  }
  if (from.confidence() != 0) {
    set_confidence(from.confidence());
  }
}

void VehicleBrand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehicleBrand::CopyFrom(const VehicleBrand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleBrand::IsInitialized() const {

  return true;
}

void VehicleBrand::Swap(VehicleBrand* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VehicleBrand::InternalSwap(VehicleBrand* other) {
  std::swap(brandid_, other->brandid_);
  std::swap(confidence_, other->confidence_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VehicleBrand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VehicleBrand_descriptor_;
  metadata.reflection = VehicleBrand_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VehicleBrand

// optional int32 BrandId = 1;
void VehicleBrand::clear_brandid() {
  brandid_ = 0;
}
 ::google::protobuf::int32 VehicleBrand::brandid() const {
  // @@protoc_insertion_point(field_get:dg.apps.VehicleBrand.BrandId)
  return brandid_;
}
 void VehicleBrand::set_brandid(::google::protobuf::int32 value) {
  
  brandid_ = value;
  // @@protoc_insertion_point(field_set:dg.apps.VehicleBrand.BrandId)
}

// optional float Confidence = 2;
void VehicleBrand::clear_confidence() {
  confidence_ = 0;
}
 float VehicleBrand::confidence() const {
  // @@protoc_insertion_point(field_get:dg.apps.VehicleBrand.Confidence)
  return confidence_;
}
 void VehicleBrand::set_confidence(float value) {
  
  confidence_ = value;
  // @@protoc_insertion_point(field_set:dg.apps.VehicleBrand.Confidence)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VehiclePlate::kBoxFieldNumber;
const int VehiclePlate::kPlateTypeFieldNumber;
const int VehiclePlate::kPlateNumFieldNumber;
const int VehiclePlate::kPlateColorFieldNumber;
const int VehiclePlate::kConfidenceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VehiclePlate::VehiclePlate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dg.apps.VehiclePlate)
}

void VehiclePlate::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  box_ = const_cast< ::dg::apps::Cutboard*>(&::dg::apps::Cutboard::default_instance());
  platecolor_ = const_cast< ::dg::apps::Color*>(&::dg::apps::Color::default_instance());
}

VehiclePlate::VehiclePlate(const VehiclePlate& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dg.apps.VehiclePlate)
}

void VehiclePlate::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  box_ = NULL;
  platetype_ = 0;
  platenum_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  platecolor_ = NULL;
  confidence_ = 0;
}

VehiclePlate::~VehiclePlate() {
  // @@protoc_insertion_point(destructor:dg.apps.VehiclePlate)
  SharedDtor();
}

void VehiclePlate::SharedDtor() {
  platenum_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete box_;
    delete platecolor_;
  }
}

void VehiclePlate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VehiclePlate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VehiclePlate_descriptor_;
}

const VehiclePlate& VehiclePlate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_witness_2eproto();
  return *default_instance_;
}

VehiclePlate* VehiclePlate::default_instance_ = NULL;

VehiclePlate* VehiclePlate::New(::google::protobuf::Arena* arena) const {
  VehiclePlate* n = new VehiclePlate;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VehiclePlate::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<VehiclePlate*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(platetype_, confidence_);
  if (GetArenaNoVirtual() == NULL && box_ != NULL) delete box_;
  box_ = NULL;
  platenum_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && platecolor_ != NULL) delete platecolor_;
  platecolor_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool VehiclePlate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dg.apps.VehiclePlate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .dg.apps.Cutboard Box = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_box()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_PlateType;
        break;
      }

      // optional int32 PlateType = 2;
      case 2: {
        if (tag == 16) {
         parse_PlateType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &platetype_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_PlateNum;
        break;
      }

      // optional string PlateNum = 3;
      case 3: {
        if (tag == 26) {
         parse_PlateNum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_platenum()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->platenum().data(), this->platenum().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dg.apps.VehiclePlate.PlateNum"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_PlateColor;
        break;
      }

      // optional .dg.apps.Color PlateColor = 4;
      case 4: {
        if (tag == 34) {
         parse_PlateColor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_platecolor()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_Confidence;
        break;
      }

      // optional float Confidence = 5;
      case 5: {
        if (tag == 45) {
         parse_Confidence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &confidence_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dg.apps.VehiclePlate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dg.apps.VehiclePlate)
  return false;
#undef DO_
}

void VehiclePlate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dg.apps.VehiclePlate)
  // optional .dg.apps.Cutboard Box = 1;
  if (this->has_box()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->box_, output);
  }

  // optional int32 PlateType = 2;
  if (this->platetype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->platetype(), output);
  }

  // optional string PlateNum = 3;
  if (this->platenum().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->platenum().data(), this->platenum().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.apps.VehiclePlate.PlateNum");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->platenum(), output);
  }

  // optional .dg.apps.Color PlateColor = 4;
  if (this->has_platecolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->platecolor_, output);
  }

  // optional float Confidence = 5;
  if (this->confidence() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->confidence(), output);
  }

  // @@protoc_insertion_point(serialize_end:dg.apps.VehiclePlate)
}

::google::protobuf::uint8* VehiclePlate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dg.apps.VehiclePlate)
  // optional .dg.apps.Cutboard Box = 1;
  if (this->has_box()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->box_, target);
  }

  // optional int32 PlateType = 2;
  if (this->platetype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->platetype(), target);
  }

  // optional string PlateNum = 3;
  if (this->platenum().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->platenum().data(), this->platenum().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.apps.VehiclePlate.PlateNum");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->platenum(), target);
  }

  // optional .dg.apps.Color PlateColor = 4;
  if (this->has_platecolor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, *this->platecolor_, target);
  }

  // optional float Confidence = 5;
  if (this->confidence() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->confidence(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:dg.apps.VehiclePlate)
  return target;
}

int VehiclePlate::ByteSize() const {
  int total_size = 0;

  // optional .dg.apps.Cutboard Box = 1;
  if (this->has_box()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->box_);
  }

  // optional int32 PlateType = 2;
  if (this->platetype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->platetype());
  }

  // optional string PlateNum = 3;
  if (this->platenum().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->platenum());
  }

  // optional .dg.apps.Color PlateColor = 4;
  if (this->has_platecolor()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->platecolor_);
  }

  // optional float Confidence = 5;
  if (this->confidence() != 0) {
    total_size += 1 + 4;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VehiclePlate::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const VehiclePlate* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const VehiclePlate>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VehiclePlate::MergeFrom(const VehiclePlate& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_box()) {
    mutable_box()->::dg::apps::Cutboard::MergeFrom(from.box());
  }
  if (from.platetype() != 0) {
    set_platetype(from.platetype());
  }
  if (from.platenum().size() > 0) {

    platenum_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.platenum_);
  }
  if (from.has_platecolor()) {
    mutable_platecolor()->::dg::apps::Color::MergeFrom(from.platecolor());
  }
  if (from.confidence() != 0) {
    set_confidence(from.confidence());
  }
}

void VehiclePlate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehiclePlate::CopyFrom(const VehiclePlate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehiclePlate::IsInitialized() const {

  return true;
}

void VehiclePlate::Swap(VehiclePlate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VehiclePlate::InternalSwap(VehiclePlate* other) {
  std::swap(box_, other->box_);
  std::swap(platetype_, other->platetype_);
  platenum_.Swap(&other->platenum_);
  std::swap(platecolor_, other->platecolor_);
  std::swap(confidence_, other->confidence_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VehiclePlate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VehiclePlate_descriptor_;
  metadata.reflection = VehiclePlate_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VehiclePlate

// optional .dg.apps.Cutboard Box = 1;
bool VehiclePlate::has_box() const {
  return !_is_default_instance_ && box_ != NULL;
}
void VehiclePlate::clear_box() {
  if (GetArenaNoVirtual() == NULL && box_ != NULL) delete box_;
  box_ = NULL;
}
const ::dg::apps::Cutboard& VehiclePlate::box() const {
  // @@protoc_insertion_point(field_get:dg.apps.VehiclePlate.Box)
  return box_ != NULL ? *box_ : *default_instance_->box_;
}
::dg::apps::Cutboard* VehiclePlate::mutable_box() {
  
  if (box_ == NULL) {
    box_ = new ::dg::apps::Cutboard;
  }
  // @@protoc_insertion_point(field_mutable:dg.apps.VehiclePlate.Box)
  return box_;
}
::dg::apps::Cutboard* VehiclePlate::release_box() {
  
  ::dg::apps::Cutboard* temp = box_;
  box_ = NULL;
  return temp;
}
void VehiclePlate::set_allocated_box(::dg::apps::Cutboard* box) {
  delete box_;
  box_ = box;
  if (box) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dg.apps.VehiclePlate.Box)
}

// optional int32 PlateType = 2;
void VehiclePlate::clear_platetype() {
  platetype_ = 0;
}
 ::google::protobuf::int32 VehiclePlate::platetype() const {
  // @@protoc_insertion_point(field_get:dg.apps.VehiclePlate.PlateType)
  return platetype_;
}
 void VehiclePlate::set_platetype(::google::protobuf::int32 value) {
  
  platetype_ = value;
  // @@protoc_insertion_point(field_set:dg.apps.VehiclePlate.PlateType)
}

// optional string PlateNum = 3;
void VehiclePlate::clear_platenum() {
  platenum_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& VehiclePlate::platenum() const {
  // @@protoc_insertion_point(field_get:dg.apps.VehiclePlate.PlateNum)
  return platenum_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void VehiclePlate::set_platenum(const ::std::string& value) {
  
  platenum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.apps.VehiclePlate.PlateNum)
}
 void VehiclePlate::set_platenum(const char* value) {
  
  platenum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.apps.VehiclePlate.PlateNum)
}
 void VehiclePlate::set_platenum(const char* value, size_t size) {
  
  platenum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.apps.VehiclePlate.PlateNum)
}
 ::std::string* VehiclePlate::mutable_platenum() {
  
  // @@protoc_insertion_point(field_mutable:dg.apps.VehiclePlate.PlateNum)
  return platenum_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* VehiclePlate::release_platenum() {
  
  return platenum_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void VehiclePlate::set_allocated_platenum(::std::string* platenum) {
  if (platenum != NULL) {
    
  } else {
    
  }
  platenum_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), platenum);
  // @@protoc_insertion_point(field_set_allocated:dg.apps.VehiclePlate.PlateNum)
}

// optional .dg.apps.Color PlateColor = 4;
bool VehiclePlate::has_platecolor() const {
  return !_is_default_instance_ && platecolor_ != NULL;
}
void VehiclePlate::clear_platecolor() {
  if (GetArenaNoVirtual() == NULL && platecolor_ != NULL) delete platecolor_;
  platecolor_ = NULL;
}
const ::dg::apps::Color& VehiclePlate::platecolor() const {
  // @@protoc_insertion_point(field_get:dg.apps.VehiclePlate.PlateColor)
  return platecolor_ != NULL ? *platecolor_ : *default_instance_->platecolor_;
}
::dg::apps::Color* VehiclePlate::mutable_platecolor() {
  
  if (platecolor_ == NULL) {
    platecolor_ = new ::dg::apps::Color;
  }
  // @@protoc_insertion_point(field_mutable:dg.apps.VehiclePlate.PlateColor)
  return platecolor_;
}
::dg::apps::Color* VehiclePlate::release_platecolor() {
  
  ::dg::apps::Color* temp = platecolor_;
  platecolor_ = NULL;
  return temp;
}
void VehiclePlate::set_allocated_platecolor(::dg::apps::Color* platecolor) {
  delete platecolor_;
  platecolor_ = platecolor;
  if (platecolor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dg.apps.VehiclePlate.PlateColor)
}

// optional float Confidence = 5;
void VehiclePlate::clear_confidence() {
  confidence_ = 0;
}
 float VehiclePlate::confidence() const {
  // @@protoc_insertion_point(field_get:dg.apps.VehiclePlate.Confidence)
  return confidence_;
}
 void VehiclePlate::set_confidence(float value) {
  
  confidence_ = value;
  // @@protoc_insertion_point(field_set:dg.apps.VehiclePlate.Confidence)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VehicleSymbol::kBoxFieldNumber;
const int VehicleSymbol::kSymbolTypeFieldNumber;
const int VehicleSymbol::kConfidenceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VehicleSymbol::VehicleSymbol()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dg.apps.VehicleSymbol)
}

void VehicleSymbol::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  box_ = const_cast< ::dg::apps::Cutboard*>(&::dg::apps::Cutboard::default_instance());
}

VehicleSymbol::VehicleSymbol(const VehicleSymbol& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dg.apps.VehicleSymbol)
}

void VehicleSymbol::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  box_ = NULL;
  symboltype_ = 0;
  confidence_ = 0;
}

VehicleSymbol::~VehicleSymbol() {
  // @@protoc_insertion_point(destructor:dg.apps.VehicleSymbol)
  SharedDtor();
}

void VehicleSymbol::SharedDtor() {
  if (this != default_instance_) {
    delete box_;
  }
}

void VehicleSymbol::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VehicleSymbol::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VehicleSymbol_descriptor_;
}

const VehicleSymbol& VehicleSymbol::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_witness_2eproto();
  return *default_instance_;
}

VehicleSymbol* VehicleSymbol::default_instance_ = NULL;

VehicleSymbol* VehicleSymbol::New(::google::protobuf::Arena* arena) const {
  VehicleSymbol* n = new VehicleSymbol;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VehicleSymbol::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<VehicleSymbol*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(symboltype_, confidence_);
  if (GetArenaNoVirtual() == NULL && box_ != NULL) delete box_;
  box_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool VehicleSymbol::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dg.apps.VehicleSymbol)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .dg.apps.Cutboard Box = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_box()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_SymbolType;
        break;
      }

      // optional int32 SymbolType = 2;
      case 2: {
        if (tag == 16) {
         parse_SymbolType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &symboltype_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_Confidence;
        break;
      }

      // optional float Confidence = 3;
      case 3: {
        if (tag == 29) {
         parse_Confidence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &confidence_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dg.apps.VehicleSymbol)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dg.apps.VehicleSymbol)
  return false;
#undef DO_
}

void VehicleSymbol::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dg.apps.VehicleSymbol)
  // optional .dg.apps.Cutboard Box = 1;
  if (this->has_box()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->box_, output);
  }

  // optional int32 SymbolType = 2;
  if (this->symboltype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->symboltype(), output);
  }

  // optional float Confidence = 3;
  if (this->confidence() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->confidence(), output);
  }

  // @@protoc_insertion_point(serialize_end:dg.apps.VehicleSymbol)
}

::google::protobuf::uint8* VehicleSymbol::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dg.apps.VehicleSymbol)
  // optional .dg.apps.Cutboard Box = 1;
  if (this->has_box()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->box_, target);
  }

  // optional int32 SymbolType = 2;
  if (this->symboltype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->symboltype(), target);
  }

  // optional float Confidence = 3;
  if (this->confidence() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->confidence(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:dg.apps.VehicleSymbol)
  return target;
}

int VehicleSymbol::ByteSize() const {
  int total_size = 0;

  // optional .dg.apps.Cutboard Box = 1;
  if (this->has_box()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->box_);
  }

  // optional int32 SymbolType = 2;
  if (this->symboltype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->symboltype());
  }

  // optional float Confidence = 3;
  if (this->confidence() != 0) {
    total_size += 1 + 4;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VehicleSymbol::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const VehicleSymbol* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const VehicleSymbol>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VehicleSymbol::MergeFrom(const VehicleSymbol& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_box()) {
    mutable_box()->::dg::apps::Cutboard::MergeFrom(from.box());
  }
  if (from.symboltype() != 0) {
    set_symboltype(from.symboltype());
  }
  if (from.confidence() != 0) {
    set_confidence(from.confidence());
  }
}

void VehicleSymbol::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehicleSymbol::CopyFrom(const VehicleSymbol& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleSymbol::IsInitialized() const {

  return true;
}

void VehicleSymbol::Swap(VehicleSymbol* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VehicleSymbol::InternalSwap(VehicleSymbol* other) {
  std::swap(box_, other->box_);
  std::swap(symboltype_, other->symboltype_);
  std::swap(confidence_, other->confidence_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VehicleSymbol::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VehicleSymbol_descriptor_;
  metadata.reflection = VehicleSymbol_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VehicleSymbol

// optional .dg.apps.Cutboard Box = 1;
bool VehicleSymbol::has_box() const {
  return !_is_default_instance_ && box_ != NULL;
}
void VehicleSymbol::clear_box() {
  if (GetArenaNoVirtual() == NULL && box_ != NULL) delete box_;
  box_ = NULL;
}
const ::dg::apps::Cutboard& VehicleSymbol::box() const {
  // @@protoc_insertion_point(field_get:dg.apps.VehicleSymbol.Box)
  return box_ != NULL ? *box_ : *default_instance_->box_;
}
::dg::apps::Cutboard* VehicleSymbol::mutable_box() {
  
  if (box_ == NULL) {
    box_ = new ::dg::apps::Cutboard;
  }
  // @@protoc_insertion_point(field_mutable:dg.apps.VehicleSymbol.Box)
  return box_;
}
::dg::apps::Cutboard* VehicleSymbol::release_box() {
  
  ::dg::apps::Cutboard* temp = box_;
  box_ = NULL;
  return temp;
}
void VehicleSymbol::set_allocated_box(::dg::apps::Cutboard* box) {
  delete box_;
  box_ = box;
  if (box) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dg.apps.VehicleSymbol.Box)
}

// optional int32 SymbolType = 2;
void VehicleSymbol::clear_symboltype() {
  symboltype_ = 0;
}
 ::google::protobuf::int32 VehicleSymbol::symboltype() const {
  // @@protoc_insertion_point(field_get:dg.apps.VehicleSymbol.SymbolType)
  return symboltype_;
}
 void VehicleSymbol::set_symboltype(::google::protobuf::int32 value) {
  
  symboltype_ = value;
  // @@protoc_insertion_point(field_set:dg.apps.VehicleSymbol.SymbolType)
}

// optional float Confidence = 3;
void VehicleSymbol::clear_confidence() {
  confidence_ = 0;
}
 float VehicleSymbol::confidence() const {
  // @@protoc_insertion_point(field_get:dg.apps.VehicleSymbol.Confidence)
  return confidence_;
}
 void VehicleSymbol::set_confidence(float value) {
  
  confidence_ = value;
  // @@protoc_insertion_point(field_set:dg.apps.VehicleSymbol.Confidence)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Feature::kFeatureVectorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Feature::Feature()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dg.apps.Feature)
}

void Feature::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Feature::Feature(const Feature& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dg.apps.Feature)
}

void Feature::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  featurevector_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Feature::~Feature() {
  // @@protoc_insertion_point(destructor:dg.apps.Feature)
  SharedDtor();
}

void Feature::SharedDtor() {
  featurevector_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Feature::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Feature::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Feature_descriptor_;
}

const Feature& Feature::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_witness_2eproto();
  return *default_instance_;
}

Feature* Feature::default_instance_ = NULL;

Feature* Feature::New(::google::protobuf::Arena* arena) const {
  Feature* n = new Feature;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Feature::Clear() {
  featurevector_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Feature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dg.apps.Feature)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes FeatureVector = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_featurevector()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dg.apps.Feature)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dg.apps.Feature)
  return false;
#undef DO_
}

void Feature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dg.apps.Feature)
  // optional bytes FeatureVector = 1;
  if (this->featurevector().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->featurevector(), output);
  }

  // @@protoc_insertion_point(serialize_end:dg.apps.Feature)
}

::google::protobuf::uint8* Feature::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dg.apps.Feature)
  // optional bytes FeatureVector = 1;
  if (this->featurevector().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->featurevector(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:dg.apps.Feature)
  return target;
}

int Feature::ByteSize() const {
  int total_size = 0;

  // optional bytes FeatureVector = 1;
  if (this->featurevector().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->featurevector());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Feature::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Feature* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Feature>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Feature::MergeFrom(const Feature& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.featurevector().size() > 0) {

    featurevector_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.featurevector_);
  }
}

void Feature::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Feature::CopyFrom(const Feature& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Feature::IsInitialized() const {

  return true;
}

void Feature::Swap(Feature* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Feature::InternalSwap(Feature* other) {
  featurevector_.Swap(&other->featurevector_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Feature::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Feature_descriptor_;
  metadata.reflection = Feature_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Feature

// optional bytes FeatureVector = 1;
void Feature::clear_featurevector() {
  featurevector_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Feature::featurevector() const {
  // @@protoc_insertion_point(field_get:dg.apps.Feature.FeatureVector)
  return featurevector_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Feature::set_featurevector(const ::std::string& value) {
  
  featurevector_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.apps.Feature.FeatureVector)
}
 void Feature::set_featurevector(const char* value) {
  
  featurevector_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.apps.Feature.FeatureVector)
}
 void Feature::set_featurevector(const void* value, size_t size) {
  
  featurevector_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.apps.Feature.FeatureVector)
}
 ::std::string* Feature::mutable_featurevector() {
  
  // @@protoc_insertion_point(field_mutable:dg.apps.Feature.FeatureVector)
  return featurevector_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Feature::release_featurevector() {
  
  return featurevector_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Feature::set_allocated_featurevector(::std::string* featurevector) {
  if (featurevector != NULL) {
    
  } else {
    
  }
  featurevector_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), featurevector);
  // @@protoc_insertion_point(field_set_allocated:dg.apps.Feature.FeatureVector)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RecognizeResult::kTypeFieldNumber;
const int RecognizeResult::kBoxFieldNumber;
const int RecognizeResult::kBrandFieldNumber;
const int RecognizeResult::kPlateFieldNumber;
const int RecognizeResult::kColorFieldNumber;
const int RecognizeResult::kFeatureFieldNumber;
const int RecognizeResult::kSymbolsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RecognizeResult::RecognizeResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dg.apps.RecognizeResult)
}

void RecognizeResult::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  box_ = const_cast< ::dg::apps::Cutboard*>(&::dg::apps::Cutboard::default_instance());
  brand_ = const_cast< ::dg::apps::VehicleBrand*>(&::dg::apps::VehicleBrand::default_instance());
  plate_ = const_cast< ::dg::apps::VehiclePlate*>(&::dg::apps::VehiclePlate::default_instance());
  color_ = const_cast< ::dg::apps::Color*>(&::dg::apps::Color::default_instance());
  feature_ = const_cast< ::dg::apps::Feature*>(&::dg::apps::Feature::default_instance());
}

RecognizeResult::RecognizeResult(const RecognizeResult& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dg.apps.RecognizeResult)
}

void RecognizeResult::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  type_ = 0;
  box_ = NULL;
  brand_ = NULL;
  plate_ = NULL;
  color_ = NULL;
  feature_ = NULL;
}

RecognizeResult::~RecognizeResult() {
  // @@protoc_insertion_point(destructor:dg.apps.RecognizeResult)
  SharedDtor();
}

void RecognizeResult::SharedDtor() {
  if (this != default_instance_) {
    delete box_;
    delete brand_;
    delete plate_;
    delete color_;
    delete feature_;
  }
}

void RecognizeResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecognizeResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecognizeResult_descriptor_;
}

const RecognizeResult& RecognizeResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_witness_2eproto();
  return *default_instance_;
}

RecognizeResult* RecognizeResult::default_instance_ = NULL;

RecognizeResult* RecognizeResult::New(::google::protobuf::Arena* arena) const {
  RecognizeResult* n = new RecognizeResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RecognizeResult::Clear() {
  type_ = 0;
  if (GetArenaNoVirtual() == NULL && box_ != NULL) delete box_;
  box_ = NULL;
  if (GetArenaNoVirtual() == NULL && brand_ != NULL) delete brand_;
  brand_ = NULL;
  if (GetArenaNoVirtual() == NULL && plate_ != NULL) delete plate_;
  plate_ = NULL;
  if (GetArenaNoVirtual() == NULL && color_ != NULL) delete color_;
  color_ = NULL;
  if (GetArenaNoVirtual() == NULL && feature_ != NULL) delete feature_;
  feature_ = NULL;
  symbols_.Clear();
}

bool RecognizeResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dg.apps.RecognizeResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .dg.apps.ObjType Type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::dg::apps::ObjType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Box;
        break;
      }

      // optional .dg.apps.Cutboard Box = 2;
      case 2: {
        if (tag == 18) {
         parse_Box:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_box()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Brand;
        break;
      }

      // optional .dg.apps.VehicleBrand Brand = 3;
      case 3: {
        if (tag == 26) {
         parse_Brand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_brand()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_Plate;
        break;
      }

      // optional .dg.apps.VehiclePlate Plate = 4;
      case 4: {
        if (tag == 34) {
         parse_Plate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_plate()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_Color;
        break;
      }

      // optional .dg.apps.Color Color = 5;
      case 5: {
        if (tag == 42) {
         parse_Color:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_color()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_Feature;
        break;
      }

      // optional .dg.apps.Feature Feature = 6;
      case 6: {
        if (tag == 50) {
         parse_Feature:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_feature()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_Symbols;
        break;
      }

      // repeated .dg.apps.VehicleSymbol Symbols = 7;
      case 7: {
        if (tag == 58) {
         parse_Symbols:
          DO_(input->IncrementRecursionDepth());
         parse_loop_Symbols:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_symbols()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_loop_Symbols;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dg.apps.RecognizeResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dg.apps.RecognizeResult)
  return false;
#undef DO_
}

void RecognizeResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dg.apps.RecognizeResult)
  // optional .dg.apps.ObjType Type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .dg.apps.Cutboard Box = 2;
  if (this->has_box()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->box_, output);
  }

  // optional .dg.apps.VehicleBrand Brand = 3;
  if (this->has_brand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->brand_, output);
  }

  // optional .dg.apps.VehiclePlate Plate = 4;
  if (this->has_plate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->plate_, output);
  }

  // optional .dg.apps.Color Color = 5;
  if (this->has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->color_, output);
  }

  // optional .dg.apps.Feature Feature = 6;
  if (this->has_feature()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->feature_, output);
  }

  // repeated .dg.apps.VehicleSymbol Symbols = 7;
  for (unsigned int i = 0, n = this->symbols_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->symbols(i), output);
  }

  // @@protoc_insertion_point(serialize_end:dg.apps.RecognizeResult)
}

::google::protobuf::uint8* RecognizeResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dg.apps.RecognizeResult)
  // optional .dg.apps.ObjType Type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .dg.apps.Cutboard Box = 2;
  if (this->has_box()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->box_, target);
  }

  // optional .dg.apps.VehicleBrand Brand = 3;
  if (this->has_brand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->brand_, target);
  }

  // optional .dg.apps.VehiclePlate Plate = 4;
  if (this->has_plate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, *this->plate_, target);
  }

  // optional .dg.apps.Color Color = 5;
  if (this->has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, *this->color_, target);
  }

  // optional .dg.apps.Feature Feature = 6;
  if (this->has_feature()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, *this->feature_, target);
  }

  // repeated .dg.apps.VehicleSymbol Symbols = 7;
  for (unsigned int i = 0, n = this->symbols_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->symbols(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:dg.apps.RecognizeResult)
  return target;
}

int RecognizeResult::ByteSize() const {
  int total_size = 0;

  // optional .dg.apps.ObjType Type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // optional .dg.apps.Cutboard Box = 2;
  if (this->has_box()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->box_);
  }

  // optional .dg.apps.VehicleBrand Brand = 3;
  if (this->has_brand()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->brand_);
  }

  // optional .dg.apps.VehiclePlate Plate = 4;
  if (this->has_plate()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->plate_);
  }

  // optional .dg.apps.Color Color = 5;
  if (this->has_color()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->color_);
  }

  // optional .dg.apps.Feature Feature = 6;
  if (this->has_feature()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->feature_);
  }

  // repeated .dg.apps.VehicleSymbol Symbols = 7;
  total_size += 1 * this->symbols_size();
  for (int i = 0; i < this->symbols_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->symbols(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecognizeResult::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RecognizeResult* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RecognizeResult>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RecognizeResult::MergeFrom(const RecognizeResult& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  symbols_.MergeFrom(from.symbols_);
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.has_box()) {
    mutable_box()->::dg::apps::Cutboard::MergeFrom(from.box());
  }
  if (from.has_brand()) {
    mutable_brand()->::dg::apps::VehicleBrand::MergeFrom(from.brand());
  }
  if (from.has_plate()) {
    mutable_plate()->::dg::apps::VehiclePlate::MergeFrom(from.plate());
  }
  if (from.has_color()) {
    mutable_color()->::dg::apps::Color::MergeFrom(from.color());
  }
  if (from.has_feature()) {
    mutable_feature()->::dg::apps::Feature::MergeFrom(from.feature());
  }
}

void RecognizeResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecognizeResult::CopyFrom(const RecognizeResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecognizeResult::IsInitialized() const {

  return true;
}

void RecognizeResult::Swap(RecognizeResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RecognizeResult::InternalSwap(RecognizeResult* other) {
  std::swap(type_, other->type_);
  std::swap(box_, other->box_);
  std::swap(brand_, other->brand_);
  std::swap(plate_, other->plate_);
  std::swap(color_, other->color_);
  std::swap(feature_, other->feature_);
  symbols_.UnsafeArenaSwap(&other->symbols_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RecognizeResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecognizeResult_descriptor_;
  metadata.reflection = RecognizeResult_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RecognizeResult

// optional .dg.apps.ObjType Type = 1;
void RecognizeResult::clear_type() {
  type_ = 0;
}
 ::dg::apps::ObjType RecognizeResult::type() const {
  // @@protoc_insertion_point(field_get:dg.apps.RecognizeResult.Type)
  return static_cast< ::dg::apps::ObjType >(type_);
}
 void RecognizeResult::set_type(::dg::apps::ObjType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:dg.apps.RecognizeResult.Type)
}

// optional .dg.apps.Cutboard Box = 2;
bool RecognizeResult::has_box() const {
  return !_is_default_instance_ && box_ != NULL;
}
void RecognizeResult::clear_box() {
  if (GetArenaNoVirtual() == NULL && box_ != NULL) delete box_;
  box_ = NULL;
}
const ::dg::apps::Cutboard& RecognizeResult::box() const {
  // @@protoc_insertion_point(field_get:dg.apps.RecognizeResult.Box)
  return box_ != NULL ? *box_ : *default_instance_->box_;
}
::dg::apps::Cutboard* RecognizeResult::mutable_box() {
  
  if (box_ == NULL) {
    box_ = new ::dg::apps::Cutboard;
  }
  // @@protoc_insertion_point(field_mutable:dg.apps.RecognizeResult.Box)
  return box_;
}
::dg::apps::Cutboard* RecognizeResult::release_box() {
  
  ::dg::apps::Cutboard* temp = box_;
  box_ = NULL;
  return temp;
}
void RecognizeResult::set_allocated_box(::dg::apps::Cutboard* box) {
  delete box_;
  box_ = box;
  if (box) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dg.apps.RecognizeResult.Box)
}

// optional .dg.apps.VehicleBrand Brand = 3;
bool RecognizeResult::has_brand() const {
  return !_is_default_instance_ && brand_ != NULL;
}
void RecognizeResult::clear_brand() {
  if (GetArenaNoVirtual() == NULL && brand_ != NULL) delete brand_;
  brand_ = NULL;
}
const ::dg::apps::VehicleBrand& RecognizeResult::brand() const {
  // @@protoc_insertion_point(field_get:dg.apps.RecognizeResult.Brand)
  return brand_ != NULL ? *brand_ : *default_instance_->brand_;
}
::dg::apps::VehicleBrand* RecognizeResult::mutable_brand() {
  
  if (brand_ == NULL) {
    brand_ = new ::dg::apps::VehicleBrand;
  }
  // @@protoc_insertion_point(field_mutable:dg.apps.RecognizeResult.Brand)
  return brand_;
}
::dg::apps::VehicleBrand* RecognizeResult::release_brand() {
  
  ::dg::apps::VehicleBrand* temp = brand_;
  brand_ = NULL;
  return temp;
}
void RecognizeResult::set_allocated_brand(::dg::apps::VehicleBrand* brand) {
  delete brand_;
  brand_ = brand;
  if (brand) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dg.apps.RecognizeResult.Brand)
}

// optional .dg.apps.VehiclePlate Plate = 4;
bool RecognizeResult::has_plate() const {
  return !_is_default_instance_ && plate_ != NULL;
}
void RecognizeResult::clear_plate() {
  if (GetArenaNoVirtual() == NULL && plate_ != NULL) delete plate_;
  plate_ = NULL;
}
const ::dg::apps::VehiclePlate& RecognizeResult::plate() const {
  // @@protoc_insertion_point(field_get:dg.apps.RecognizeResult.Plate)
  return plate_ != NULL ? *plate_ : *default_instance_->plate_;
}
::dg::apps::VehiclePlate* RecognizeResult::mutable_plate() {
  
  if (plate_ == NULL) {
    plate_ = new ::dg::apps::VehiclePlate;
  }
  // @@protoc_insertion_point(field_mutable:dg.apps.RecognizeResult.Plate)
  return plate_;
}
::dg::apps::VehiclePlate* RecognizeResult::release_plate() {
  
  ::dg::apps::VehiclePlate* temp = plate_;
  plate_ = NULL;
  return temp;
}
void RecognizeResult::set_allocated_plate(::dg::apps::VehiclePlate* plate) {
  delete plate_;
  plate_ = plate;
  if (plate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dg.apps.RecognizeResult.Plate)
}

// optional .dg.apps.Color Color = 5;
bool RecognizeResult::has_color() const {
  return !_is_default_instance_ && color_ != NULL;
}
void RecognizeResult::clear_color() {
  if (GetArenaNoVirtual() == NULL && color_ != NULL) delete color_;
  color_ = NULL;
}
const ::dg::apps::Color& RecognizeResult::color() const {
  // @@protoc_insertion_point(field_get:dg.apps.RecognizeResult.Color)
  return color_ != NULL ? *color_ : *default_instance_->color_;
}
::dg::apps::Color* RecognizeResult::mutable_color() {
  
  if (color_ == NULL) {
    color_ = new ::dg::apps::Color;
  }
  // @@protoc_insertion_point(field_mutable:dg.apps.RecognizeResult.Color)
  return color_;
}
::dg::apps::Color* RecognizeResult::release_color() {
  
  ::dg::apps::Color* temp = color_;
  color_ = NULL;
  return temp;
}
void RecognizeResult::set_allocated_color(::dg::apps::Color* color) {
  delete color_;
  color_ = color;
  if (color) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dg.apps.RecognizeResult.Color)
}

// optional .dg.apps.Feature Feature = 6;
bool RecognizeResult::has_feature() const {
  return !_is_default_instance_ && feature_ != NULL;
}
void RecognizeResult::clear_feature() {
  if (GetArenaNoVirtual() == NULL && feature_ != NULL) delete feature_;
  feature_ = NULL;
}
const ::dg::apps::Feature& RecognizeResult::feature() const {
  // @@protoc_insertion_point(field_get:dg.apps.RecognizeResult.Feature)
  return feature_ != NULL ? *feature_ : *default_instance_->feature_;
}
::dg::apps::Feature* RecognizeResult::mutable_feature() {
  
  if (feature_ == NULL) {
    feature_ = new ::dg::apps::Feature;
  }
  // @@protoc_insertion_point(field_mutable:dg.apps.RecognizeResult.Feature)
  return feature_;
}
::dg::apps::Feature* RecognizeResult::release_feature() {
  
  ::dg::apps::Feature* temp = feature_;
  feature_ = NULL;
  return temp;
}
void RecognizeResult::set_allocated_feature(::dg::apps::Feature* feature) {
  delete feature_;
  feature_ = feature;
  if (feature) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dg.apps.RecognizeResult.Feature)
}

// repeated .dg.apps.VehicleSymbol Symbols = 7;
int RecognizeResult::symbols_size() const {
  return symbols_.size();
}
void RecognizeResult::clear_symbols() {
  symbols_.Clear();
}
const ::dg::apps::VehicleSymbol& RecognizeResult::symbols(int index) const {
  // @@protoc_insertion_point(field_get:dg.apps.RecognizeResult.Symbols)
  return symbols_.Get(index);
}
::dg::apps::VehicleSymbol* RecognizeResult::mutable_symbols(int index) {
  // @@protoc_insertion_point(field_mutable:dg.apps.RecognizeResult.Symbols)
  return symbols_.Mutable(index);
}
::dg::apps::VehicleSymbol* RecognizeResult::add_symbols() {
  // @@protoc_insertion_point(field_add:dg.apps.RecognizeResult.Symbols)
  return symbols_.Add();
}
::google::protobuf::RepeatedPtrField< ::dg::apps::VehicleSymbol >*
RecognizeResult::mutable_symbols() {
  // @@protoc_insertion_point(field_mutable_list:dg.apps.RecognizeResult.Symbols)
  return &symbols_;
}
const ::google::protobuf::RepeatedPtrField< ::dg::apps::VehicleSymbol >&
RecognizeResult::symbols() const {
  // @@protoc_insertion_point(field_list:dg.apps.RecognizeResult.Symbols)
  return symbols_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RecognizeResponse::kSessionIdFieldNumber;
const int RecognizeResponse::kStatusFieldNumber;
const int RecognizeResponse::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RecognizeResponse::RecognizeResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dg.apps.RecognizeResponse)
}

void RecognizeResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  status_ = const_cast< ::dg::apps::RecognizeStatus*>(&::dg::apps::RecognizeStatus::default_instance());
  result_ = const_cast< ::dg::apps::RecognizeResult*>(&::dg::apps::RecognizeResult::default_instance());
}

RecognizeResponse::RecognizeResponse(const RecognizeResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dg.apps.RecognizeResponse)
}

void RecognizeResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  sessionid_ = GOOGLE_LONGLONG(0);
  status_ = NULL;
  result_ = NULL;
}

RecognizeResponse::~RecognizeResponse() {
  // @@protoc_insertion_point(destructor:dg.apps.RecognizeResponse)
  SharedDtor();
}

void RecognizeResponse::SharedDtor() {
  if (this != default_instance_) {
    delete status_;
    delete result_;
  }
}

void RecognizeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecognizeResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecognizeResponse_descriptor_;
}

const RecognizeResponse& RecognizeResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_witness_2eproto();
  return *default_instance_;
}

RecognizeResponse* RecognizeResponse::default_instance_ = NULL;

RecognizeResponse* RecognizeResponse::New(::google::protobuf::Arena* arena) const {
  RecognizeResponse* n = new RecognizeResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RecognizeResponse::Clear() {
  sessionid_ = GOOGLE_LONGLONG(0);
  if (GetArenaNoVirtual() == NULL && status_ != NULL) delete status_;
  status_ = NULL;
  if (GetArenaNoVirtual() == NULL && result_ != NULL) delete result_;
  result_ = NULL;
}

bool RecognizeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dg.apps.RecognizeResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 SessionId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sessionid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Status;
        break;
      }

      // optional .dg.apps.RecognizeStatus Status = 2;
      case 2: {
        if (tag == 18) {
         parse_Status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Result;
        break;
      }

      // optional .dg.apps.RecognizeResult Result = 3;
      case 3: {
        if (tag == 26) {
         parse_Result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dg.apps.RecognizeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dg.apps.RecognizeResponse)
  return false;
#undef DO_
}

void RecognizeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dg.apps.RecognizeResponse)
  // optional int64 SessionId = 1;
  if (this->sessionid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->sessionid(), output);
  }

  // optional .dg.apps.RecognizeStatus Status = 2;
  if (this->has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->status_, output);
  }

  // optional .dg.apps.RecognizeResult Result = 3;
  if (this->has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->result_, output);
  }

  // @@protoc_insertion_point(serialize_end:dg.apps.RecognizeResponse)
}

::google::protobuf::uint8* RecognizeResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dg.apps.RecognizeResponse)
  // optional int64 SessionId = 1;
  if (this->sessionid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->sessionid(), target);
  }

  // optional .dg.apps.RecognizeStatus Status = 2;
  if (this->has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->status_, target);
  }

  // optional .dg.apps.RecognizeResult Result = 3;
  if (this->has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->result_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:dg.apps.RecognizeResponse)
  return target;
}

int RecognizeResponse::ByteSize() const {
  int total_size = 0;

  // optional int64 SessionId = 1;
  if (this->sessionid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->sessionid());
  }

  // optional .dg.apps.RecognizeStatus Status = 2;
  if (this->has_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->status_);
  }

  // optional .dg.apps.RecognizeResult Result = 3;
  if (this->has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->result_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecognizeResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RecognizeResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RecognizeResponse>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RecognizeResponse::MergeFrom(const RecognizeResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.sessionid() != 0) {
    set_sessionid(from.sessionid());
  }
  if (from.has_status()) {
    mutable_status()->::dg::apps::RecognizeStatus::MergeFrom(from.status());
  }
  if (from.has_result()) {
    mutable_result()->::dg::apps::RecognizeResult::MergeFrom(from.result());
  }
}

void RecognizeResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecognizeResponse::CopyFrom(const RecognizeResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecognizeResponse::IsInitialized() const {

  return true;
}

void RecognizeResponse::Swap(RecognizeResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RecognizeResponse::InternalSwap(RecognizeResponse* other) {
  std::swap(sessionid_, other->sessionid_);
  std::swap(status_, other->status_);
  std::swap(result_, other->result_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RecognizeResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecognizeResponse_descriptor_;
  metadata.reflection = RecognizeResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RecognizeResponse

// optional int64 SessionId = 1;
void RecognizeResponse::clear_sessionid() {
  sessionid_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 RecognizeResponse::sessionid() const {
  // @@protoc_insertion_point(field_get:dg.apps.RecognizeResponse.SessionId)
  return sessionid_;
}
 void RecognizeResponse::set_sessionid(::google::protobuf::int64 value) {
  
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:dg.apps.RecognizeResponse.SessionId)
}

// optional .dg.apps.RecognizeStatus Status = 2;
bool RecognizeResponse::has_status() const {
  return !_is_default_instance_ && status_ != NULL;
}
void RecognizeResponse::clear_status() {
  if (GetArenaNoVirtual() == NULL && status_ != NULL) delete status_;
  status_ = NULL;
}
const ::dg::apps::RecognizeStatus& RecognizeResponse::status() const {
  // @@protoc_insertion_point(field_get:dg.apps.RecognizeResponse.Status)
  return status_ != NULL ? *status_ : *default_instance_->status_;
}
::dg::apps::RecognizeStatus* RecognizeResponse::mutable_status() {
  
  if (status_ == NULL) {
    status_ = new ::dg::apps::RecognizeStatus;
  }
  // @@protoc_insertion_point(field_mutable:dg.apps.RecognizeResponse.Status)
  return status_;
}
::dg::apps::RecognizeStatus* RecognizeResponse::release_status() {
  
  ::dg::apps::RecognizeStatus* temp = status_;
  status_ = NULL;
  return temp;
}
void RecognizeResponse::set_allocated_status(::dg::apps::RecognizeStatus* status) {
  delete status_;
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dg.apps.RecognizeResponse.Status)
}

// optional .dg.apps.RecognizeResult Result = 3;
bool RecognizeResponse::has_result() const {
  return !_is_default_instance_ && result_ != NULL;
}
void RecognizeResponse::clear_result() {
  if (GetArenaNoVirtual() == NULL && result_ != NULL) delete result_;
  result_ = NULL;
}
const ::dg::apps::RecognizeResult& RecognizeResponse::result() const {
  // @@protoc_insertion_point(field_get:dg.apps.RecognizeResponse.Result)
  return result_ != NULL ? *result_ : *default_instance_->result_;
}
::dg::apps::RecognizeResult* RecognizeResponse::mutable_result() {
  
  if (result_ == NULL) {
    result_ = new ::dg::apps::RecognizeResult;
  }
  // @@protoc_insertion_point(field_mutable:dg.apps.RecognizeResponse.Result)
  return result_;
}
::dg::apps::RecognizeResult* RecognizeResponse::release_result() {
  
  ::dg::apps::RecognizeResult* temp = result_;
  result_ = NULL;
  return temp;
}
void RecognizeResponse::set_allocated_result(::dg::apps::RecognizeResult* result) {
  delete result_;
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dg.apps.RecognizeResponse.Result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BatchRecognizeRequest::kRequestsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BatchRecognizeRequest::BatchRecognizeRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dg.apps.BatchRecognizeRequest)
}

void BatchRecognizeRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

BatchRecognizeRequest::BatchRecognizeRequest(const BatchRecognizeRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dg.apps.BatchRecognizeRequest)
}

void BatchRecognizeRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

BatchRecognizeRequest::~BatchRecognizeRequest() {
  // @@protoc_insertion_point(destructor:dg.apps.BatchRecognizeRequest)
  SharedDtor();
}

void BatchRecognizeRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BatchRecognizeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BatchRecognizeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BatchRecognizeRequest_descriptor_;
}

const BatchRecognizeRequest& BatchRecognizeRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_witness_2eproto();
  return *default_instance_;
}

BatchRecognizeRequest* BatchRecognizeRequest::default_instance_ = NULL;

BatchRecognizeRequest* BatchRecognizeRequest::New(::google::protobuf::Arena* arena) const {
  BatchRecognizeRequest* n = new BatchRecognizeRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BatchRecognizeRequest::Clear() {
  requests_.Clear();
}

bool BatchRecognizeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dg.apps.BatchRecognizeRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .dg.apps.RecognizeRequest Requests = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_Requests:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_requests()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_Requests;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dg.apps.BatchRecognizeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dg.apps.BatchRecognizeRequest)
  return false;
#undef DO_
}

void BatchRecognizeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dg.apps.BatchRecognizeRequest)
  // repeated .dg.apps.RecognizeRequest Requests = 1;
  for (unsigned int i = 0, n = this->requests_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->requests(i), output);
  }

  // @@protoc_insertion_point(serialize_end:dg.apps.BatchRecognizeRequest)
}

::google::protobuf::uint8* BatchRecognizeRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dg.apps.BatchRecognizeRequest)
  // repeated .dg.apps.RecognizeRequest Requests = 1;
  for (unsigned int i = 0, n = this->requests_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->requests(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:dg.apps.BatchRecognizeRequest)
  return target;
}

int BatchRecognizeRequest::ByteSize() const {
  int total_size = 0;

  // repeated .dg.apps.RecognizeRequest Requests = 1;
  total_size += 1 * this->requests_size();
  for (int i = 0; i < this->requests_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->requests(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BatchRecognizeRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BatchRecognizeRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BatchRecognizeRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BatchRecognizeRequest::MergeFrom(const BatchRecognizeRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  requests_.MergeFrom(from.requests_);
}

void BatchRecognizeRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatchRecognizeRequest::CopyFrom(const BatchRecognizeRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchRecognizeRequest::IsInitialized() const {

  return true;
}

void BatchRecognizeRequest::Swap(BatchRecognizeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BatchRecognizeRequest::InternalSwap(BatchRecognizeRequest* other) {
  requests_.UnsafeArenaSwap(&other->requests_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BatchRecognizeRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BatchRecognizeRequest_descriptor_;
  metadata.reflection = BatchRecognizeRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BatchRecognizeRequest

// repeated .dg.apps.RecognizeRequest Requests = 1;
int BatchRecognizeRequest::requests_size() const {
  return requests_.size();
}
void BatchRecognizeRequest::clear_requests() {
  requests_.Clear();
}
const ::dg::apps::RecognizeRequest& BatchRecognizeRequest::requests(int index) const {
  // @@protoc_insertion_point(field_get:dg.apps.BatchRecognizeRequest.Requests)
  return requests_.Get(index);
}
::dg::apps::RecognizeRequest* BatchRecognizeRequest::mutable_requests(int index) {
  // @@protoc_insertion_point(field_mutable:dg.apps.BatchRecognizeRequest.Requests)
  return requests_.Mutable(index);
}
::dg::apps::RecognizeRequest* BatchRecognizeRequest::add_requests() {
  // @@protoc_insertion_point(field_add:dg.apps.BatchRecognizeRequest.Requests)
  return requests_.Add();
}
::google::protobuf::RepeatedPtrField< ::dg::apps::RecognizeRequest >*
BatchRecognizeRequest::mutable_requests() {
  // @@protoc_insertion_point(field_mutable_list:dg.apps.BatchRecognizeRequest.Requests)
  return &requests_;
}
const ::google::protobuf::RepeatedPtrField< ::dg::apps::RecognizeRequest >&
BatchRecognizeRequest::requests() const {
  // @@protoc_insertion_point(field_list:dg.apps.BatchRecognizeRequest.Requests)
  return requests_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BatchRecognizeResponse::kReponsesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BatchRecognizeResponse::BatchRecognizeResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dg.apps.BatchRecognizeResponse)
}

void BatchRecognizeResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

BatchRecognizeResponse::BatchRecognizeResponse(const BatchRecognizeResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dg.apps.BatchRecognizeResponse)
}

void BatchRecognizeResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

BatchRecognizeResponse::~BatchRecognizeResponse() {
  // @@protoc_insertion_point(destructor:dg.apps.BatchRecognizeResponse)
  SharedDtor();
}

void BatchRecognizeResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BatchRecognizeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BatchRecognizeResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BatchRecognizeResponse_descriptor_;
}

const BatchRecognizeResponse& BatchRecognizeResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_witness_2eproto();
  return *default_instance_;
}

BatchRecognizeResponse* BatchRecognizeResponse::default_instance_ = NULL;

BatchRecognizeResponse* BatchRecognizeResponse::New(::google::protobuf::Arena* arena) const {
  BatchRecognizeResponse* n = new BatchRecognizeResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BatchRecognizeResponse::Clear() {
  reponses_.Clear();
}

bool BatchRecognizeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dg.apps.BatchRecognizeResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .dg.apps.RecognizeResponse Reponses = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_Reponses:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_reponses()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_Reponses;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dg.apps.BatchRecognizeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dg.apps.BatchRecognizeResponse)
  return false;
#undef DO_
}

void BatchRecognizeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dg.apps.BatchRecognizeResponse)
  // repeated .dg.apps.RecognizeResponse Reponses = 1;
  for (unsigned int i = 0, n = this->reponses_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->reponses(i), output);
  }

  // @@protoc_insertion_point(serialize_end:dg.apps.BatchRecognizeResponse)
}

::google::protobuf::uint8* BatchRecognizeResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dg.apps.BatchRecognizeResponse)
  // repeated .dg.apps.RecognizeResponse Reponses = 1;
  for (unsigned int i = 0, n = this->reponses_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->reponses(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:dg.apps.BatchRecognizeResponse)
  return target;
}

int BatchRecognizeResponse::ByteSize() const {
  int total_size = 0;

  // repeated .dg.apps.RecognizeResponse Reponses = 1;
  total_size += 1 * this->reponses_size();
  for (int i = 0; i < this->reponses_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reponses(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BatchRecognizeResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BatchRecognizeResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BatchRecognizeResponse>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BatchRecognizeResponse::MergeFrom(const BatchRecognizeResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  reponses_.MergeFrom(from.reponses_);
}

void BatchRecognizeResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatchRecognizeResponse::CopyFrom(const BatchRecognizeResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchRecognizeResponse::IsInitialized() const {

  return true;
}

void BatchRecognizeResponse::Swap(BatchRecognizeResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BatchRecognizeResponse::InternalSwap(BatchRecognizeResponse* other) {
  reponses_.UnsafeArenaSwap(&other->reponses_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BatchRecognizeResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BatchRecognizeResponse_descriptor_;
  metadata.reflection = BatchRecognizeResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BatchRecognizeResponse

// repeated .dg.apps.RecognizeResponse Reponses = 1;
int BatchRecognizeResponse::reponses_size() const {
  return reponses_.size();
}
void BatchRecognizeResponse::clear_reponses() {
  reponses_.Clear();
}
const ::dg::apps::RecognizeResponse& BatchRecognizeResponse::reponses(int index) const {
  // @@protoc_insertion_point(field_get:dg.apps.BatchRecognizeResponse.Reponses)
  return reponses_.Get(index);
}
::dg::apps::RecognizeResponse* BatchRecognizeResponse::mutable_reponses(int index) {
  // @@protoc_insertion_point(field_mutable:dg.apps.BatchRecognizeResponse.Reponses)
  return reponses_.Mutable(index);
}
::dg::apps::RecognizeResponse* BatchRecognizeResponse::add_reponses() {
  // @@protoc_insertion_point(field_add:dg.apps.BatchRecognizeResponse.Reponses)
  return reponses_.Add();
}
::google::protobuf::RepeatedPtrField< ::dg::apps::RecognizeResponse >*
BatchRecognizeResponse::mutable_reponses() {
  // @@protoc_insertion_point(field_mutable_list:dg.apps.BatchRecognizeResponse.Reponses)
  return &reponses_;
}
const ::google::protobuf::RepeatedPtrField< ::dg::apps::RecognizeResponse >&
BatchRecognizeResponse::reponses() const {
  // @@protoc_insertion_point(field_list:dg.apps.BatchRecognizeResponse.Reponses)
  return reponses_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace apps
}  // namespace dg

// @@protoc_insertion_point(global_scope)
