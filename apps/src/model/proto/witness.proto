syntax = "proto3";

package dg.model;

import "common.proto";
import "system.proto";

service WitnessService {

	rpc Recognize(WitnessRequest) returns (WitnessResponse) {}
	
	rpc BatchRecognize(WitnessBatchRequest) returns (WitnessBatchResponse) {}

}


message WitnessRequest {
	WitnessRequestContext Context = 1;
	WitnessImage Image = 2;
}

message WitnessBatchRequest {
	WitnessRequestContext Context = 1;
	repeated WitnessImage Images = 2;
}

message WitnessResponse {
	WitnessResponseContext Context = 1;
	WitnessResult Result = 2;
}

message WitnessBatchResponse {
	WitnessResponseContext Context = 1;
	repeated WitnessResult Results = 2;
}

message WitnessRequestContext {
	string SessionId = 1;      //请求Session
	//string UserName = 2;     //用户名信息，需要开启验证功能
	//string Token = 3;        //Token验证，需要开启验证功能
	repeated RecognizeFunctions Functions = 4;//功能列表
	RecognizeType Type = 5;    //识别类型 enum RecognizeType
	StorageConfig Storage = 6; //Engine结果存储的信息
	map<string, string> Params = 7;        //扩展参数
}

message WitnessImage {
	Image Data = 1;
	int32 SensorId = 2;
	string SensorName = 3;
}

message WitnessResponseContext {
	string SessionId = 1;          //响应Session，如果请求Session不存在，生成UUID，否则复制请求的Session
	string Status = 2;             //响应状态信息
	string Message = 3;            //状态为错误的响应错误信息
	Time RequestTs = 4;            //请求下发给Engine的时间
	Time ResponseTs = 5;           //从Engine读取内容的时间
	map<string, Time> DebugTs = 6; //Debug用时
}

message WitnessResult {
	string InnerStatus = 1;                    //响应的内部状态
	string InnerMessage = 2;                   //响应的内部信息
	WitnessImage Image = 3;                    //响应的图片信息
	repeated RecognizedVehicle Vehicles = 4;   //识别的车辆列表
	repeated RecognizedFace Faces = 5;         //识别的人脸列表
}

message RecognizedVehicle {
	VehicleModel Model = 1;    //车辆模型信息
	Cutboard Cutboard = 2;     //车辆位置框
	Color Color = 3;           //识别的车辆颜色
	LicensePlate LicensePlate = 4; //车牌信息
	repeated SymbolItem SymbolItems = 5;//标志物列表
	string Features = 6;       //车辆特征值(Base64)
	Scene Scene = 7;           //车辆场景信息， DEPRECATED !!!
}

message RecognizedFace {
	Cutboard Cutboard = 1; //人脸位置框
	float Confidence = 2;  //人脸识别置信度
	string Features = 3;   //人脸特征值(Base64)
}

message VehicleModel {
    int32 TypeId = 1;       //车模类型Id
    int32 BrandId = 2;      //车模主品牌Id
    int32 SubBrandId = 3;   //车模子品牌Id
    int32 ModelYearId = 4;  //车模年款Id
    string Type = 5;        //车模类型名称
    string Brand = 6;       //车模主品牌名称
    string SubBrand = 7;    //车模子品牌名称
    string ModelYear = 8;   //车模年款名称
    int32 IsHead = 9;       //车头 or 车尾
    float Confidence = 10;  //车模识别置信度
}

message LicensePlate {
    string PlateNum = 1;    //车牌号
    Cutboard Cutboard = 2;  //车牌框
    int32 ColorId = 3;      //车牌颜色ModelId
    string Color = 4;       //车牌颜色
    int32 TypeId = 5;       //车牌类型ModelId
    string Type = 6;        //车牌类型
    float Confidence = 7;   //车牌识别置信度
}

message SymbolItem {
    int32 SymbolId = 1; //标志物ModelId
    string SymbolName = 2; //标志物名称
    repeated Symbol Symbols = 3; //标志物列表
}

//DEPRECATED !!!
message Scene {
    int32 IsHead = 1;
    int32 IsDay = 2;
    string Border = 3; 
}

message Symbol {
    Cutboard Cutboard = 3;  //标志物框
    float Confidence = 4;   //标志物识别置信度
}
