// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: witness.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "witness.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace dg {
namespace model {

namespace {

const ::google::protobuf::Descriptor* WitnessRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WitnessRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* WitnessBatchRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WitnessBatchRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* WitnessResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WitnessResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* WitnessBatchResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WitnessBatchResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* WitnessRequestContext_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WitnessRequestContext_reflection_ = NULL;
const ::google::protobuf::Descriptor* WitnessRequestContext_ParamsEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* WitnessImage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WitnessImage_reflection_ = NULL;
const ::google::protobuf::Descriptor* WitnessResponseContext_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WitnessResponseContext_reflection_ = NULL;
const ::google::protobuf::Descriptor* WitnessResponseContext_DebugTsEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* WitnessResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WitnessResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* RecognizedVehicle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecognizedVehicle_reflection_ = NULL;
const ::google::protobuf::Descriptor* RecognizedFace_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecognizedFace_reflection_ = NULL;
const ::google::protobuf::Descriptor* VehicleModel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VehicleModel_reflection_ = NULL;
const ::google::protobuf::Descriptor* LicensePlate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LicensePlate_reflection_ = NULL;
const ::google::protobuf::Descriptor* SymbolItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SymbolItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* Scene_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Scene_reflection_ = NULL;
const ::google::protobuf::Descriptor* Symbol_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Symbol_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_witness_2eproto() {
  protobuf_AddDesc_witness_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "witness.proto");
  GOOGLE_CHECK(file != NULL);
  WitnessRequest_descriptor_ = file->message_type(0);
  static const int WitnessRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WitnessRequest, context_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WitnessRequest, image_),
  };
  WitnessRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      WitnessRequest_descriptor_,
      WitnessRequest::default_instance_,
      WitnessRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(WitnessRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WitnessRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WitnessRequest, _is_default_instance_));
  WitnessBatchRequest_descriptor_ = file->message_type(1);
  static const int WitnessBatchRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WitnessBatchRequest, context_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WitnessBatchRequest, images_),
  };
  WitnessBatchRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      WitnessBatchRequest_descriptor_,
      WitnessBatchRequest::default_instance_,
      WitnessBatchRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(WitnessBatchRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WitnessBatchRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WitnessBatchRequest, _is_default_instance_));
  WitnessResponse_descriptor_ = file->message_type(2);
  static const int WitnessResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WitnessResponse, context_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WitnessResponse, result_),
  };
  WitnessResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      WitnessResponse_descriptor_,
      WitnessResponse::default_instance_,
      WitnessResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(WitnessResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WitnessResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WitnessResponse, _is_default_instance_));
  WitnessBatchResponse_descriptor_ = file->message_type(3);
  static const int WitnessBatchResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WitnessBatchResponse, context_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WitnessBatchResponse, results_),
  };
  WitnessBatchResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      WitnessBatchResponse_descriptor_,
      WitnessBatchResponse::default_instance_,
      WitnessBatchResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(WitnessBatchResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WitnessBatchResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WitnessBatchResponse, _is_default_instance_));
  WitnessRequestContext_descriptor_ = file->message_type(4);
  static const int WitnessRequestContext_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WitnessRequestContext, sessionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WitnessRequestContext, functions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WitnessRequestContext, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WitnessRequestContext, storage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WitnessRequestContext, params_),
  };
  WitnessRequestContext_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      WitnessRequestContext_descriptor_,
      WitnessRequestContext::default_instance_,
      WitnessRequestContext_offsets_,
      -1,
      -1,
      -1,
      sizeof(WitnessRequestContext),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WitnessRequestContext, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WitnessRequestContext, _is_default_instance_));
  WitnessRequestContext_ParamsEntry_descriptor_ = WitnessRequestContext_descriptor_->nested_type(0);
  WitnessImage_descriptor_ = file->message_type(5);
  static const int WitnessImage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WitnessImage, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WitnessImage, sensorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WitnessImage, sensorname_),
  };
  WitnessImage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      WitnessImage_descriptor_,
      WitnessImage::default_instance_,
      WitnessImage_offsets_,
      -1,
      -1,
      -1,
      sizeof(WitnessImage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WitnessImage, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WitnessImage, _is_default_instance_));
  WitnessResponseContext_descriptor_ = file->message_type(6);
  static const int WitnessResponseContext_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WitnessResponseContext, sessionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WitnessResponseContext, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WitnessResponseContext, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WitnessResponseContext, requestts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WitnessResponseContext, responsets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WitnessResponseContext, debugts_),
  };
  WitnessResponseContext_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      WitnessResponseContext_descriptor_,
      WitnessResponseContext::default_instance_,
      WitnessResponseContext_offsets_,
      -1,
      -1,
      -1,
      sizeof(WitnessResponseContext),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WitnessResponseContext, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WitnessResponseContext, _is_default_instance_));
  WitnessResponseContext_DebugTsEntry_descriptor_ = WitnessResponseContext_descriptor_->nested_type(0);
  WitnessResult_descriptor_ = file->message_type(7);
  static const int WitnessResult_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WitnessResult, innerstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WitnessResult, innermessage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WitnessResult, image_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WitnessResult, vehicles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WitnessResult, faces_),
  };
  WitnessResult_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      WitnessResult_descriptor_,
      WitnessResult::default_instance_,
      WitnessResult_offsets_,
      -1,
      -1,
      -1,
      sizeof(WitnessResult),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WitnessResult, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WitnessResult, _is_default_instance_));
  RecognizedVehicle_descriptor_ = file->message_type(8);
  static const int RecognizedVehicle_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecognizedVehicle, model_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecognizedVehicle, cutboard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecognizedVehicle, color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecognizedVehicle, licenseplate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecognizedVehicle, symbolitems_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecognizedVehicle, features_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecognizedVehicle, scene_),
  };
  RecognizedVehicle_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RecognizedVehicle_descriptor_,
      RecognizedVehicle::default_instance_,
      RecognizedVehicle_offsets_,
      -1,
      -1,
      -1,
      sizeof(RecognizedVehicle),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecognizedVehicle, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecognizedVehicle, _is_default_instance_));
  RecognizedFace_descriptor_ = file->message_type(9);
  static const int RecognizedFace_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecognizedFace, cutboard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecognizedFace, confidence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecognizedFace, features_),
  };
  RecognizedFace_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RecognizedFace_descriptor_,
      RecognizedFace::default_instance_,
      RecognizedFace_offsets_,
      -1,
      -1,
      -1,
      sizeof(RecognizedFace),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecognizedFace, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecognizedFace, _is_default_instance_));
  VehicleModel_descriptor_ = file->message_type(10);
  static const int VehicleModel_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleModel, typeid__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleModel, brandid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleModel, subbrandid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleModel, modelyearid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleModel, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleModel, brand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleModel, subbrand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleModel, modelyear_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleModel, ishead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleModel, confidence_),
  };
  VehicleModel_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      VehicleModel_descriptor_,
      VehicleModel::default_instance_,
      VehicleModel_offsets_,
      -1,
      -1,
      -1,
      sizeof(VehicleModel),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleModel, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleModel, _is_default_instance_));
  LicensePlate_descriptor_ = file->message_type(11);
  static const int LicensePlate_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LicensePlate, platenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LicensePlate, cutboard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LicensePlate, colorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LicensePlate, color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LicensePlate, typeid__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LicensePlate, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LicensePlate, confidence_),
  };
  LicensePlate_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LicensePlate_descriptor_,
      LicensePlate::default_instance_,
      LicensePlate_offsets_,
      -1,
      -1,
      -1,
      sizeof(LicensePlate),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LicensePlate, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LicensePlate, _is_default_instance_));
  SymbolItem_descriptor_ = file->message_type(12);
  static const int SymbolItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolItem, symbolid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolItem, symbolname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolItem, symbols_),
  };
  SymbolItem_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SymbolItem_descriptor_,
      SymbolItem::default_instance_,
      SymbolItem_offsets_,
      -1,
      -1,
      -1,
      sizeof(SymbolItem),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolItem, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolItem, _is_default_instance_));
  Scene_descriptor_ = file->message_type(13);
  static const int Scene_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scene, ishead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scene, isday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scene, border_),
  };
  Scene_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Scene_descriptor_,
      Scene::default_instance_,
      Scene_offsets_,
      -1,
      -1,
      -1,
      sizeof(Scene),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scene, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scene, _is_default_instance_));
  Symbol_descriptor_ = file->message_type(14);
  static const int Symbol_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Symbol, cutboard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Symbol, confidence_),
  };
  Symbol_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Symbol_descriptor_,
      Symbol::default_instance_,
      Symbol_offsets_,
      -1,
      -1,
      -1,
      sizeof(Symbol),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Symbol, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Symbol, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_witness_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      WitnessRequest_descriptor_, &WitnessRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      WitnessBatchRequest_descriptor_, &WitnessBatchRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      WitnessResponse_descriptor_, &WitnessResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      WitnessBatchResponse_descriptor_, &WitnessBatchResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      WitnessRequestContext_descriptor_, &WitnessRequestContext::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        WitnessRequestContext_ParamsEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::std::string,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            0>::CreateDefaultInstance(
                WitnessRequestContext_ParamsEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      WitnessImage_descriptor_, &WitnessImage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      WitnessResponseContext_descriptor_, &WitnessResponseContext::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        WitnessResponseContext_DebugTsEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::dg::model::Time,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                WitnessResponseContext_DebugTsEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      WitnessResult_descriptor_, &WitnessResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RecognizedVehicle_descriptor_, &RecognizedVehicle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RecognizedFace_descriptor_, &RecognizedFace::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      VehicleModel_descriptor_, &VehicleModel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LicensePlate_descriptor_, &LicensePlate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SymbolItem_descriptor_, &SymbolItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Scene_descriptor_, &Scene::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Symbol_descriptor_, &Symbol::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_witness_2eproto() {
  delete WitnessRequest::default_instance_;
  delete WitnessRequest_reflection_;
  delete WitnessBatchRequest::default_instance_;
  delete WitnessBatchRequest_reflection_;
  delete WitnessResponse::default_instance_;
  delete WitnessResponse_reflection_;
  delete WitnessBatchResponse::default_instance_;
  delete WitnessBatchResponse_reflection_;
  delete WitnessRequestContext::default_instance_;
  delete WitnessRequestContext_reflection_;
  delete WitnessImage::default_instance_;
  delete WitnessImage_reflection_;
  delete WitnessResponseContext::default_instance_;
  delete WitnessResponseContext_reflection_;
  delete WitnessResult::default_instance_;
  delete WitnessResult_reflection_;
  delete RecognizedVehicle::default_instance_;
  delete RecognizedVehicle_reflection_;
  delete RecognizedFace::default_instance_;
  delete RecognizedFace_reflection_;
  delete VehicleModel::default_instance_;
  delete VehicleModel_reflection_;
  delete LicensePlate::default_instance_;
  delete LicensePlate_reflection_;
  delete SymbolItem::default_instance_;
  delete SymbolItem_reflection_;
  delete Scene::default_instance_;
  delete Scene_reflection_;
  delete Symbol::default_instance_;
  delete Symbol_reflection_;
}

void protobuf_AddDesc_witness_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::dg::model::protobuf_AddDesc_common_2eproto();
  ::dg::model::protobuf_AddDesc_system_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rwitness.proto\022\010dg.model\032\014common.proto\032"
    "\014system.proto\"i\n\016WitnessRequest\0220\n\007Conte"
    "xt\030\001 \001(\0132\037.dg.model.WitnessRequestContex"
    "t\022%\n\005Image\030\002 \001(\0132\026.dg.model.WitnessImage"
    "\"o\n\023WitnessBatchRequest\0220\n\007Context\030\001 \001(\013"
    "2\037.dg.model.WitnessRequestContext\022&\n\006Ima"
    "ges\030\002 \003(\0132\026.dg.model.WitnessImage\"m\n\017Wit"
    "nessResponse\0221\n\007Context\030\001 \001(\0132 .dg.model"
    ".WitnessResponseContext\022\'\n\006Result\030\002 \001(\0132"
    "\027.dg.model.WitnessResult\"s\n\024WitnessBatch"
    "Response\0221\n\007Context\030\001 \001(\0132 .dg.model.Wit"
    "nessResponseContext\022(\n\007Results\030\002 \003(\0132\027.d"
    "g.model.WitnessResult\"\230\002\n\025WitnessRequest"
    "Context\022\021\n\tSessionId\030\001 \001(\t\022/\n\tFunctions\030"
    "\004 \003(\0162\034.dg.model.RecognizeFunctions\022%\n\004T"
    "ype\030\005 \001(\0162\027.dg.model.RecognizeType\022(\n\007St"
    "orage\030\006 \001(\0132\027.dg.model.StorageConfig\022;\n\006"
    "Params\030\007 \003(\0132+.dg.model.WitnessRequestCo"
    "ntext.ParamsEntry\032-\n\013ParamsEntry\022\013\n\003key\030"
    "\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"S\n\014WitnessImage"
    "\022\035\n\004Data\030\001 \001(\0132\017.dg.model.Image\022\020\n\010Senso"
    "rId\030\002 \001(\005\022\022\n\nSensorName\030\003 \001(\t\"\223\002\n\026Witnes"
    "sResponseContext\022\021\n\tSessionId\030\001 \001(\t\022\016\n\006S"
    "tatus\030\002 \001(\t\022\017\n\007Message\030\003 \001(\t\022!\n\tRequestT"
    "s\030\004 \001(\0132\016.dg.model.Time\022\"\n\nResponseTs\030\005 "
    "\001(\0132\016.dg.model.Time\022>\n\007DebugTs\030\006 \003(\0132-.d"
    "g.model.WitnessResponseContext.DebugTsEn"
    "try\032>\n\014DebugTsEntry\022\013\n\003key\030\001 \001(\t\022\035\n\005valu"
    "e\030\002 \001(\0132\016.dg.model.Time:\0028\001\"\271\001\n\rWitnessR"
    "esult\022\023\n\013InnerStatus\030\001 \001(\t\022\024\n\014InnerMessa"
    "ge\030\002 \001(\t\022%\n\005Image\030\003 \001(\0132\026.dg.model.Witne"
    "ssImage\022-\n\010Vehicles\030\004 \003(\0132\033.dg.model.Rec"
    "ognizedVehicle\022\'\n\005Faces\030\005 \003(\0132\030.dg.model"
    ".RecognizedFace\"\213\002\n\021RecognizedVehicle\022%\n"
    "\005Model\030\001 \001(\0132\026.dg.model.VehicleModel\022$\n\010"
    "Cutboard\030\002 \001(\0132\022.dg.model.Cutboard\022\036\n\005Co"
    "lor\030\003 \001(\0132\017.dg.model.Color\022,\n\014LicensePla"
    "te\030\004 \001(\0132\026.dg.model.LicensePlate\022)\n\013Symb"
    "olItems\030\005 \003(\0132\024.dg.model.SymbolItem\022\020\n\010F"
    "eatures\030\006 \001(\t\022\036\n\005Scene\030\007 \001(\0132\017.dg.model."
    "Scene\"\\\n\016RecognizedFace\022$\n\010Cutboard\030\001 \001("
    "\0132\022.dg.model.Cutboard\022\022\n\nConfidence\030\002 \001("
    "\002\022\020\n\010Features\030\003 \001(\t\"\276\001\n\014VehicleModel\022\016\n\006"
    "TypeId\030\001 \001(\005\022\017\n\007BrandId\030\002 \001(\005\022\022\n\nSubBran"
    "dId\030\003 \001(\005\022\023\n\013ModelYearId\030\004 \001(\005\022\014\n\004Type\030\005"
    " \001(\t\022\r\n\005Brand\030\006 \001(\t\022\020\n\010SubBrand\030\007 \001(\t\022\021\n"
    "\tModelYear\030\010 \001(\t\022\016\n\006IsHead\030\t \001(\005\022\022\n\nConf"
    "idence\030\n \001(\002\"\230\001\n\014LicensePlate\022\020\n\010PlateNu"
    "m\030\001 \001(\t\022$\n\010Cutboard\030\002 \001(\0132\022.dg.model.Cut"
    "board\022\017\n\007ColorId\030\003 \001(\005\022\r\n\005Color\030\004 \001(\t\022\016\n"
    "\006TypeId\030\005 \001(\005\022\014\n\004Type\030\006 \001(\t\022\022\n\nConfidenc"
    "e\030\007 \001(\002\"U\n\nSymbolItem\022\020\n\010SymbolId\030\001 \001(\005\022"
    "\022\n\nSymbolName\030\002 \001(\t\022!\n\007Symbols\030\003 \003(\0132\020.d"
    "g.model.Symbol\"6\n\005Scene\022\016\n\006IsHead\030\001 \001(\005\022"
    "\r\n\005IsDay\030\002 \001(\005\022\016\n\006Border\030\003 \001(\t\"B\n\006Symbol"
    "\022$\n\010Cutboard\030\003 \001(\0132\022.dg.model.Cutboard\022\022"
    "\n\nConfidence\030\004 \001(\0022\247\001\n\016WitnessService\022B\n"
    "\tRecognize\022\030.dg.model.WitnessRequest\032\031.d"
    "g.model.WitnessResponse\"\000\022Q\n\016BatchRecogn"
    "ize\022\035.dg.model.WitnessBatchRequest\032\036.dg."
    "model.WitnessBatchResponse\"\000b\006proto3", 2436);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "witness.proto", &protobuf_RegisterTypes);
  WitnessRequest::default_instance_ = new WitnessRequest();
  WitnessBatchRequest::default_instance_ = new WitnessBatchRequest();
  WitnessResponse::default_instance_ = new WitnessResponse();
  WitnessBatchResponse::default_instance_ = new WitnessBatchResponse();
  WitnessRequestContext::default_instance_ = new WitnessRequestContext();
  WitnessImage::default_instance_ = new WitnessImage();
  WitnessResponseContext::default_instance_ = new WitnessResponseContext();
  WitnessResult::default_instance_ = new WitnessResult();
  RecognizedVehicle::default_instance_ = new RecognizedVehicle();
  RecognizedFace::default_instance_ = new RecognizedFace();
  VehicleModel::default_instance_ = new VehicleModel();
  LicensePlate::default_instance_ = new LicensePlate();
  SymbolItem::default_instance_ = new SymbolItem();
  Scene::default_instance_ = new Scene();
  Symbol::default_instance_ = new Symbol();
  WitnessRequest::default_instance_->InitAsDefaultInstance();
  WitnessBatchRequest::default_instance_->InitAsDefaultInstance();
  WitnessResponse::default_instance_->InitAsDefaultInstance();
  WitnessBatchResponse::default_instance_->InitAsDefaultInstance();
  WitnessRequestContext::default_instance_->InitAsDefaultInstance();
  WitnessImage::default_instance_->InitAsDefaultInstance();
  WitnessResponseContext::default_instance_->InitAsDefaultInstance();
  WitnessResult::default_instance_->InitAsDefaultInstance();
  RecognizedVehicle::default_instance_->InitAsDefaultInstance();
  RecognizedFace::default_instance_->InitAsDefaultInstance();
  VehicleModel::default_instance_->InitAsDefaultInstance();
  LicensePlate::default_instance_->InitAsDefaultInstance();
  SymbolItem::default_instance_->InitAsDefaultInstance();
  Scene::default_instance_->InitAsDefaultInstance();
  Symbol::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_witness_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_witness_2eproto {
  StaticDescriptorInitializer_witness_2eproto() {
    protobuf_AddDesc_witness_2eproto();
  }
} static_descriptor_initializer_witness_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WitnessRequest::kContextFieldNumber;
const int WitnessRequest::kImageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WitnessRequest::WitnessRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dg.model.WitnessRequest)
}

void WitnessRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  context_ = const_cast< ::dg::model::WitnessRequestContext*>(&::dg::model::WitnessRequestContext::default_instance());
  image_ = const_cast< ::dg::model::WitnessImage*>(&::dg::model::WitnessImage::default_instance());
}

WitnessRequest::WitnessRequest(const WitnessRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dg.model.WitnessRequest)
}

void WitnessRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  context_ = NULL;
  image_ = NULL;
}

WitnessRequest::~WitnessRequest() {
  // @@protoc_insertion_point(destructor:dg.model.WitnessRequest)
  SharedDtor();
}

void WitnessRequest::SharedDtor() {
  if (this != default_instance_) {
    delete context_;
    delete image_;
  }
}

void WitnessRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WitnessRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WitnessRequest_descriptor_;
}

const WitnessRequest& WitnessRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_witness_2eproto();
  return *default_instance_;
}

WitnessRequest* WitnessRequest::default_instance_ = NULL;

WitnessRequest* WitnessRequest::New(::google::protobuf::Arena* arena) const {
  WitnessRequest* n = new WitnessRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WitnessRequest::Clear() {
  if (GetArenaNoVirtual() == NULL && context_ != NULL) delete context_;
  context_ = NULL;
  if (GetArenaNoVirtual() == NULL && image_ != NULL) delete image_;
  image_ = NULL;
}

bool WitnessRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dg.model.WitnessRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .dg.model.WitnessRequestContext Context = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_context()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Image;
        break;
      }

      // optional .dg.model.WitnessImage Image = 2;
      case 2: {
        if (tag == 18) {
         parse_Image:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_image()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dg.model.WitnessRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dg.model.WitnessRequest)
  return false;
#undef DO_
}

void WitnessRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dg.model.WitnessRequest)
  // optional .dg.model.WitnessRequestContext Context = 1;
  if (this->has_context()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->context_, output);
  }

  // optional .dg.model.WitnessImage Image = 2;
  if (this->has_image()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->image_, output);
  }

  // @@protoc_insertion_point(serialize_end:dg.model.WitnessRequest)
}

::google::protobuf::uint8* WitnessRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dg.model.WitnessRequest)
  // optional .dg.model.WitnessRequestContext Context = 1;
  if (this->has_context()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->context_, target);
  }

  // optional .dg.model.WitnessImage Image = 2;
  if (this->has_image()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->image_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:dg.model.WitnessRequest)
  return target;
}

int WitnessRequest::ByteSize() const {
  int total_size = 0;

  // optional .dg.model.WitnessRequestContext Context = 1;
  if (this->has_context()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->context_);
  }

  // optional .dg.model.WitnessImage Image = 2;
  if (this->has_image()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->image_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WitnessRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const WitnessRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const WitnessRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WitnessRequest::MergeFrom(const WitnessRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_context()) {
    mutable_context()->::dg::model::WitnessRequestContext::MergeFrom(from.context());
  }
  if (from.has_image()) {
    mutable_image()->::dg::model::WitnessImage::MergeFrom(from.image());
  }
}

void WitnessRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WitnessRequest::CopyFrom(const WitnessRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WitnessRequest::IsInitialized() const {

  return true;
}

void WitnessRequest::Swap(WitnessRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WitnessRequest::InternalSwap(WitnessRequest* other) {
  std::swap(context_, other->context_);
  std::swap(image_, other->image_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WitnessRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WitnessRequest_descriptor_;
  metadata.reflection = WitnessRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WitnessRequest

// optional .dg.model.WitnessRequestContext Context = 1;
bool WitnessRequest::has_context() const {
  return !_is_default_instance_ && context_ != NULL;
}
void WitnessRequest::clear_context() {
  if (GetArenaNoVirtual() == NULL && context_ != NULL) delete context_;
  context_ = NULL;
}
const ::dg::model::WitnessRequestContext& WitnessRequest::context() const {
  // @@protoc_insertion_point(field_get:dg.model.WitnessRequest.Context)
  return context_ != NULL ? *context_ : *default_instance_->context_;
}
::dg::model::WitnessRequestContext* WitnessRequest::mutable_context() {
  
  if (context_ == NULL) {
    context_ = new ::dg::model::WitnessRequestContext;
  }
  // @@protoc_insertion_point(field_mutable:dg.model.WitnessRequest.Context)
  return context_;
}
::dg::model::WitnessRequestContext* WitnessRequest::release_context() {
  
  ::dg::model::WitnessRequestContext* temp = context_;
  context_ = NULL;
  return temp;
}
void WitnessRequest::set_allocated_context(::dg::model::WitnessRequestContext* context) {
  delete context_;
  context_ = context;
  if (context) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dg.model.WitnessRequest.Context)
}

// optional .dg.model.WitnessImage Image = 2;
bool WitnessRequest::has_image() const {
  return !_is_default_instance_ && image_ != NULL;
}
void WitnessRequest::clear_image() {
  if (GetArenaNoVirtual() == NULL && image_ != NULL) delete image_;
  image_ = NULL;
}
const ::dg::model::WitnessImage& WitnessRequest::image() const {
  // @@protoc_insertion_point(field_get:dg.model.WitnessRequest.Image)
  return image_ != NULL ? *image_ : *default_instance_->image_;
}
::dg::model::WitnessImage* WitnessRequest::mutable_image() {
  
  if (image_ == NULL) {
    image_ = new ::dg::model::WitnessImage;
  }
  // @@protoc_insertion_point(field_mutable:dg.model.WitnessRequest.Image)
  return image_;
}
::dg::model::WitnessImage* WitnessRequest::release_image() {
  
  ::dg::model::WitnessImage* temp = image_;
  image_ = NULL;
  return temp;
}
void WitnessRequest::set_allocated_image(::dg::model::WitnessImage* image) {
  delete image_;
  image_ = image;
  if (image) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dg.model.WitnessRequest.Image)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WitnessBatchRequest::kContextFieldNumber;
const int WitnessBatchRequest::kImagesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WitnessBatchRequest::WitnessBatchRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dg.model.WitnessBatchRequest)
}

void WitnessBatchRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  context_ = const_cast< ::dg::model::WitnessRequestContext*>(&::dg::model::WitnessRequestContext::default_instance());
}

WitnessBatchRequest::WitnessBatchRequest(const WitnessBatchRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dg.model.WitnessBatchRequest)
}

void WitnessBatchRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  context_ = NULL;
}

WitnessBatchRequest::~WitnessBatchRequest() {
  // @@protoc_insertion_point(destructor:dg.model.WitnessBatchRequest)
  SharedDtor();
}

void WitnessBatchRequest::SharedDtor() {
  if (this != default_instance_) {
    delete context_;
  }
}

void WitnessBatchRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WitnessBatchRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WitnessBatchRequest_descriptor_;
}

const WitnessBatchRequest& WitnessBatchRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_witness_2eproto();
  return *default_instance_;
}

WitnessBatchRequest* WitnessBatchRequest::default_instance_ = NULL;

WitnessBatchRequest* WitnessBatchRequest::New(::google::protobuf::Arena* arena) const {
  WitnessBatchRequest* n = new WitnessBatchRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WitnessBatchRequest::Clear() {
  if (GetArenaNoVirtual() == NULL && context_ != NULL) delete context_;
  context_ = NULL;
  images_.Clear();
}

bool WitnessBatchRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dg.model.WitnessBatchRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .dg.model.WitnessRequestContext Context = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_context()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Images;
        break;
      }

      // repeated .dg.model.WitnessImage Images = 2;
      case 2: {
        if (tag == 18) {
         parse_Images:
          DO_(input->IncrementRecursionDepth());
         parse_loop_Images:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_images()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_Images;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dg.model.WitnessBatchRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dg.model.WitnessBatchRequest)
  return false;
#undef DO_
}

void WitnessBatchRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dg.model.WitnessBatchRequest)
  // optional .dg.model.WitnessRequestContext Context = 1;
  if (this->has_context()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->context_, output);
  }

  // repeated .dg.model.WitnessImage Images = 2;
  for (unsigned int i = 0, n = this->images_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->images(i), output);
  }

  // @@protoc_insertion_point(serialize_end:dg.model.WitnessBatchRequest)
}

::google::protobuf::uint8* WitnessBatchRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dg.model.WitnessBatchRequest)
  // optional .dg.model.WitnessRequestContext Context = 1;
  if (this->has_context()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->context_, target);
  }

  // repeated .dg.model.WitnessImage Images = 2;
  for (unsigned int i = 0, n = this->images_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->images(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:dg.model.WitnessBatchRequest)
  return target;
}

int WitnessBatchRequest::ByteSize() const {
  int total_size = 0;

  // optional .dg.model.WitnessRequestContext Context = 1;
  if (this->has_context()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->context_);
  }

  // repeated .dg.model.WitnessImage Images = 2;
  total_size += 1 * this->images_size();
  for (int i = 0; i < this->images_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->images(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WitnessBatchRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const WitnessBatchRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const WitnessBatchRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WitnessBatchRequest::MergeFrom(const WitnessBatchRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  images_.MergeFrom(from.images_);
  if (from.has_context()) {
    mutable_context()->::dg::model::WitnessRequestContext::MergeFrom(from.context());
  }
}

void WitnessBatchRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WitnessBatchRequest::CopyFrom(const WitnessBatchRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WitnessBatchRequest::IsInitialized() const {

  return true;
}

void WitnessBatchRequest::Swap(WitnessBatchRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WitnessBatchRequest::InternalSwap(WitnessBatchRequest* other) {
  std::swap(context_, other->context_);
  images_.UnsafeArenaSwap(&other->images_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WitnessBatchRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WitnessBatchRequest_descriptor_;
  metadata.reflection = WitnessBatchRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WitnessBatchRequest

// optional .dg.model.WitnessRequestContext Context = 1;
bool WitnessBatchRequest::has_context() const {
  return !_is_default_instance_ && context_ != NULL;
}
void WitnessBatchRequest::clear_context() {
  if (GetArenaNoVirtual() == NULL && context_ != NULL) delete context_;
  context_ = NULL;
}
const ::dg::model::WitnessRequestContext& WitnessBatchRequest::context() const {
  // @@protoc_insertion_point(field_get:dg.model.WitnessBatchRequest.Context)
  return context_ != NULL ? *context_ : *default_instance_->context_;
}
::dg::model::WitnessRequestContext* WitnessBatchRequest::mutable_context() {
  
  if (context_ == NULL) {
    context_ = new ::dg::model::WitnessRequestContext;
  }
  // @@protoc_insertion_point(field_mutable:dg.model.WitnessBatchRequest.Context)
  return context_;
}
::dg::model::WitnessRequestContext* WitnessBatchRequest::release_context() {
  
  ::dg::model::WitnessRequestContext* temp = context_;
  context_ = NULL;
  return temp;
}
void WitnessBatchRequest::set_allocated_context(::dg::model::WitnessRequestContext* context) {
  delete context_;
  context_ = context;
  if (context) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dg.model.WitnessBatchRequest.Context)
}

// repeated .dg.model.WitnessImage Images = 2;
int WitnessBatchRequest::images_size() const {
  return images_.size();
}
void WitnessBatchRequest::clear_images() {
  images_.Clear();
}
const ::dg::model::WitnessImage& WitnessBatchRequest::images(int index) const {
  // @@protoc_insertion_point(field_get:dg.model.WitnessBatchRequest.Images)
  return images_.Get(index);
}
::dg::model::WitnessImage* WitnessBatchRequest::mutable_images(int index) {
  // @@protoc_insertion_point(field_mutable:dg.model.WitnessBatchRequest.Images)
  return images_.Mutable(index);
}
::dg::model::WitnessImage* WitnessBatchRequest::add_images() {
  // @@protoc_insertion_point(field_add:dg.model.WitnessBatchRequest.Images)
  return images_.Add();
}
::google::protobuf::RepeatedPtrField< ::dg::model::WitnessImage >*
WitnessBatchRequest::mutable_images() {
  // @@protoc_insertion_point(field_mutable_list:dg.model.WitnessBatchRequest.Images)
  return &images_;
}
const ::google::protobuf::RepeatedPtrField< ::dg::model::WitnessImage >&
WitnessBatchRequest::images() const {
  // @@protoc_insertion_point(field_list:dg.model.WitnessBatchRequest.Images)
  return images_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WitnessResponse::kContextFieldNumber;
const int WitnessResponse::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WitnessResponse::WitnessResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dg.model.WitnessResponse)
}

void WitnessResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  context_ = const_cast< ::dg::model::WitnessResponseContext*>(&::dg::model::WitnessResponseContext::default_instance());
  result_ = const_cast< ::dg::model::WitnessResult*>(&::dg::model::WitnessResult::default_instance());
}

WitnessResponse::WitnessResponse(const WitnessResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dg.model.WitnessResponse)
}

void WitnessResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  context_ = NULL;
  result_ = NULL;
}

WitnessResponse::~WitnessResponse() {
  // @@protoc_insertion_point(destructor:dg.model.WitnessResponse)
  SharedDtor();
}

void WitnessResponse::SharedDtor() {
  if (this != default_instance_) {
    delete context_;
    delete result_;
  }
}

void WitnessResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WitnessResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WitnessResponse_descriptor_;
}

const WitnessResponse& WitnessResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_witness_2eproto();
  return *default_instance_;
}

WitnessResponse* WitnessResponse::default_instance_ = NULL;

WitnessResponse* WitnessResponse::New(::google::protobuf::Arena* arena) const {
  WitnessResponse* n = new WitnessResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WitnessResponse::Clear() {
  if (GetArenaNoVirtual() == NULL && context_ != NULL) delete context_;
  context_ = NULL;
  if (GetArenaNoVirtual() == NULL && result_ != NULL) delete result_;
  result_ = NULL;
}

bool WitnessResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dg.model.WitnessResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .dg.model.WitnessResponseContext Context = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_context()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Result;
        break;
      }

      // optional .dg.model.WitnessResult Result = 2;
      case 2: {
        if (tag == 18) {
         parse_Result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dg.model.WitnessResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dg.model.WitnessResponse)
  return false;
#undef DO_
}

void WitnessResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dg.model.WitnessResponse)
  // optional .dg.model.WitnessResponseContext Context = 1;
  if (this->has_context()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->context_, output);
  }

  // optional .dg.model.WitnessResult Result = 2;
  if (this->has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->result_, output);
  }

  // @@protoc_insertion_point(serialize_end:dg.model.WitnessResponse)
}

::google::protobuf::uint8* WitnessResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dg.model.WitnessResponse)
  // optional .dg.model.WitnessResponseContext Context = 1;
  if (this->has_context()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->context_, target);
  }

  // optional .dg.model.WitnessResult Result = 2;
  if (this->has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->result_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:dg.model.WitnessResponse)
  return target;
}

int WitnessResponse::ByteSize() const {
  int total_size = 0;

  // optional .dg.model.WitnessResponseContext Context = 1;
  if (this->has_context()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->context_);
  }

  // optional .dg.model.WitnessResult Result = 2;
  if (this->has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->result_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WitnessResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const WitnessResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const WitnessResponse>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WitnessResponse::MergeFrom(const WitnessResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_context()) {
    mutable_context()->::dg::model::WitnessResponseContext::MergeFrom(from.context());
  }
  if (from.has_result()) {
    mutable_result()->::dg::model::WitnessResult::MergeFrom(from.result());
  }
}

void WitnessResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WitnessResponse::CopyFrom(const WitnessResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WitnessResponse::IsInitialized() const {

  return true;
}

void WitnessResponse::Swap(WitnessResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WitnessResponse::InternalSwap(WitnessResponse* other) {
  std::swap(context_, other->context_);
  std::swap(result_, other->result_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WitnessResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WitnessResponse_descriptor_;
  metadata.reflection = WitnessResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WitnessResponse

// optional .dg.model.WitnessResponseContext Context = 1;
bool WitnessResponse::has_context() const {
  return !_is_default_instance_ && context_ != NULL;
}
void WitnessResponse::clear_context() {
  if (GetArenaNoVirtual() == NULL && context_ != NULL) delete context_;
  context_ = NULL;
}
const ::dg::model::WitnessResponseContext& WitnessResponse::context() const {
  // @@protoc_insertion_point(field_get:dg.model.WitnessResponse.Context)
  return context_ != NULL ? *context_ : *default_instance_->context_;
}
::dg::model::WitnessResponseContext* WitnessResponse::mutable_context() {
  
  if (context_ == NULL) {
    context_ = new ::dg::model::WitnessResponseContext;
  }
  // @@protoc_insertion_point(field_mutable:dg.model.WitnessResponse.Context)
  return context_;
}
::dg::model::WitnessResponseContext* WitnessResponse::release_context() {
  
  ::dg::model::WitnessResponseContext* temp = context_;
  context_ = NULL;
  return temp;
}
void WitnessResponse::set_allocated_context(::dg::model::WitnessResponseContext* context) {
  delete context_;
  context_ = context;
  if (context) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dg.model.WitnessResponse.Context)
}

// optional .dg.model.WitnessResult Result = 2;
bool WitnessResponse::has_result() const {
  return !_is_default_instance_ && result_ != NULL;
}
void WitnessResponse::clear_result() {
  if (GetArenaNoVirtual() == NULL && result_ != NULL) delete result_;
  result_ = NULL;
}
const ::dg::model::WitnessResult& WitnessResponse::result() const {
  // @@protoc_insertion_point(field_get:dg.model.WitnessResponse.Result)
  return result_ != NULL ? *result_ : *default_instance_->result_;
}
::dg::model::WitnessResult* WitnessResponse::mutable_result() {
  
  if (result_ == NULL) {
    result_ = new ::dg::model::WitnessResult;
  }
  // @@protoc_insertion_point(field_mutable:dg.model.WitnessResponse.Result)
  return result_;
}
::dg::model::WitnessResult* WitnessResponse::release_result() {
  
  ::dg::model::WitnessResult* temp = result_;
  result_ = NULL;
  return temp;
}
void WitnessResponse::set_allocated_result(::dg::model::WitnessResult* result) {
  delete result_;
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dg.model.WitnessResponse.Result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WitnessBatchResponse::kContextFieldNumber;
const int WitnessBatchResponse::kResultsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WitnessBatchResponse::WitnessBatchResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dg.model.WitnessBatchResponse)
}

void WitnessBatchResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  context_ = const_cast< ::dg::model::WitnessResponseContext*>(&::dg::model::WitnessResponseContext::default_instance());
}

WitnessBatchResponse::WitnessBatchResponse(const WitnessBatchResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dg.model.WitnessBatchResponse)
}

void WitnessBatchResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  context_ = NULL;
}

WitnessBatchResponse::~WitnessBatchResponse() {
  // @@protoc_insertion_point(destructor:dg.model.WitnessBatchResponse)
  SharedDtor();
}

void WitnessBatchResponse::SharedDtor() {
  if (this != default_instance_) {
    delete context_;
  }
}

void WitnessBatchResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WitnessBatchResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WitnessBatchResponse_descriptor_;
}

const WitnessBatchResponse& WitnessBatchResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_witness_2eproto();
  return *default_instance_;
}

WitnessBatchResponse* WitnessBatchResponse::default_instance_ = NULL;

WitnessBatchResponse* WitnessBatchResponse::New(::google::protobuf::Arena* arena) const {
  WitnessBatchResponse* n = new WitnessBatchResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WitnessBatchResponse::Clear() {
  if (GetArenaNoVirtual() == NULL && context_ != NULL) delete context_;
  context_ = NULL;
  results_.Clear();
}

bool WitnessBatchResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dg.model.WitnessBatchResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .dg.model.WitnessResponseContext Context = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_context()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Results;
        break;
      }

      // repeated .dg.model.WitnessResult Results = 2;
      case 2: {
        if (tag == 18) {
         parse_Results:
          DO_(input->IncrementRecursionDepth());
         parse_loop_Results:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_results()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_Results;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dg.model.WitnessBatchResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dg.model.WitnessBatchResponse)
  return false;
#undef DO_
}

void WitnessBatchResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dg.model.WitnessBatchResponse)
  // optional .dg.model.WitnessResponseContext Context = 1;
  if (this->has_context()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->context_, output);
  }

  // repeated .dg.model.WitnessResult Results = 2;
  for (unsigned int i = 0, n = this->results_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->results(i), output);
  }

  // @@protoc_insertion_point(serialize_end:dg.model.WitnessBatchResponse)
}

::google::protobuf::uint8* WitnessBatchResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dg.model.WitnessBatchResponse)
  // optional .dg.model.WitnessResponseContext Context = 1;
  if (this->has_context()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->context_, target);
  }

  // repeated .dg.model.WitnessResult Results = 2;
  for (unsigned int i = 0, n = this->results_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->results(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:dg.model.WitnessBatchResponse)
  return target;
}

int WitnessBatchResponse::ByteSize() const {
  int total_size = 0;

  // optional .dg.model.WitnessResponseContext Context = 1;
  if (this->has_context()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->context_);
  }

  // repeated .dg.model.WitnessResult Results = 2;
  total_size += 1 * this->results_size();
  for (int i = 0; i < this->results_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->results(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WitnessBatchResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const WitnessBatchResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const WitnessBatchResponse>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WitnessBatchResponse::MergeFrom(const WitnessBatchResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  results_.MergeFrom(from.results_);
  if (from.has_context()) {
    mutable_context()->::dg::model::WitnessResponseContext::MergeFrom(from.context());
  }
}

void WitnessBatchResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WitnessBatchResponse::CopyFrom(const WitnessBatchResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WitnessBatchResponse::IsInitialized() const {

  return true;
}

void WitnessBatchResponse::Swap(WitnessBatchResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WitnessBatchResponse::InternalSwap(WitnessBatchResponse* other) {
  std::swap(context_, other->context_);
  results_.UnsafeArenaSwap(&other->results_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WitnessBatchResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WitnessBatchResponse_descriptor_;
  metadata.reflection = WitnessBatchResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WitnessBatchResponse

// optional .dg.model.WitnessResponseContext Context = 1;
bool WitnessBatchResponse::has_context() const {
  return !_is_default_instance_ && context_ != NULL;
}
void WitnessBatchResponse::clear_context() {
  if (GetArenaNoVirtual() == NULL && context_ != NULL) delete context_;
  context_ = NULL;
}
const ::dg::model::WitnessResponseContext& WitnessBatchResponse::context() const {
  // @@protoc_insertion_point(field_get:dg.model.WitnessBatchResponse.Context)
  return context_ != NULL ? *context_ : *default_instance_->context_;
}
::dg::model::WitnessResponseContext* WitnessBatchResponse::mutable_context() {
  
  if (context_ == NULL) {
    context_ = new ::dg::model::WitnessResponseContext;
  }
  // @@protoc_insertion_point(field_mutable:dg.model.WitnessBatchResponse.Context)
  return context_;
}
::dg::model::WitnessResponseContext* WitnessBatchResponse::release_context() {
  
  ::dg::model::WitnessResponseContext* temp = context_;
  context_ = NULL;
  return temp;
}
void WitnessBatchResponse::set_allocated_context(::dg::model::WitnessResponseContext* context) {
  delete context_;
  context_ = context;
  if (context) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dg.model.WitnessBatchResponse.Context)
}

// repeated .dg.model.WitnessResult Results = 2;
int WitnessBatchResponse::results_size() const {
  return results_.size();
}
void WitnessBatchResponse::clear_results() {
  results_.Clear();
}
const ::dg::model::WitnessResult& WitnessBatchResponse::results(int index) const {
  // @@protoc_insertion_point(field_get:dg.model.WitnessBatchResponse.Results)
  return results_.Get(index);
}
::dg::model::WitnessResult* WitnessBatchResponse::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:dg.model.WitnessBatchResponse.Results)
  return results_.Mutable(index);
}
::dg::model::WitnessResult* WitnessBatchResponse::add_results() {
  // @@protoc_insertion_point(field_add:dg.model.WitnessBatchResponse.Results)
  return results_.Add();
}
::google::protobuf::RepeatedPtrField< ::dg::model::WitnessResult >*
WitnessBatchResponse::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:dg.model.WitnessBatchResponse.Results)
  return &results_;
}
const ::google::protobuf::RepeatedPtrField< ::dg::model::WitnessResult >&
WitnessBatchResponse::results() const {
  // @@protoc_insertion_point(field_list:dg.model.WitnessBatchResponse.Results)
  return results_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WitnessRequestContext::kSessionIdFieldNumber;
const int WitnessRequestContext::kFunctionsFieldNumber;
const int WitnessRequestContext::kTypeFieldNumber;
const int WitnessRequestContext::kStorageFieldNumber;
const int WitnessRequestContext::kParamsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WitnessRequestContext::WitnessRequestContext()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dg.model.WitnessRequestContext)
}

void WitnessRequestContext::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  storage_ = const_cast< ::dg::model::StorageConfig*>(&::dg::model::StorageConfig::default_instance());
}

WitnessRequestContext::WitnessRequestContext(const WitnessRequestContext& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dg.model.WitnessRequestContext)
}

void WitnessRequestContext::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  sessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  storage_ = NULL;
  params_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  params_.SetEntryDescriptor(
      &::dg::model::WitnessRequestContext_ParamsEntry_descriptor_);
}

WitnessRequestContext::~WitnessRequestContext() {
  // @@protoc_insertion_point(destructor:dg.model.WitnessRequestContext)
  SharedDtor();
}

void WitnessRequestContext::SharedDtor() {
  sessionid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete storage_;
  }
}

void WitnessRequestContext::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WitnessRequestContext::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WitnessRequestContext_descriptor_;
}

const WitnessRequestContext& WitnessRequestContext::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_witness_2eproto();
  return *default_instance_;
}

WitnessRequestContext* WitnessRequestContext::default_instance_ = NULL;

WitnessRequestContext* WitnessRequestContext::New(::google::protobuf::Arena* arena) const {
  WitnessRequestContext* n = new WitnessRequestContext;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WitnessRequestContext::Clear() {
  sessionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  if (GetArenaNoVirtual() == NULL && storage_ != NULL) delete storage_;
  storage_ = NULL;
  functions_.Clear();
  params_.Clear();
}

bool WitnessRequestContext::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dg.model.WitnessRequestContext)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string SessionId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sessionid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sessionid().data(), this->sessionid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dg.model.WitnessRequestContext.SessionId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_Functions;
        break;
      }

      // repeated .dg.model.RecognizeFunctions Functions = 4;
      case 4: {
        if (tag == 34) {
         parse_Functions:
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit = input->PushLimit(length);
          while (input->BytesUntilLimit() > 0) {
            int value;
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            add_functions(static_cast< ::dg::model::RecognizeFunctions >(value));
          }
          input->PopLimit(limit);
        } else if (tag == 32) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          add_functions(static_cast< ::dg::model::RecognizeFunctions >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_Type;
        break;
      }

      // optional .dg.model.RecognizeType Type = 5;
      case 5: {
        if (tag == 40) {
         parse_Type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::dg::model::RecognizeType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_Storage;
        break;
      }

      // optional .dg.model.StorageConfig Storage = 6;
      case 6: {
        if (tag == 50) {
         parse_Storage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_storage()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_Params;
        break;
      }

      // map<string, string> Params = 7;
      case 7: {
        if (tag == 58) {
         parse_Params:
          DO_(input->IncrementRecursionDepth());
         parse_loop_Params:
          ::google::protobuf::scoped_ptr<WitnessRequestContext_ParamsEntry> entry(params_.NewEntry());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, entry.get()));
          (*mutable_params())[entry->key()] = *entry->mutable_value();
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            entry->key().data(), entry->key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dg.model.WitnessRequestContext.ParamsEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            entry->mutable_value()->data(),
            entry->mutable_value()->length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dg.model.WitnessRequestContext.ParamsEntry.value"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_loop_Params;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dg.model.WitnessRequestContext)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dg.model.WitnessRequestContext)
  return false;
#undef DO_
}

void WitnessRequestContext::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dg.model.WitnessRequestContext)
  // optional string SessionId = 1;
  if (this->sessionid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sessionid().data(), this->sessionid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.WitnessRequestContext.SessionId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sessionid(), output);
  }

  // repeated .dg.model.RecognizeFunctions Functions = 4;
  if (this->functions_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(_functions_cached_byte_size_);
  }
  for (int i = 0; i < this->functions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnumNoTag(
      this->functions(i), output);
  }

  // optional .dg.model.RecognizeType Type = 5;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->type(), output);
  }

  // optional .dg.model.StorageConfig Storage = 6;
  if (this->has_storage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->storage_, output);
  }

  // map<string, string> Params = 7;
  {
    ::google::protobuf::scoped_ptr<WitnessRequestContext_ParamsEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->params().begin();
        it != this->params().end(); ++it) {
      entry.reset(params_.NewEntryWrapper(it->first, it->second));
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
          7, *entry, output);
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        it->first.data(), it->first.length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "dg.model.WitnessRequestContext.ParamsEntry.key");
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        it->second.data(), it->second.length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "dg.model.WitnessRequestContext.ParamsEntry.value");
    }
  }

  // @@protoc_insertion_point(serialize_end:dg.model.WitnessRequestContext)
}

::google::protobuf::uint8* WitnessRequestContext::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dg.model.WitnessRequestContext)
  // optional string SessionId = 1;
  if (this->sessionid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sessionid().data(), this->sessionid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.WitnessRequestContext.SessionId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sessionid(), target);
  }

  // repeated .dg.model.RecognizeFunctions Functions = 4;
  if (this->functions_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(    _functions_cached_byte_size_, target);
  }
  for (int i = 0; i < this->functions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->functions(i), target);
  }

  // optional .dg.model.RecognizeType Type = 5;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->type(), target);
  }

  // optional .dg.model.StorageConfig Storage = 6;
  if (this->has_storage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, *this->storage_, target);
  }

  // map<string, string> Params = 7;
  {
    ::google::protobuf::scoped_ptr<WitnessRequestContext_ParamsEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->params().begin();
        it != this->params().end(); ++it) {
      entry.reset(params_.NewEntryWrapper(it->first, it->second));
      target = ::google::protobuf::internal::WireFormatLite::
          WriteMessageNoVirtualToArray(
              7, *entry, target);
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        it->first.data(), it->first.length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "dg.model.WitnessRequestContext.ParamsEntry.key");
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        it->second.data(), it->second.length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "dg.model.WitnessRequestContext.ParamsEntry.value");
    }
  }

  // @@protoc_insertion_point(serialize_to_array_end:dg.model.WitnessRequestContext)
  return target;
}

int WitnessRequestContext::ByteSize() const {
  int total_size = 0;

  // optional string SessionId = 1;
  if (this->sessionid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sessionid());
  }

  // optional .dg.model.RecognizeType Type = 5;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // optional .dg.model.StorageConfig Storage = 6;
  if (this->has_storage()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->storage_);
  }

  // repeated .dg.model.RecognizeFunctions Functions = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->functions_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->functions(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _functions_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // map<string, string> Params = 7;
  total_size += 1 * this->params_size();
  {
    ::google::protobuf::scoped_ptr<WitnessRequestContext_ParamsEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->params().begin();
        it != this->params().end(); ++it) {
      entry.reset(params_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WitnessRequestContext::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const WitnessRequestContext* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const WitnessRequestContext>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WitnessRequestContext::MergeFrom(const WitnessRequestContext& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  functions_.MergeFrom(from.functions_);
  params_.MergeFrom(from.params_);
  if (from.sessionid().size() > 0) {

    sessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sessionid_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.has_storage()) {
    mutable_storage()->::dg::model::StorageConfig::MergeFrom(from.storage());
  }
}

void WitnessRequestContext::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WitnessRequestContext::CopyFrom(const WitnessRequestContext& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WitnessRequestContext::IsInitialized() const {

  return true;
}

void WitnessRequestContext::Swap(WitnessRequestContext* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WitnessRequestContext::InternalSwap(WitnessRequestContext* other) {
  sessionid_.Swap(&other->sessionid_);
  functions_.UnsafeArenaSwap(&other->functions_);
  std::swap(type_, other->type_);
  std::swap(storage_, other->storage_);
  params_.Swap(&other->params_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WitnessRequestContext::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WitnessRequestContext_descriptor_;
  metadata.reflection = WitnessRequestContext_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WitnessRequestContext

// optional string SessionId = 1;
void WitnessRequestContext::clear_sessionid() {
  sessionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& WitnessRequestContext::sessionid() const {
  // @@protoc_insertion_point(field_get:dg.model.WitnessRequestContext.SessionId)
  return sessionid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void WitnessRequestContext::set_sessionid(const ::std::string& value) {
  
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.WitnessRequestContext.SessionId)
}
 void WitnessRequestContext::set_sessionid(const char* value) {
  
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.WitnessRequestContext.SessionId)
}
 void WitnessRequestContext::set_sessionid(const char* value, size_t size) {
  
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.WitnessRequestContext.SessionId)
}
 ::std::string* WitnessRequestContext::mutable_sessionid() {
  
  // @@protoc_insertion_point(field_mutable:dg.model.WitnessRequestContext.SessionId)
  return sessionid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* WitnessRequestContext::release_sessionid() {
  
  return sessionid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void WitnessRequestContext::set_allocated_sessionid(::std::string* sessionid) {
  if (sessionid != NULL) {
    
  } else {
    
  }
  sessionid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sessionid);
  // @@protoc_insertion_point(field_set_allocated:dg.model.WitnessRequestContext.SessionId)
}

// repeated .dg.model.RecognizeFunctions Functions = 4;
int WitnessRequestContext::functions_size() const {
  return functions_.size();
}
void WitnessRequestContext::clear_functions() {
  functions_.Clear();
}
 ::dg::model::RecognizeFunctions WitnessRequestContext::functions(int index) const {
  // @@protoc_insertion_point(field_get:dg.model.WitnessRequestContext.Functions)
  return static_cast< ::dg::model::RecognizeFunctions >(functions_.Get(index));
}
 void WitnessRequestContext::set_functions(int index, ::dg::model::RecognizeFunctions value) {
  functions_.Set(index, value);
  // @@protoc_insertion_point(field_set:dg.model.WitnessRequestContext.Functions)
}
 void WitnessRequestContext::add_functions(::dg::model::RecognizeFunctions value) {
  functions_.Add(value);
  // @@protoc_insertion_point(field_add:dg.model.WitnessRequestContext.Functions)
}
 const ::google::protobuf::RepeatedField<int>&
WitnessRequestContext::functions() const {
  // @@protoc_insertion_point(field_list:dg.model.WitnessRequestContext.Functions)
  return functions_;
}
 ::google::protobuf::RepeatedField<int>*
WitnessRequestContext::mutable_functions() {
  // @@protoc_insertion_point(field_mutable_list:dg.model.WitnessRequestContext.Functions)
  return &functions_;
}

// optional .dg.model.RecognizeType Type = 5;
void WitnessRequestContext::clear_type() {
  type_ = 0;
}
 ::dg::model::RecognizeType WitnessRequestContext::type() const {
  // @@protoc_insertion_point(field_get:dg.model.WitnessRequestContext.Type)
  return static_cast< ::dg::model::RecognizeType >(type_);
}
 void WitnessRequestContext::set_type(::dg::model::RecognizeType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:dg.model.WitnessRequestContext.Type)
}

// optional .dg.model.StorageConfig Storage = 6;
bool WitnessRequestContext::has_storage() const {
  return !_is_default_instance_ && storage_ != NULL;
}
void WitnessRequestContext::clear_storage() {
  if (GetArenaNoVirtual() == NULL && storage_ != NULL) delete storage_;
  storage_ = NULL;
}
const ::dg::model::StorageConfig& WitnessRequestContext::storage() const {
  // @@protoc_insertion_point(field_get:dg.model.WitnessRequestContext.Storage)
  return storage_ != NULL ? *storage_ : *default_instance_->storage_;
}
::dg::model::StorageConfig* WitnessRequestContext::mutable_storage() {
  
  if (storage_ == NULL) {
    storage_ = new ::dg::model::StorageConfig;
  }
  // @@protoc_insertion_point(field_mutable:dg.model.WitnessRequestContext.Storage)
  return storage_;
}
::dg::model::StorageConfig* WitnessRequestContext::release_storage() {
  
  ::dg::model::StorageConfig* temp = storage_;
  storage_ = NULL;
  return temp;
}
void WitnessRequestContext::set_allocated_storage(::dg::model::StorageConfig* storage) {
  delete storage_;
  storage_ = storage;
  if (storage) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dg.model.WitnessRequestContext.Storage)
}

// map<string, string> Params = 7;
int WitnessRequestContext::params_size() const {
  return params_.size();
}
void WitnessRequestContext::clear_params() {
  params_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::std::string >&
WitnessRequestContext::params() const {
  // @@protoc_insertion_point(field_map:dg.model.WitnessRequestContext.Params)
  return params_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::std::string >*
WitnessRequestContext::mutable_params() {
  // @@protoc_insertion_point(field_mutable_map:dg.model.WitnessRequestContext.Params)
  return params_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WitnessImage::kDataFieldNumber;
const int WitnessImage::kSensorIdFieldNumber;
const int WitnessImage::kSensorNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WitnessImage::WitnessImage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dg.model.WitnessImage)
}

void WitnessImage::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  data_ = const_cast< ::dg::model::Image*>(&::dg::model::Image::default_instance());
}

WitnessImage::WitnessImage(const WitnessImage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dg.model.WitnessImage)
}

void WitnessImage::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  data_ = NULL;
  sensorid_ = 0;
  sensorname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

WitnessImage::~WitnessImage() {
  // @@protoc_insertion_point(destructor:dg.model.WitnessImage)
  SharedDtor();
}

void WitnessImage::SharedDtor() {
  sensorname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete data_;
  }
}

void WitnessImage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WitnessImage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WitnessImage_descriptor_;
}

const WitnessImage& WitnessImage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_witness_2eproto();
  return *default_instance_;
}

WitnessImage* WitnessImage::default_instance_ = NULL;

WitnessImage* WitnessImage::New(::google::protobuf::Arena* arena) const {
  WitnessImage* n = new WitnessImage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WitnessImage::Clear() {
  if (GetArenaNoVirtual() == NULL && data_ != NULL) delete data_;
  data_ = NULL;
  sensorid_ = 0;
  sensorname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool WitnessImage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dg.model.WitnessImage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .dg.model.Image Data = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_SensorId;
        break;
      }

      // optional int32 SensorId = 2;
      case 2: {
        if (tag == 16) {
         parse_SensorId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sensorid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_SensorName;
        break;
      }

      // optional string SensorName = 3;
      case 3: {
        if (tag == 26) {
         parse_SensorName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sensorname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sensorname().data(), this->sensorname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dg.model.WitnessImage.SensorName"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dg.model.WitnessImage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dg.model.WitnessImage)
  return false;
#undef DO_
}

void WitnessImage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dg.model.WitnessImage)
  // optional .dg.model.Image Data = 1;
  if (this->has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->data_, output);
  }

  // optional int32 SensorId = 2;
  if (this->sensorid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sensorid(), output);
  }

  // optional string SensorName = 3;
  if (this->sensorname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sensorname().data(), this->sensorname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.WitnessImage.SensorName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->sensorname(), output);
  }

  // @@protoc_insertion_point(serialize_end:dg.model.WitnessImage)
}

::google::protobuf::uint8* WitnessImage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dg.model.WitnessImage)
  // optional .dg.model.Image Data = 1;
  if (this->has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->data_, target);
  }

  // optional int32 SensorId = 2;
  if (this->sensorid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sensorid(), target);
  }

  // optional string SensorName = 3;
  if (this->sensorname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sensorname().data(), this->sensorname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.WitnessImage.SensorName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->sensorname(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:dg.model.WitnessImage)
  return target;
}

int WitnessImage::ByteSize() const {
  int total_size = 0;

  // optional .dg.model.Image Data = 1;
  if (this->has_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->data_);
  }

  // optional int32 SensorId = 2;
  if (this->sensorid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sensorid());
  }

  // optional string SensorName = 3;
  if (this->sensorname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sensorname());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WitnessImage::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const WitnessImage* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const WitnessImage>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WitnessImage::MergeFrom(const WitnessImage& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_data()) {
    mutable_data()->::dg::model::Image::MergeFrom(from.data());
  }
  if (from.sensorid() != 0) {
    set_sensorid(from.sensorid());
  }
  if (from.sensorname().size() > 0) {

    sensorname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sensorname_);
  }
}

void WitnessImage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WitnessImage::CopyFrom(const WitnessImage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WitnessImage::IsInitialized() const {

  return true;
}

void WitnessImage::Swap(WitnessImage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WitnessImage::InternalSwap(WitnessImage* other) {
  std::swap(data_, other->data_);
  std::swap(sensorid_, other->sensorid_);
  sensorname_.Swap(&other->sensorname_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WitnessImage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WitnessImage_descriptor_;
  metadata.reflection = WitnessImage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WitnessImage

// optional .dg.model.Image Data = 1;
bool WitnessImage::has_data() const {
  return !_is_default_instance_ && data_ != NULL;
}
void WitnessImage::clear_data() {
  if (GetArenaNoVirtual() == NULL && data_ != NULL) delete data_;
  data_ = NULL;
}
const ::dg::model::Image& WitnessImage::data() const {
  // @@protoc_insertion_point(field_get:dg.model.WitnessImage.Data)
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
::dg::model::Image* WitnessImage::mutable_data() {
  
  if (data_ == NULL) {
    data_ = new ::dg::model::Image;
  }
  // @@protoc_insertion_point(field_mutable:dg.model.WitnessImage.Data)
  return data_;
}
::dg::model::Image* WitnessImage::release_data() {
  
  ::dg::model::Image* temp = data_;
  data_ = NULL;
  return temp;
}
void WitnessImage::set_allocated_data(::dg::model::Image* data) {
  delete data_;
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dg.model.WitnessImage.Data)
}

// optional int32 SensorId = 2;
void WitnessImage::clear_sensorid() {
  sensorid_ = 0;
}
 ::google::protobuf::int32 WitnessImage::sensorid() const {
  // @@protoc_insertion_point(field_get:dg.model.WitnessImage.SensorId)
  return sensorid_;
}
 void WitnessImage::set_sensorid(::google::protobuf::int32 value) {
  
  sensorid_ = value;
  // @@protoc_insertion_point(field_set:dg.model.WitnessImage.SensorId)
}

// optional string SensorName = 3;
void WitnessImage::clear_sensorname() {
  sensorname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& WitnessImage::sensorname() const {
  // @@protoc_insertion_point(field_get:dg.model.WitnessImage.SensorName)
  return sensorname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void WitnessImage::set_sensorname(const ::std::string& value) {
  
  sensorname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.WitnessImage.SensorName)
}
 void WitnessImage::set_sensorname(const char* value) {
  
  sensorname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.WitnessImage.SensorName)
}
 void WitnessImage::set_sensorname(const char* value, size_t size) {
  
  sensorname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.WitnessImage.SensorName)
}
 ::std::string* WitnessImage::mutable_sensorname() {
  
  // @@protoc_insertion_point(field_mutable:dg.model.WitnessImage.SensorName)
  return sensorname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* WitnessImage::release_sensorname() {
  
  return sensorname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void WitnessImage::set_allocated_sensorname(::std::string* sensorname) {
  if (sensorname != NULL) {
    
  } else {
    
  }
  sensorname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sensorname);
  // @@protoc_insertion_point(field_set_allocated:dg.model.WitnessImage.SensorName)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WitnessResponseContext::kSessionIdFieldNumber;
const int WitnessResponseContext::kStatusFieldNumber;
const int WitnessResponseContext::kMessageFieldNumber;
const int WitnessResponseContext::kRequestTsFieldNumber;
const int WitnessResponseContext::kResponseTsFieldNumber;
const int WitnessResponseContext::kDebugTsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WitnessResponseContext::WitnessResponseContext()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dg.model.WitnessResponseContext)
}

void WitnessResponseContext::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  requestts_ = const_cast< ::dg::model::Time*>(&::dg::model::Time::default_instance());
  responsets_ = const_cast< ::dg::model::Time*>(&::dg::model::Time::default_instance());
}

WitnessResponseContext::WitnessResponseContext(const WitnessResponseContext& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dg.model.WitnessResponseContext)
}

void WitnessResponseContext::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  sessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  requestts_ = NULL;
  responsets_ = NULL;
  debugts_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  debugts_.SetEntryDescriptor(
      &::dg::model::WitnessResponseContext_DebugTsEntry_descriptor_);
}

WitnessResponseContext::~WitnessResponseContext() {
  // @@protoc_insertion_point(destructor:dg.model.WitnessResponseContext)
  SharedDtor();
}

void WitnessResponseContext::SharedDtor() {
  sessionid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete requestts_;
    delete responsets_;
  }
}

void WitnessResponseContext::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WitnessResponseContext::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WitnessResponseContext_descriptor_;
}

const WitnessResponseContext& WitnessResponseContext::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_witness_2eproto();
  return *default_instance_;
}

WitnessResponseContext* WitnessResponseContext::default_instance_ = NULL;

WitnessResponseContext* WitnessResponseContext::New(::google::protobuf::Arena* arena) const {
  WitnessResponseContext* n = new WitnessResponseContext;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WitnessResponseContext::Clear() {
  sessionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && requestts_ != NULL) delete requestts_;
  requestts_ = NULL;
  if (GetArenaNoVirtual() == NULL && responsets_ != NULL) delete responsets_;
  responsets_ = NULL;
  debugts_.Clear();
}

bool WitnessResponseContext::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dg.model.WitnessResponseContext)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string SessionId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sessionid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sessionid().data(), this->sessionid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dg.model.WitnessResponseContext.SessionId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Status;
        break;
      }

      // optional string Status = 2;
      case 2: {
        if (tag == 18) {
         parse_Status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_status()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->status().data(), this->status().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dg.model.WitnessResponseContext.Status"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Message;
        break;
      }

      // optional string Message = 3;
      case 3: {
        if (tag == 26) {
         parse_Message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dg.model.WitnessResponseContext.Message"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_RequestTs;
        break;
      }

      // optional .dg.model.Time RequestTs = 4;
      case 4: {
        if (tag == 34) {
         parse_RequestTs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_requestts()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_ResponseTs;
        break;
      }

      // optional .dg.model.Time ResponseTs = 5;
      case 5: {
        if (tag == 42) {
         parse_ResponseTs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_responsets()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_DebugTs;
        break;
      }

      // map<string, .dg.model.Time> DebugTs = 6;
      case 6: {
        if (tag == 50) {
         parse_DebugTs:
          DO_(input->IncrementRecursionDepth());
         parse_loop_DebugTs:
          ::google::protobuf::scoped_ptr<WitnessResponseContext_DebugTsEntry> entry(debugts_.NewEntry());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, entry.get()));
          (*mutable_debugts())[entry->key()].Swap(entry->mutable_value());
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            entry->key().data(), entry->key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dg.model.WitnessResponseContext.DebugTsEntry.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_loop_DebugTs;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dg.model.WitnessResponseContext)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dg.model.WitnessResponseContext)
  return false;
#undef DO_
}

void WitnessResponseContext::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dg.model.WitnessResponseContext)
  // optional string SessionId = 1;
  if (this->sessionid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sessionid().data(), this->sessionid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.WitnessResponseContext.SessionId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sessionid(), output);
  }

  // optional string Status = 2;
  if (this->status().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->status().data(), this->status().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.WitnessResponseContext.Status");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->status(), output);
  }

  // optional string Message = 3;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.WitnessResponseContext.Message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->message(), output);
  }

  // optional .dg.model.Time RequestTs = 4;
  if (this->has_requestts()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->requestts_, output);
  }

  // optional .dg.model.Time ResponseTs = 5;
  if (this->has_responsets()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->responsets_, output);
  }

  // map<string, .dg.model.Time> DebugTs = 6;
  {
    ::google::protobuf::scoped_ptr<WitnessResponseContext_DebugTsEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::dg::model::Time >::const_iterator
        it = this->debugts().begin();
        it != this->debugts().end(); ++it) {
      entry.reset(debugts_.NewEntryWrapper(it->first, it->second));
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
          6, *entry, output);
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        it->first.data(), it->first.length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "dg.model.WitnessResponseContext.DebugTsEntry.key");
    }
  }

  // @@protoc_insertion_point(serialize_end:dg.model.WitnessResponseContext)
}

::google::protobuf::uint8* WitnessResponseContext::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dg.model.WitnessResponseContext)
  // optional string SessionId = 1;
  if (this->sessionid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sessionid().data(), this->sessionid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.WitnessResponseContext.SessionId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sessionid(), target);
  }

  // optional string Status = 2;
  if (this->status().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->status().data(), this->status().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.WitnessResponseContext.Status");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->status(), target);
  }

  // optional string Message = 3;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.WitnessResponseContext.Message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->message(), target);
  }

  // optional .dg.model.Time RequestTs = 4;
  if (this->has_requestts()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, *this->requestts_, target);
  }

  // optional .dg.model.Time ResponseTs = 5;
  if (this->has_responsets()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, *this->responsets_, target);
  }

  // map<string, .dg.model.Time> DebugTs = 6;
  {
    ::google::protobuf::scoped_ptr<WitnessResponseContext_DebugTsEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::dg::model::Time >::const_iterator
        it = this->debugts().begin();
        it != this->debugts().end(); ++it) {
      entry.reset(debugts_.NewEntryWrapper(it->first, it->second));
      target = ::google::protobuf::internal::WireFormatLite::
          WriteMessageNoVirtualToArray(
              6, *entry, target);
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        it->first.data(), it->first.length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "dg.model.WitnessResponseContext.DebugTsEntry.key");
    }
  }

  // @@protoc_insertion_point(serialize_to_array_end:dg.model.WitnessResponseContext)
  return target;
}

int WitnessResponseContext::ByteSize() const {
  int total_size = 0;

  // optional string SessionId = 1;
  if (this->sessionid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sessionid());
  }

  // optional string Status = 2;
  if (this->status().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->status());
  }

  // optional string Message = 3;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  // optional .dg.model.Time RequestTs = 4;
  if (this->has_requestts()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->requestts_);
  }

  // optional .dg.model.Time ResponseTs = 5;
  if (this->has_responsets()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->responsets_);
  }

  // map<string, .dg.model.Time> DebugTs = 6;
  total_size += 1 * this->debugts_size();
  {
    ::google::protobuf::scoped_ptr<WitnessResponseContext_DebugTsEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::dg::model::Time >::const_iterator
        it = this->debugts().begin();
        it != this->debugts().end(); ++it) {
      entry.reset(debugts_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WitnessResponseContext::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const WitnessResponseContext* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const WitnessResponseContext>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WitnessResponseContext::MergeFrom(const WitnessResponseContext& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  debugts_.MergeFrom(from.debugts_);
  if (from.sessionid().size() > 0) {

    sessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sessionid_);
  }
  if (from.status().size() > 0) {

    status_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.status_);
  }
  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  if (from.has_requestts()) {
    mutable_requestts()->::dg::model::Time::MergeFrom(from.requestts());
  }
  if (from.has_responsets()) {
    mutable_responsets()->::dg::model::Time::MergeFrom(from.responsets());
  }
}

void WitnessResponseContext::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WitnessResponseContext::CopyFrom(const WitnessResponseContext& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WitnessResponseContext::IsInitialized() const {

  return true;
}

void WitnessResponseContext::Swap(WitnessResponseContext* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WitnessResponseContext::InternalSwap(WitnessResponseContext* other) {
  sessionid_.Swap(&other->sessionid_);
  status_.Swap(&other->status_);
  message_.Swap(&other->message_);
  std::swap(requestts_, other->requestts_);
  std::swap(responsets_, other->responsets_);
  debugts_.Swap(&other->debugts_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WitnessResponseContext::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WitnessResponseContext_descriptor_;
  metadata.reflection = WitnessResponseContext_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WitnessResponseContext

// optional string SessionId = 1;
void WitnessResponseContext::clear_sessionid() {
  sessionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& WitnessResponseContext::sessionid() const {
  // @@protoc_insertion_point(field_get:dg.model.WitnessResponseContext.SessionId)
  return sessionid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void WitnessResponseContext::set_sessionid(const ::std::string& value) {
  
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.WitnessResponseContext.SessionId)
}
 void WitnessResponseContext::set_sessionid(const char* value) {
  
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.WitnessResponseContext.SessionId)
}
 void WitnessResponseContext::set_sessionid(const char* value, size_t size) {
  
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.WitnessResponseContext.SessionId)
}
 ::std::string* WitnessResponseContext::mutable_sessionid() {
  
  // @@protoc_insertion_point(field_mutable:dg.model.WitnessResponseContext.SessionId)
  return sessionid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* WitnessResponseContext::release_sessionid() {
  
  return sessionid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void WitnessResponseContext::set_allocated_sessionid(::std::string* sessionid) {
  if (sessionid != NULL) {
    
  } else {
    
  }
  sessionid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sessionid);
  // @@protoc_insertion_point(field_set_allocated:dg.model.WitnessResponseContext.SessionId)
}

// optional string Status = 2;
void WitnessResponseContext::clear_status() {
  status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& WitnessResponseContext::status() const {
  // @@protoc_insertion_point(field_get:dg.model.WitnessResponseContext.Status)
  return status_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void WitnessResponseContext::set_status(const ::std::string& value) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.WitnessResponseContext.Status)
}
 void WitnessResponseContext::set_status(const char* value) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.WitnessResponseContext.Status)
}
 void WitnessResponseContext::set_status(const char* value, size_t size) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.WitnessResponseContext.Status)
}
 ::std::string* WitnessResponseContext::mutable_status() {
  
  // @@protoc_insertion_point(field_mutable:dg.model.WitnessResponseContext.Status)
  return status_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* WitnessResponseContext::release_status() {
  
  return status_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void WitnessResponseContext::set_allocated_status(::std::string* status) {
  if (status != NULL) {
    
  } else {
    
  }
  status_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), status);
  // @@protoc_insertion_point(field_set_allocated:dg.model.WitnessResponseContext.Status)
}

// optional string Message = 3;
void WitnessResponseContext::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& WitnessResponseContext::message() const {
  // @@protoc_insertion_point(field_get:dg.model.WitnessResponseContext.Message)
  return message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void WitnessResponseContext::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.WitnessResponseContext.Message)
}
 void WitnessResponseContext::set_message(const char* value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.WitnessResponseContext.Message)
}
 void WitnessResponseContext::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.WitnessResponseContext.Message)
}
 ::std::string* WitnessResponseContext::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:dg.model.WitnessResponseContext.Message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* WitnessResponseContext::release_message() {
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void WitnessResponseContext::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:dg.model.WitnessResponseContext.Message)
}

// optional .dg.model.Time RequestTs = 4;
bool WitnessResponseContext::has_requestts() const {
  return !_is_default_instance_ && requestts_ != NULL;
}
void WitnessResponseContext::clear_requestts() {
  if (GetArenaNoVirtual() == NULL && requestts_ != NULL) delete requestts_;
  requestts_ = NULL;
}
const ::dg::model::Time& WitnessResponseContext::requestts() const {
  // @@protoc_insertion_point(field_get:dg.model.WitnessResponseContext.RequestTs)
  return requestts_ != NULL ? *requestts_ : *default_instance_->requestts_;
}
::dg::model::Time* WitnessResponseContext::mutable_requestts() {
  
  if (requestts_ == NULL) {
    requestts_ = new ::dg::model::Time;
  }
  // @@protoc_insertion_point(field_mutable:dg.model.WitnessResponseContext.RequestTs)
  return requestts_;
}
::dg::model::Time* WitnessResponseContext::release_requestts() {
  
  ::dg::model::Time* temp = requestts_;
  requestts_ = NULL;
  return temp;
}
void WitnessResponseContext::set_allocated_requestts(::dg::model::Time* requestts) {
  delete requestts_;
  requestts_ = requestts;
  if (requestts) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dg.model.WitnessResponseContext.RequestTs)
}

// optional .dg.model.Time ResponseTs = 5;
bool WitnessResponseContext::has_responsets() const {
  return !_is_default_instance_ && responsets_ != NULL;
}
void WitnessResponseContext::clear_responsets() {
  if (GetArenaNoVirtual() == NULL && responsets_ != NULL) delete responsets_;
  responsets_ = NULL;
}
const ::dg::model::Time& WitnessResponseContext::responsets() const {
  // @@protoc_insertion_point(field_get:dg.model.WitnessResponseContext.ResponseTs)
  return responsets_ != NULL ? *responsets_ : *default_instance_->responsets_;
}
::dg::model::Time* WitnessResponseContext::mutable_responsets() {
  
  if (responsets_ == NULL) {
    responsets_ = new ::dg::model::Time;
  }
  // @@protoc_insertion_point(field_mutable:dg.model.WitnessResponseContext.ResponseTs)
  return responsets_;
}
::dg::model::Time* WitnessResponseContext::release_responsets() {
  
  ::dg::model::Time* temp = responsets_;
  responsets_ = NULL;
  return temp;
}
void WitnessResponseContext::set_allocated_responsets(::dg::model::Time* responsets) {
  delete responsets_;
  responsets_ = responsets;
  if (responsets) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dg.model.WitnessResponseContext.ResponseTs)
}

// map<string, .dg.model.Time> DebugTs = 6;
int WitnessResponseContext::debugts_size() const {
  return debugts_.size();
}
void WitnessResponseContext::clear_debugts() {
  debugts_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::dg::model::Time >&
WitnessResponseContext::debugts() const {
  // @@protoc_insertion_point(field_map:dg.model.WitnessResponseContext.DebugTs)
  return debugts_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::dg::model::Time >*
WitnessResponseContext::mutable_debugts() {
  // @@protoc_insertion_point(field_mutable_map:dg.model.WitnessResponseContext.DebugTs)
  return debugts_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WitnessResult::kInnerStatusFieldNumber;
const int WitnessResult::kInnerMessageFieldNumber;
const int WitnessResult::kImageFieldNumber;
const int WitnessResult::kVehiclesFieldNumber;
const int WitnessResult::kFacesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WitnessResult::WitnessResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dg.model.WitnessResult)
}

void WitnessResult::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  image_ = const_cast< ::dg::model::WitnessImage*>(&::dg::model::WitnessImage::default_instance());
}

WitnessResult::WitnessResult(const WitnessResult& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dg.model.WitnessResult)
}

void WitnessResult::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  innerstatus_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  innermessage_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_ = NULL;
}

WitnessResult::~WitnessResult() {
  // @@protoc_insertion_point(destructor:dg.model.WitnessResult)
  SharedDtor();
}

void WitnessResult::SharedDtor() {
  innerstatus_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  innermessage_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete image_;
  }
}

void WitnessResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WitnessResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WitnessResult_descriptor_;
}

const WitnessResult& WitnessResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_witness_2eproto();
  return *default_instance_;
}

WitnessResult* WitnessResult::default_instance_ = NULL;

WitnessResult* WitnessResult::New(::google::protobuf::Arena* arena) const {
  WitnessResult* n = new WitnessResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WitnessResult::Clear() {
  innerstatus_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  innermessage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && image_ != NULL) delete image_;
  image_ = NULL;
  vehicles_.Clear();
  faces_.Clear();
}

bool WitnessResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dg.model.WitnessResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string InnerStatus = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_innerstatus()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->innerstatus().data(), this->innerstatus().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dg.model.WitnessResult.InnerStatus"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_InnerMessage;
        break;
      }

      // optional string InnerMessage = 2;
      case 2: {
        if (tag == 18) {
         parse_InnerMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_innermessage()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->innermessage().data(), this->innermessage().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dg.model.WitnessResult.InnerMessage"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Image;
        break;
      }

      // optional .dg.model.WitnessImage Image = 3;
      case 3: {
        if (tag == 26) {
         parse_Image:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_image()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_Vehicles;
        break;
      }

      // repeated .dg.model.RecognizedVehicle Vehicles = 4;
      case 4: {
        if (tag == 34) {
         parse_Vehicles:
          DO_(input->IncrementRecursionDepth());
         parse_loop_Vehicles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_vehicles()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_Vehicles;
        if (input->ExpectTag(42)) goto parse_loop_Faces;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .dg.model.RecognizedFace Faces = 5;
      case 5: {
        if (tag == 42) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_Faces:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_faces()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_Faces;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dg.model.WitnessResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dg.model.WitnessResult)
  return false;
#undef DO_
}

void WitnessResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dg.model.WitnessResult)
  // optional string InnerStatus = 1;
  if (this->innerstatus().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->innerstatus().data(), this->innerstatus().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.WitnessResult.InnerStatus");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->innerstatus(), output);
  }

  // optional string InnerMessage = 2;
  if (this->innermessage().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->innermessage().data(), this->innermessage().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.WitnessResult.InnerMessage");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->innermessage(), output);
  }

  // optional .dg.model.WitnessImage Image = 3;
  if (this->has_image()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->image_, output);
  }

  // repeated .dg.model.RecognizedVehicle Vehicles = 4;
  for (unsigned int i = 0, n = this->vehicles_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->vehicles(i), output);
  }

  // repeated .dg.model.RecognizedFace Faces = 5;
  for (unsigned int i = 0, n = this->faces_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->faces(i), output);
  }

  // @@protoc_insertion_point(serialize_end:dg.model.WitnessResult)
}

::google::protobuf::uint8* WitnessResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dg.model.WitnessResult)
  // optional string InnerStatus = 1;
  if (this->innerstatus().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->innerstatus().data(), this->innerstatus().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.WitnessResult.InnerStatus");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->innerstatus(), target);
  }

  // optional string InnerMessage = 2;
  if (this->innermessage().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->innermessage().data(), this->innermessage().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.WitnessResult.InnerMessage");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->innermessage(), target);
  }

  // optional .dg.model.WitnessImage Image = 3;
  if (this->has_image()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->image_, target);
  }

  // repeated .dg.model.RecognizedVehicle Vehicles = 4;
  for (unsigned int i = 0, n = this->vehicles_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->vehicles(i), target);
  }

  // repeated .dg.model.RecognizedFace Faces = 5;
  for (unsigned int i = 0, n = this->faces_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->faces(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:dg.model.WitnessResult)
  return target;
}

int WitnessResult::ByteSize() const {
  int total_size = 0;

  // optional string InnerStatus = 1;
  if (this->innerstatus().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->innerstatus());
  }

  // optional string InnerMessage = 2;
  if (this->innermessage().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->innermessage());
  }

  // optional .dg.model.WitnessImage Image = 3;
  if (this->has_image()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->image_);
  }

  // repeated .dg.model.RecognizedVehicle Vehicles = 4;
  total_size += 1 * this->vehicles_size();
  for (int i = 0; i < this->vehicles_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->vehicles(i));
  }

  // repeated .dg.model.RecognizedFace Faces = 5;
  total_size += 1 * this->faces_size();
  for (int i = 0; i < this->faces_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->faces(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WitnessResult::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const WitnessResult* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const WitnessResult>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WitnessResult::MergeFrom(const WitnessResult& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  vehicles_.MergeFrom(from.vehicles_);
  faces_.MergeFrom(from.faces_);
  if (from.innerstatus().size() > 0) {

    innerstatus_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.innerstatus_);
  }
  if (from.innermessage().size() > 0) {

    innermessage_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.innermessage_);
  }
  if (from.has_image()) {
    mutable_image()->::dg::model::WitnessImage::MergeFrom(from.image());
  }
}

void WitnessResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WitnessResult::CopyFrom(const WitnessResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WitnessResult::IsInitialized() const {

  return true;
}

void WitnessResult::Swap(WitnessResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WitnessResult::InternalSwap(WitnessResult* other) {
  innerstatus_.Swap(&other->innerstatus_);
  innermessage_.Swap(&other->innermessage_);
  std::swap(image_, other->image_);
  vehicles_.UnsafeArenaSwap(&other->vehicles_);
  faces_.UnsafeArenaSwap(&other->faces_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WitnessResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WitnessResult_descriptor_;
  metadata.reflection = WitnessResult_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WitnessResult

// optional string InnerStatus = 1;
void WitnessResult::clear_innerstatus() {
  innerstatus_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& WitnessResult::innerstatus() const {
  // @@protoc_insertion_point(field_get:dg.model.WitnessResult.InnerStatus)
  return innerstatus_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void WitnessResult::set_innerstatus(const ::std::string& value) {
  
  innerstatus_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.WitnessResult.InnerStatus)
}
 void WitnessResult::set_innerstatus(const char* value) {
  
  innerstatus_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.WitnessResult.InnerStatus)
}
 void WitnessResult::set_innerstatus(const char* value, size_t size) {
  
  innerstatus_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.WitnessResult.InnerStatus)
}
 ::std::string* WitnessResult::mutable_innerstatus() {
  
  // @@protoc_insertion_point(field_mutable:dg.model.WitnessResult.InnerStatus)
  return innerstatus_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* WitnessResult::release_innerstatus() {
  
  return innerstatus_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void WitnessResult::set_allocated_innerstatus(::std::string* innerstatus) {
  if (innerstatus != NULL) {
    
  } else {
    
  }
  innerstatus_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), innerstatus);
  // @@protoc_insertion_point(field_set_allocated:dg.model.WitnessResult.InnerStatus)
}

// optional string InnerMessage = 2;
void WitnessResult::clear_innermessage() {
  innermessage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& WitnessResult::innermessage() const {
  // @@protoc_insertion_point(field_get:dg.model.WitnessResult.InnerMessage)
  return innermessage_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void WitnessResult::set_innermessage(const ::std::string& value) {
  
  innermessage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.WitnessResult.InnerMessage)
}
 void WitnessResult::set_innermessage(const char* value) {
  
  innermessage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.WitnessResult.InnerMessage)
}
 void WitnessResult::set_innermessage(const char* value, size_t size) {
  
  innermessage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.WitnessResult.InnerMessage)
}
 ::std::string* WitnessResult::mutable_innermessage() {
  
  // @@protoc_insertion_point(field_mutable:dg.model.WitnessResult.InnerMessage)
  return innermessage_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* WitnessResult::release_innermessage() {
  
  return innermessage_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void WitnessResult::set_allocated_innermessage(::std::string* innermessage) {
  if (innermessage != NULL) {
    
  } else {
    
  }
  innermessage_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), innermessage);
  // @@protoc_insertion_point(field_set_allocated:dg.model.WitnessResult.InnerMessage)
}

// optional .dg.model.WitnessImage Image = 3;
bool WitnessResult::has_image() const {
  return !_is_default_instance_ && image_ != NULL;
}
void WitnessResult::clear_image() {
  if (GetArenaNoVirtual() == NULL && image_ != NULL) delete image_;
  image_ = NULL;
}
const ::dg::model::WitnessImage& WitnessResult::image() const {
  // @@protoc_insertion_point(field_get:dg.model.WitnessResult.Image)
  return image_ != NULL ? *image_ : *default_instance_->image_;
}
::dg::model::WitnessImage* WitnessResult::mutable_image() {
  
  if (image_ == NULL) {
    image_ = new ::dg::model::WitnessImage;
  }
  // @@protoc_insertion_point(field_mutable:dg.model.WitnessResult.Image)
  return image_;
}
::dg::model::WitnessImage* WitnessResult::release_image() {
  
  ::dg::model::WitnessImage* temp = image_;
  image_ = NULL;
  return temp;
}
void WitnessResult::set_allocated_image(::dg::model::WitnessImage* image) {
  delete image_;
  image_ = image;
  if (image) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dg.model.WitnessResult.Image)
}

// repeated .dg.model.RecognizedVehicle Vehicles = 4;
int WitnessResult::vehicles_size() const {
  return vehicles_.size();
}
void WitnessResult::clear_vehicles() {
  vehicles_.Clear();
}
const ::dg::model::RecognizedVehicle& WitnessResult::vehicles(int index) const {
  // @@protoc_insertion_point(field_get:dg.model.WitnessResult.Vehicles)
  return vehicles_.Get(index);
}
::dg::model::RecognizedVehicle* WitnessResult::mutable_vehicles(int index) {
  // @@protoc_insertion_point(field_mutable:dg.model.WitnessResult.Vehicles)
  return vehicles_.Mutable(index);
}
::dg::model::RecognizedVehicle* WitnessResult::add_vehicles() {
  // @@protoc_insertion_point(field_add:dg.model.WitnessResult.Vehicles)
  return vehicles_.Add();
}
::google::protobuf::RepeatedPtrField< ::dg::model::RecognizedVehicle >*
WitnessResult::mutable_vehicles() {
  // @@protoc_insertion_point(field_mutable_list:dg.model.WitnessResult.Vehicles)
  return &vehicles_;
}
const ::google::protobuf::RepeatedPtrField< ::dg::model::RecognizedVehicle >&
WitnessResult::vehicles() const {
  // @@protoc_insertion_point(field_list:dg.model.WitnessResult.Vehicles)
  return vehicles_;
}

// repeated .dg.model.RecognizedFace Faces = 5;
int WitnessResult::faces_size() const {
  return faces_.size();
}
void WitnessResult::clear_faces() {
  faces_.Clear();
}
const ::dg::model::RecognizedFace& WitnessResult::faces(int index) const {
  // @@protoc_insertion_point(field_get:dg.model.WitnessResult.Faces)
  return faces_.Get(index);
}
::dg::model::RecognizedFace* WitnessResult::mutable_faces(int index) {
  // @@protoc_insertion_point(field_mutable:dg.model.WitnessResult.Faces)
  return faces_.Mutable(index);
}
::dg::model::RecognizedFace* WitnessResult::add_faces() {
  // @@protoc_insertion_point(field_add:dg.model.WitnessResult.Faces)
  return faces_.Add();
}
::google::protobuf::RepeatedPtrField< ::dg::model::RecognizedFace >*
WitnessResult::mutable_faces() {
  // @@protoc_insertion_point(field_mutable_list:dg.model.WitnessResult.Faces)
  return &faces_;
}
const ::google::protobuf::RepeatedPtrField< ::dg::model::RecognizedFace >&
WitnessResult::faces() const {
  // @@protoc_insertion_point(field_list:dg.model.WitnessResult.Faces)
  return faces_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RecognizedVehicle::kModelFieldNumber;
const int RecognizedVehicle::kCutboardFieldNumber;
const int RecognizedVehicle::kColorFieldNumber;
const int RecognizedVehicle::kLicensePlateFieldNumber;
const int RecognizedVehicle::kSymbolItemsFieldNumber;
const int RecognizedVehicle::kFeaturesFieldNumber;
const int RecognizedVehicle::kSceneFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RecognizedVehicle::RecognizedVehicle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dg.model.RecognizedVehicle)
}

void RecognizedVehicle::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  model_ = const_cast< ::dg::model::VehicleModel*>(&::dg::model::VehicleModel::default_instance());
  cutboard_ = const_cast< ::dg::model::Cutboard*>(&::dg::model::Cutboard::default_instance());
  color_ = const_cast< ::dg::model::Color*>(&::dg::model::Color::default_instance());
  licenseplate_ = const_cast< ::dg::model::LicensePlate*>(&::dg::model::LicensePlate::default_instance());
  scene_ = const_cast< ::dg::model::Scene*>(&::dg::model::Scene::default_instance());
}

RecognizedVehicle::RecognizedVehicle(const RecognizedVehicle& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dg.model.RecognizedVehicle)
}

void RecognizedVehicle::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  model_ = NULL;
  cutboard_ = NULL;
  color_ = NULL;
  licenseplate_ = NULL;
  features_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  scene_ = NULL;
}

RecognizedVehicle::~RecognizedVehicle() {
  // @@protoc_insertion_point(destructor:dg.model.RecognizedVehicle)
  SharedDtor();
}

void RecognizedVehicle::SharedDtor() {
  features_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete model_;
    delete cutboard_;
    delete color_;
    delete licenseplate_;
    delete scene_;
  }
}

void RecognizedVehicle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecognizedVehicle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecognizedVehicle_descriptor_;
}

const RecognizedVehicle& RecognizedVehicle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_witness_2eproto();
  return *default_instance_;
}

RecognizedVehicle* RecognizedVehicle::default_instance_ = NULL;

RecognizedVehicle* RecognizedVehicle::New(::google::protobuf::Arena* arena) const {
  RecognizedVehicle* n = new RecognizedVehicle;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RecognizedVehicle::Clear() {
  if (GetArenaNoVirtual() == NULL && model_ != NULL) delete model_;
  model_ = NULL;
  if (GetArenaNoVirtual() == NULL && cutboard_ != NULL) delete cutboard_;
  cutboard_ = NULL;
  if (GetArenaNoVirtual() == NULL && color_ != NULL) delete color_;
  color_ = NULL;
  if (GetArenaNoVirtual() == NULL && licenseplate_ != NULL) delete licenseplate_;
  licenseplate_ = NULL;
  features_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && scene_ != NULL) delete scene_;
  scene_ = NULL;
  symbolitems_.Clear();
}

bool RecognizedVehicle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dg.model.RecognizedVehicle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .dg.model.VehicleModel Model = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_model()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Cutboard;
        break;
      }

      // optional .dg.model.Cutboard Cutboard = 2;
      case 2: {
        if (tag == 18) {
         parse_Cutboard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cutboard()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Color;
        break;
      }

      // optional .dg.model.Color Color = 3;
      case 3: {
        if (tag == 26) {
         parse_Color:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_color()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_LicensePlate;
        break;
      }

      // optional .dg.model.LicensePlate LicensePlate = 4;
      case 4: {
        if (tag == 34) {
         parse_LicensePlate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_licenseplate()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_SymbolItems;
        break;
      }

      // repeated .dg.model.SymbolItem SymbolItems = 5;
      case 5: {
        if (tag == 42) {
         parse_SymbolItems:
          DO_(input->IncrementRecursionDepth());
         parse_loop_SymbolItems:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_symbolitems()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_SymbolItems;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(50)) goto parse_Features;
        break;
      }

      // optional string Features = 6;
      case 6: {
        if (tag == 50) {
         parse_Features:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_features()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->features().data(), this->features().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dg.model.RecognizedVehicle.Features"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_Scene;
        break;
      }

      // optional .dg.model.Scene Scene = 7;
      case 7: {
        if (tag == 58) {
         parse_Scene:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scene()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dg.model.RecognizedVehicle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dg.model.RecognizedVehicle)
  return false;
#undef DO_
}

void RecognizedVehicle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dg.model.RecognizedVehicle)
  // optional .dg.model.VehicleModel Model = 1;
  if (this->has_model()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->model_, output);
  }

  // optional .dg.model.Cutboard Cutboard = 2;
  if (this->has_cutboard()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->cutboard_, output);
  }

  // optional .dg.model.Color Color = 3;
  if (this->has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->color_, output);
  }

  // optional .dg.model.LicensePlate LicensePlate = 4;
  if (this->has_licenseplate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->licenseplate_, output);
  }

  // repeated .dg.model.SymbolItem SymbolItems = 5;
  for (unsigned int i = 0, n = this->symbolitems_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->symbolitems(i), output);
  }

  // optional string Features = 6;
  if (this->features().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->features().data(), this->features().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.RecognizedVehicle.Features");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->features(), output);
  }

  // optional .dg.model.Scene Scene = 7;
  if (this->has_scene()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->scene_, output);
  }

  // @@protoc_insertion_point(serialize_end:dg.model.RecognizedVehicle)
}

::google::protobuf::uint8* RecognizedVehicle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dg.model.RecognizedVehicle)
  // optional .dg.model.VehicleModel Model = 1;
  if (this->has_model()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->model_, target);
  }

  // optional .dg.model.Cutboard Cutboard = 2;
  if (this->has_cutboard()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->cutboard_, target);
  }

  // optional .dg.model.Color Color = 3;
  if (this->has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->color_, target);
  }

  // optional .dg.model.LicensePlate LicensePlate = 4;
  if (this->has_licenseplate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, *this->licenseplate_, target);
  }

  // repeated .dg.model.SymbolItem SymbolItems = 5;
  for (unsigned int i = 0, n = this->symbolitems_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->symbolitems(i), target);
  }

  // optional string Features = 6;
  if (this->features().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->features().data(), this->features().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.RecognizedVehicle.Features");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->features(), target);
  }

  // optional .dg.model.Scene Scene = 7;
  if (this->has_scene()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, *this->scene_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:dg.model.RecognizedVehicle)
  return target;
}

int RecognizedVehicle::ByteSize() const {
  int total_size = 0;

  // optional .dg.model.VehicleModel Model = 1;
  if (this->has_model()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->model_);
  }

  // optional .dg.model.Cutboard Cutboard = 2;
  if (this->has_cutboard()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->cutboard_);
  }

  // optional .dg.model.Color Color = 3;
  if (this->has_color()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->color_);
  }

  // optional .dg.model.LicensePlate LicensePlate = 4;
  if (this->has_licenseplate()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->licenseplate_);
  }

  // optional string Features = 6;
  if (this->features().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->features());
  }

  // optional .dg.model.Scene Scene = 7;
  if (this->has_scene()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->scene_);
  }

  // repeated .dg.model.SymbolItem SymbolItems = 5;
  total_size += 1 * this->symbolitems_size();
  for (int i = 0; i < this->symbolitems_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->symbolitems(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecognizedVehicle::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RecognizedVehicle* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RecognizedVehicle>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RecognizedVehicle::MergeFrom(const RecognizedVehicle& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  symbolitems_.MergeFrom(from.symbolitems_);
  if (from.has_model()) {
    mutable_model()->::dg::model::VehicleModel::MergeFrom(from.model());
  }
  if (from.has_cutboard()) {
    mutable_cutboard()->::dg::model::Cutboard::MergeFrom(from.cutboard());
  }
  if (from.has_color()) {
    mutable_color()->::dg::model::Color::MergeFrom(from.color());
  }
  if (from.has_licenseplate()) {
    mutable_licenseplate()->::dg::model::LicensePlate::MergeFrom(from.licenseplate());
  }
  if (from.features().size() > 0) {

    features_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.features_);
  }
  if (from.has_scene()) {
    mutable_scene()->::dg::model::Scene::MergeFrom(from.scene());
  }
}

void RecognizedVehicle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecognizedVehicle::CopyFrom(const RecognizedVehicle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecognizedVehicle::IsInitialized() const {

  return true;
}

void RecognizedVehicle::Swap(RecognizedVehicle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RecognizedVehicle::InternalSwap(RecognizedVehicle* other) {
  std::swap(model_, other->model_);
  std::swap(cutboard_, other->cutboard_);
  std::swap(color_, other->color_);
  std::swap(licenseplate_, other->licenseplate_);
  symbolitems_.UnsafeArenaSwap(&other->symbolitems_);
  features_.Swap(&other->features_);
  std::swap(scene_, other->scene_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RecognizedVehicle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecognizedVehicle_descriptor_;
  metadata.reflection = RecognizedVehicle_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RecognizedVehicle

// optional .dg.model.VehicleModel Model = 1;
bool RecognizedVehicle::has_model() const {
  return !_is_default_instance_ && model_ != NULL;
}
void RecognizedVehicle::clear_model() {
  if (GetArenaNoVirtual() == NULL && model_ != NULL) delete model_;
  model_ = NULL;
}
const ::dg::model::VehicleModel& RecognizedVehicle::model() const {
  // @@protoc_insertion_point(field_get:dg.model.RecognizedVehicle.Model)
  return model_ != NULL ? *model_ : *default_instance_->model_;
}
::dg::model::VehicleModel* RecognizedVehicle::mutable_model() {
  
  if (model_ == NULL) {
    model_ = new ::dg::model::VehicleModel;
  }
  // @@protoc_insertion_point(field_mutable:dg.model.RecognizedVehicle.Model)
  return model_;
}
::dg::model::VehicleModel* RecognizedVehicle::release_model() {
  
  ::dg::model::VehicleModel* temp = model_;
  model_ = NULL;
  return temp;
}
void RecognizedVehicle::set_allocated_model(::dg::model::VehicleModel* model) {
  delete model_;
  model_ = model;
  if (model) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dg.model.RecognizedVehicle.Model)
}

// optional .dg.model.Cutboard Cutboard = 2;
bool RecognizedVehicle::has_cutboard() const {
  return !_is_default_instance_ && cutboard_ != NULL;
}
void RecognizedVehicle::clear_cutboard() {
  if (GetArenaNoVirtual() == NULL && cutboard_ != NULL) delete cutboard_;
  cutboard_ = NULL;
}
const ::dg::model::Cutboard& RecognizedVehicle::cutboard() const {
  // @@protoc_insertion_point(field_get:dg.model.RecognizedVehicle.Cutboard)
  return cutboard_ != NULL ? *cutboard_ : *default_instance_->cutboard_;
}
::dg::model::Cutboard* RecognizedVehicle::mutable_cutboard() {
  
  if (cutboard_ == NULL) {
    cutboard_ = new ::dg::model::Cutboard;
  }
  // @@protoc_insertion_point(field_mutable:dg.model.RecognizedVehicle.Cutboard)
  return cutboard_;
}
::dg::model::Cutboard* RecognizedVehicle::release_cutboard() {
  
  ::dg::model::Cutboard* temp = cutboard_;
  cutboard_ = NULL;
  return temp;
}
void RecognizedVehicle::set_allocated_cutboard(::dg::model::Cutboard* cutboard) {
  delete cutboard_;
  cutboard_ = cutboard;
  if (cutboard) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dg.model.RecognizedVehicle.Cutboard)
}

// optional .dg.model.Color Color = 3;
bool RecognizedVehicle::has_color() const {
  return !_is_default_instance_ && color_ != NULL;
}
void RecognizedVehicle::clear_color() {
  if (GetArenaNoVirtual() == NULL && color_ != NULL) delete color_;
  color_ = NULL;
}
const ::dg::model::Color& RecognizedVehicle::color() const {
  // @@protoc_insertion_point(field_get:dg.model.RecognizedVehicle.Color)
  return color_ != NULL ? *color_ : *default_instance_->color_;
}
::dg::model::Color* RecognizedVehicle::mutable_color() {
  
  if (color_ == NULL) {
    color_ = new ::dg::model::Color;
  }
  // @@protoc_insertion_point(field_mutable:dg.model.RecognizedVehicle.Color)
  return color_;
}
::dg::model::Color* RecognizedVehicle::release_color() {
  
  ::dg::model::Color* temp = color_;
  color_ = NULL;
  return temp;
}
void RecognizedVehicle::set_allocated_color(::dg::model::Color* color) {
  delete color_;
  color_ = color;
  if (color) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dg.model.RecognizedVehicle.Color)
}

// optional .dg.model.LicensePlate LicensePlate = 4;
bool RecognizedVehicle::has_licenseplate() const {
  return !_is_default_instance_ && licenseplate_ != NULL;
}
void RecognizedVehicle::clear_licenseplate() {
  if (GetArenaNoVirtual() == NULL && licenseplate_ != NULL) delete licenseplate_;
  licenseplate_ = NULL;
}
const ::dg::model::LicensePlate& RecognizedVehicle::licenseplate() const {
  // @@protoc_insertion_point(field_get:dg.model.RecognizedVehicle.LicensePlate)
  return licenseplate_ != NULL ? *licenseplate_ : *default_instance_->licenseplate_;
}
::dg::model::LicensePlate* RecognizedVehicle::mutable_licenseplate() {
  
  if (licenseplate_ == NULL) {
    licenseplate_ = new ::dg::model::LicensePlate;
  }
  // @@protoc_insertion_point(field_mutable:dg.model.RecognizedVehicle.LicensePlate)
  return licenseplate_;
}
::dg::model::LicensePlate* RecognizedVehicle::release_licenseplate() {
  
  ::dg::model::LicensePlate* temp = licenseplate_;
  licenseplate_ = NULL;
  return temp;
}
void RecognizedVehicle::set_allocated_licenseplate(::dg::model::LicensePlate* licenseplate) {
  delete licenseplate_;
  licenseplate_ = licenseplate;
  if (licenseplate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dg.model.RecognizedVehicle.LicensePlate)
}

// repeated .dg.model.SymbolItem SymbolItems = 5;
int RecognizedVehicle::symbolitems_size() const {
  return symbolitems_.size();
}
void RecognizedVehicle::clear_symbolitems() {
  symbolitems_.Clear();
}
const ::dg::model::SymbolItem& RecognizedVehicle::symbolitems(int index) const {
  // @@protoc_insertion_point(field_get:dg.model.RecognizedVehicle.SymbolItems)
  return symbolitems_.Get(index);
}
::dg::model::SymbolItem* RecognizedVehicle::mutable_symbolitems(int index) {
  // @@protoc_insertion_point(field_mutable:dg.model.RecognizedVehicle.SymbolItems)
  return symbolitems_.Mutable(index);
}
::dg::model::SymbolItem* RecognizedVehicle::add_symbolitems() {
  // @@protoc_insertion_point(field_add:dg.model.RecognizedVehicle.SymbolItems)
  return symbolitems_.Add();
}
::google::protobuf::RepeatedPtrField< ::dg::model::SymbolItem >*
RecognizedVehicle::mutable_symbolitems() {
  // @@protoc_insertion_point(field_mutable_list:dg.model.RecognizedVehicle.SymbolItems)
  return &symbolitems_;
}
const ::google::protobuf::RepeatedPtrField< ::dg::model::SymbolItem >&
RecognizedVehicle::symbolitems() const {
  // @@protoc_insertion_point(field_list:dg.model.RecognizedVehicle.SymbolItems)
  return symbolitems_;
}

// optional string Features = 6;
void RecognizedVehicle::clear_features() {
  features_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& RecognizedVehicle::features() const {
  // @@protoc_insertion_point(field_get:dg.model.RecognizedVehicle.Features)
  return features_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RecognizedVehicle::set_features(const ::std::string& value) {
  
  features_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.RecognizedVehicle.Features)
}
 void RecognizedVehicle::set_features(const char* value) {
  
  features_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.RecognizedVehicle.Features)
}
 void RecognizedVehicle::set_features(const char* value, size_t size) {
  
  features_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.RecognizedVehicle.Features)
}
 ::std::string* RecognizedVehicle::mutable_features() {
  
  // @@protoc_insertion_point(field_mutable:dg.model.RecognizedVehicle.Features)
  return features_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RecognizedVehicle::release_features() {
  
  return features_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RecognizedVehicle::set_allocated_features(::std::string* features) {
  if (features != NULL) {
    
  } else {
    
  }
  features_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), features);
  // @@protoc_insertion_point(field_set_allocated:dg.model.RecognizedVehicle.Features)
}

// optional .dg.model.Scene Scene = 7;
bool RecognizedVehicle::has_scene() const {
  return !_is_default_instance_ && scene_ != NULL;
}
void RecognizedVehicle::clear_scene() {
  if (GetArenaNoVirtual() == NULL && scene_ != NULL) delete scene_;
  scene_ = NULL;
}
const ::dg::model::Scene& RecognizedVehicle::scene() const {
  // @@protoc_insertion_point(field_get:dg.model.RecognizedVehicle.Scene)
  return scene_ != NULL ? *scene_ : *default_instance_->scene_;
}
::dg::model::Scene* RecognizedVehicle::mutable_scene() {
  
  if (scene_ == NULL) {
    scene_ = new ::dg::model::Scene;
  }
  // @@protoc_insertion_point(field_mutable:dg.model.RecognizedVehicle.Scene)
  return scene_;
}
::dg::model::Scene* RecognizedVehicle::release_scene() {
  
  ::dg::model::Scene* temp = scene_;
  scene_ = NULL;
  return temp;
}
void RecognizedVehicle::set_allocated_scene(::dg::model::Scene* scene) {
  delete scene_;
  scene_ = scene;
  if (scene) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dg.model.RecognizedVehicle.Scene)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RecognizedFace::kCutboardFieldNumber;
const int RecognizedFace::kConfidenceFieldNumber;
const int RecognizedFace::kFeaturesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RecognizedFace::RecognizedFace()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dg.model.RecognizedFace)
}

void RecognizedFace::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  cutboard_ = const_cast< ::dg::model::Cutboard*>(&::dg::model::Cutboard::default_instance());
}

RecognizedFace::RecognizedFace(const RecognizedFace& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dg.model.RecognizedFace)
}

void RecognizedFace::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cutboard_ = NULL;
  confidence_ = 0;
  features_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

RecognizedFace::~RecognizedFace() {
  // @@protoc_insertion_point(destructor:dg.model.RecognizedFace)
  SharedDtor();
}

void RecognizedFace::SharedDtor() {
  features_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete cutboard_;
  }
}

void RecognizedFace::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecognizedFace::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecognizedFace_descriptor_;
}

const RecognizedFace& RecognizedFace::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_witness_2eproto();
  return *default_instance_;
}

RecognizedFace* RecognizedFace::default_instance_ = NULL;

RecognizedFace* RecognizedFace::New(::google::protobuf::Arena* arena) const {
  RecognizedFace* n = new RecognizedFace;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RecognizedFace::Clear() {
  if (GetArenaNoVirtual() == NULL && cutboard_ != NULL) delete cutboard_;
  cutboard_ = NULL;
  confidence_ = 0;
  features_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool RecognizedFace::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dg.model.RecognizedFace)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .dg.model.Cutboard Cutboard = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cutboard()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_Confidence;
        break;
      }

      // optional float Confidence = 2;
      case 2: {
        if (tag == 21) {
         parse_Confidence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &confidence_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Features;
        break;
      }

      // optional string Features = 3;
      case 3: {
        if (tag == 26) {
         parse_Features:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_features()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->features().data(), this->features().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dg.model.RecognizedFace.Features"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dg.model.RecognizedFace)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dg.model.RecognizedFace)
  return false;
#undef DO_
}

void RecognizedFace::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dg.model.RecognizedFace)
  // optional .dg.model.Cutboard Cutboard = 1;
  if (this->has_cutboard()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->cutboard_, output);
  }

  // optional float Confidence = 2;
  if (this->confidence() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->confidence(), output);
  }

  // optional string Features = 3;
  if (this->features().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->features().data(), this->features().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.RecognizedFace.Features");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->features(), output);
  }

  // @@protoc_insertion_point(serialize_end:dg.model.RecognizedFace)
}

::google::protobuf::uint8* RecognizedFace::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dg.model.RecognizedFace)
  // optional .dg.model.Cutboard Cutboard = 1;
  if (this->has_cutboard()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->cutboard_, target);
  }

  // optional float Confidence = 2;
  if (this->confidence() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->confidence(), target);
  }

  // optional string Features = 3;
  if (this->features().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->features().data(), this->features().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.RecognizedFace.Features");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->features(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:dg.model.RecognizedFace)
  return target;
}

int RecognizedFace::ByteSize() const {
  int total_size = 0;

  // optional .dg.model.Cutboard Cutboard = 1;
  if (this->has_cutboard()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->cutboard_);
  }

  // optional float Confidence = 2;
  if (this->confidence() != 0) {
    total_size += 1 + 4;
  }

  // optional string Features = 3;
  if (this->features().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->features());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecognizedFace::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RecognizedFace* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RecognizedFace>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RecognizedFace::MergeFrom(const RecognizedFace& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_cutboard()) {
    mutable_cutboard()->::dg::model::Cutboard::MergeFrom(from.cutboard());
  }
  if (from.confidence() != 0) {
    set_confidence(from.confidence());
  }
  if (from.features().size() > 0) {

    features_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.features_);
  }
}

void RecognizedFace::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecognizedFace::CopyFrom(const RecognizedFace& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecognizedFace::IsInitialized() const {

  return true;
}

void RecognizedFace::Swap(RecognizedFace* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RecognizedFace::InternalSwap(RecognizedFace* other) {
  std::swap(cutboard_, other->cutboard_);
  std::swap(confidence_, other->confidence_);
  features_.Swap(&other->features_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RecognizedFace::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecognizedFace_descriptor_;
  metadata.reflection = RecognizedFace_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RecognizedFace

// optional .dg.model.Cutboard Cutboard = 1;
bool RecognizedFace::has_cutboard() const {
  return !_is_default_instance_ && cutboard_ != NULL;
}
void RecognizedFace::clear_cutboard() {
  if (GetArenaNoVirtual() == NULL && cutboard_ != NULL) delete cutboard_;
  cutboard_ = NULL;
}
const ::dg::model::Cutboard& RecognizedFace::cutboard() const {
  // @@protoc_insertion_point(field_get:dg.model.RecognizedFace.Cutboard)
  return cutboard_ != NULL ? *cutboard_ : *default_instance_->cutboard_;
}
::dg::model::Cutboard* RecognizedFace::mutable_cutboard() {
  
  if (cutboard_ == NULL) {
    cutboard_ = new ::dg::model::Cutboard;
  }
  // @@protoc_insertion_point(field_mutable:dg.model.RecognizedFace.Cutboard)
  return cutboard_;
}
::dg::model::Cutboard* RecognizedFace::release_cutboard() {
  
  ::dg::model::Cutboard* temp = cutboard_;
  cutboard_ = NULL;
  return temp;
}
void RecognizedFace::set_allocated_cutboard(::dg::model::Cutboard* cutboard) {
  delete cutboard_;
  cutboard_ = cutboard;
  if (cutboard) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dg.model.RecognizedFace.Cutboard)
}

// optional float Confidence = 2;
void RecognizedFace::clear_confidence() {
  confidence_ = 0;
}
 float RecognizedFace::confidence() const {
  // @@protoc_insertion_point(field_get:dg.model.RecognizedFace.Confidence)
  return confidence_;
}
 void RecognizedFace::set_confidence(float value) {
  
  confidence_ = value;
  // @@protoc_insertion_point(field_set:dg.model.RecognizedFace.Confidence)
}

// optional string Features = 3;
void RecognizedFace::clear_features() {
  features_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& RecognizedFace::features() const {
  // @@protoc_insertion_point(field_get:dg.model.RecognizedFace.Features)
  return features_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RecognizedFace::set_features(const ::std::string& value) {
  
  features_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.RecognizedFace.Features)
}
 void RecognizedFace::set_features(const char* value) {
  
  features_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.RecognizedFace.Features)
}
 void RecognizedFace::set_features(const char* value, size_t size) {
  
  features_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.RecognizedFace.Features)
}
 ::std::string* RecognizedFace::mutable_features() {
  
  // @@protoc_insertion_point(field_mutable:dg.model.RecognizedFace.Features)
  return features_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RecognizedFace::release_features() {
  
  return features_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RecognizedFace::set_allocated_features(::std::string* features) {
  if (features != NULL) {
    
  } else {
    
  }
  features_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), features);
  // @@protoc_insertion_point(field_set_allocated:dg.model.RecognizedFace.Features)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VehicleModel::kTypeIdFieldNumber;
const int VehicleModel::kBrandIdFieldNumber;
const int VehicleModel::kSubBrandIdFieldNumber;
const int VehicleModel::kModelYearIdFieldNumber;
const int VehicleModel::kTypeFieldNumber;
const int VehicleModel::kBrandFieldNumber;
const int VehicleModel::kSubBrandFieldNumber;
const int VehicleModel::kModelYearFieldNumber;
const int VehicleModel::kIsHeadFieldNumber;
const int VehicleModel::kConfidenceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VehicleModel::VehicleModel()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dg.model.VehicleModel)
}

void VehicleModel::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

VehicleModel::VehicleModel(const VehicleModel& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dg.model.VehicleModel)
}

void VehicleModel::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  typeid__ = 0;
  brandid_ = 0;
  subbrandid_ = 0;
  modelyearid_ = 0;
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  brand_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  subbrand_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  modelyear_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ishead_ = 0;
  confidence_ = 0;
}

VehicleModel::~VehicleModel() {
  // @@protoc_insertion_point(destructor:dg.model.VehicleModel)
  SharedDtor();
}

void VehicleModel::SharedDtor() {
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  brand_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  subbrand_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  modelyear_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void VehicleModel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VehicleModel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VehicleModel_descriptor_;
}

const VehicleModel& VehicleModel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_witness_2eproto();
  return *default_instance_;
}

VehicleModel* VehicleModel::default_instance_ = NULL;

VehicleModel* VehicleModel::New(::google::protobuf::Arena* arena) const {
  VehicleModel* n = new VehicleModel;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VehicleModel::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<VehicleModel*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(typeid__, modelyearid_);
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  brand_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  subbrand_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  modelyear_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ZR_(ishead_, confidence_);

#undef ZR_HELPER_
#undef ZR_

}

bool VehicleModel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dg.model.VehicleModel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 TypeId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &typeid__)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_BrandId;
        break;
      }

      // optional int32 BrandId = 2;
      case 2: {
        if (tag == 16) {
         parse_BrandId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &brandid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_SubBrandId;
        break;
      }

      // optional int32 SubBrandId = 3;
      case 3: {
        if (tag == 24) {
         parse_SubBrandId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &subbrandid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_ModelYearId;
        break;
      }

      // optional int32 ModelYearId = 4;
      case 4: {
        if (tag == 32) {
         parse_ModelYearId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &modelyearid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_Type;
        break;
      }

      // optional string Type = 5;
      case 5: {
        if (tag == 42) {
         parse_Type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dg.model.VehicleModel.Type"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_Brand;
        break;
      }

      // optional string Brand = 6;
      case 6: {
        if (tag == 50) {
         parse_Brand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_brand()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->brand().data(), this->brand().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dg.model.VehicleModel.Brand"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_SubBrand;
        break;
      }

      // optional string SubBrand = 7;
      case 7: {
        if (tag == 58) {
         parse_SubBrand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_subbrand()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->subbrand().data(), this->subbrand().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dg.model.VehicleModel.SubBrand"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_ModelYear;
        break;
      }

      // optional string ModelYear = 8;
      case 8: {
        if (tag == 66) {
         parse_ModelYear:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_modelyear()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->modelyear().data(), this->modelyear().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dg.model.VehicleModel.ModelYear"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_IsHead;
        break;
      }

      // optional int32 IsHead = 9;
      case 9: {
        if (tag == 72) {
         parse_IsHead:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ishead_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(85)) goto parse_Confidence;
        break;
      }

      // optional float Confidence = 10;
      case 10: {
        if (tag == 85) {
         parse_Confidence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &confidence_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dg.model.VehicleModel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dg.model.VehicleModel)
  return false;
#undef DO_
}

void VehicleModel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dg.model.VehicleModel)
  // optional int32 TypeId = 1;
  if (this->typeid_() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->typeid_(), output);
  }

  // optional int32 BrandId = 2;
  if (this->brandid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->brandid(), output);
  }

  // optional int32 SubBrandId = 3;
  if (this->subbrandid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->subbrandid(), output);
  }

  // optional int32 ModelYearId = 4;
  if (this->modelyearid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->modelyearid(), output);
  }

  // optional string Type = 5;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.VehicleModel.Type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->type(), output);
  }

  // optional string Brand = 6;
  if (this->brand().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->brand().data(), this->brand().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.VehicleModel.Brand");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->brand(), output);
  }

  // optional string SubBrand = 7;
  if (this->subbrand().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->subbrand().data(), this->subbrand().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.VehicleModel.SubBrand");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->subbrand(), output);
  }

  // optional string ModelYear = 8;
  if (this->modelyear().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->modelyear().data(), this->modelyear().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.VehicleModel.ModelYear");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->modelyear(), output);
  }

  // optional int32 IsHead = 9;
  if (this->ishead() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->ishead(), output);
  }

  // optional float Confidence = 10;
  if (this->confidence() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->confidence(), output);
  }

  // @@protoc_insertion_point(serialize_end:dg.model.VehicleModel)
}

::google::protobuf::uint8* VehicleModel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dg.model.VehicleModel)
  // optional int32 TypeId = 1;
  if (this->typeid_() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->typeid_(), target);
  }

  // optional int32 BrandId = 2;
  if (this->brandid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->brandid(), target);
  }

  // optional int32 SubBrandId = 3;
  if (this->subbrandid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->subbrandid(), target);
  }

  // optional int32 ModelYearId = 4;
  if (this->modelyearid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->modelyearid(), target);
  }

  // optional string Type = 5;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.VehicleModel.Type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->type(), target);
  }

  // optional string Brand = 6;
  if (this->brand().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->brand().data(), this->brand().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.VehicleModel.Brand");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->brand(), target);
  }

  // optional string SubBrand = 7;
  if (this->subbrand().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->subbrand().data(), this->subbrand().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.VehicleModel.SubBrand");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->subbrand(), target);
  }

  // optional string ModelYear = 8;
  if (this->modelyear().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->modelyear().data(), this->modelyear().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.VehicleModel.ModelYear");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->modelyear(), target);
  }

  // optional int32 IsHead = 9;
  if (this->ishead() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->ishead(), target);
  }

  // optional float Confidence = 10;
  if (this->confidence() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->confidence(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:dg.model.VehicleModel)
  return target;
}

int VehicleModel::ByteSize() const {
  int total_size = 0;

  // optional int32 TypeId = 1;
  if (this->typeid_() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->typeid_());
  }

  // optional int32 BrandId = 2;
  if (this->brandid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->brandid());
  }

  // optional int32 SubBrandId = 3;
  if (this->subbrandid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->subbrandid());
  }

  // optional int32 ModelYearId = 4;
  if (this->modelyearid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->modelyearid());
  }

  // optional string Type = 5;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());
  }

  // optional string Brand = 6;
  if (this->brand().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->brand());
  }

  // optional string SubBrand = 7;
  if (this->subbrand().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->subbrand());
  }

  // optional string ModelYear = 8;
  if (this->modelyear().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->modelyear());
  }

  // optional int32 IsHead = 9;
  if (this->ishead() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ishead());
  }

  // optional float Confidence = 10;
  if (this->confidence() != 0) {
    total_size += 1 + 4;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VehicleModel::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const VehicleModel* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const VehicleModel>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VehicleModel::MergeFrom(const VehicleModel& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.typeid_() != 0) {
    set_typeid_(from.typeid_());
  }
  if (from.brandid() != 0) {
    set_brandid(from.brandid());
  }
  if (from.subbrandid() != 0) {
    set_subbrandid(from.subbrandid());
  }
  if (from.modelyearid() != 0) {
    set_modelyearid(from.modelyearid());
  }
  if (from.type().size() > 0) {

    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  if (from.brand().size() > 0) {

    brand_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.brand_);
  }
  if (from.subbrand().size() > 0) {

    subbrand_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.subbrand_);
  }
  if (from.modelyear().size() > 0) {

    modelyear_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.modelyear_);
  }
  if (from.ishead() != 0) {
    set_ishead(from.ishead());
  }
  if (from.confidence() != 0) {
    set_confidence(from.confidence());
  }
}

void VehicleModel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehicleModel::CopyFrom(const VehicleModel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleModel::IsInitialized() const {

  return true;
}

void VehicleModel::Swap(VehicleModel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VehicleModel::InternalSwap(VehicleModel* other) {
  std::swap(typeid__, other->typeid__);
  std::swap(brandid_, other->brandid_);
  std::swap(subbrandid_, other->subbrandid_);
  std::swap(modelyearid_, other->modelyearid_);
  type_.Swap(&other->type_);
  brand_.Swap(&other->brand_);
  subbrand_.Swap(&other->subbrand_);
  modelyear_.Swap(&other->modelyear_);
  std::swap(ishead_, other->ishead_);
  std::swap(confidence_, other->confidence_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VehicleModel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VehicleModel_descriptor_;
  metadata.reflection = VehicleModel_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VehicleModel

// optional int32 TypeId = 1;
void VehicleModel::clear_typeid_() {
  typeid__ = 0;
}
 ::google::protobuf::int32 VehicleModel::typeid_() const {
  // @@protoc_insertion_point(field_get:dg.model.VehicleModel.TypeId)
  return typeid__;
}
 void VehicleModel::set_typeid_(::google::protobuf::int32 value) {
  
  typeid__ = value;
  // @@protoc_insertion_point(field_set:dg.model.VehicleModel.TypeId)
}

// optional int32 BrandId = 2;
void VehicleModel::clear_brandid() {
  brandid_ = 0;
}
 ::google::protobuf::int32 VehicleModel::brandid() const {
  // @@protoc_insertion_point(field_get:dg.model.VehicleModel.BrandId)
  return brandid_;
}
 void VehicleModel::set_brandid(::google::protobuf::int32 value) {
  
  brandid_ = value;
  // @@protoc_insertion_point(field_set:dg.model.VehicleModel.BrandId)
}

// optional int32 SubBrandId = 3;
void VehicleModel::clear_subbrandid() {
  subbrandid_ = 0;
}
 ::google::protobuf::int32 VehicleModel::subbrandid() const {
  // @@protoc_insertion_point(field_get:dg.model.VehicleModel.SubBrandId)
  return subbrandid_;
}
 void VehicleModel::set_subbrandid(::google::protobuf::int32 value) {
  
  subbrandid_ = value;
  // @@protoc_insertion_point(field_set:dg.model.VehicleModel.SubBrandId)
}

// optional int32 ModelYearId = 4;
void VehicleModel::clear_modelyearid() {
  modelyearid_ = 0;
}
 ::google::protobuf::int32 VehicleModel::modelyearid() const {
  // @@protoc_insertion_point(field_get:dg.model.VehicleModel.ModelYearId)
  return modelyearid_;
}
 void VehicleModel::set_modelyearid(::google::protobuf::int32 value) {
  
  modelyearid_ = value;
  // @@protoc_insertion_point(field_set:dg.model.VehicleModel.ModelYearId)
}

// optional string Type = 5;
void VehicleModel::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& VehicleModel::type() const {
  // @@protoc_insertion_point(field_get:dg.model.VehicleModel.Type)
  return type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void VehicleModel::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.VehicleModel.Type)
}
 void VehicleModel::set_type(const char* value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.VehicleModel.Type)
}
 void VehicleModel::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.VehicleModel.Type)
}
 ::std::string* VehicleModel::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:dg.model.VehicleModel.Type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* VehicleModel::release_type() {
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void VehicleModel::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:dg.model.VehicleModel.Type)
}

// optional string Brand = 6;
void VehicleModel::clear_brand() {
  brand_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& VehicleModel::brand() const {
  // @@protoc_insertion_point(field_get:dg.model.VehicleModel.Brand)
  return brand_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void VehicleModel::set_brand(const ::std::string& value) {
  
  brand_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.VehicleModel.Brand)
}
 void VehicleModel::set_brand(const char* value) {
  
  brand_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.VehicleModel.Brand)
}
 void VehicleModel::set_brand(const char* value, size_t size) {
  
  brand_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.VehicleModel.Brand)
}
 ::std::string* VehicleModel::mutable_brand() {
  
  // @@protoc_insertion_point(field_mutable:dg.model.VehicleModel.Brand)
  return brand_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* VehicleModel::release_brand() {
  
  return brand_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void VehicleModel::set_allocated_brand(::std::string* brand) {
  if (brand != NULL) {
    
  } else {
    
  }
  brand_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), brand);
  // @@protoc_insertion_point(field_set_allocated:dg.model.VehicleModel.Brand)
}

// optional string SubBrand = 7;
void VehicleModel::clear_subbrand() {
  subbrand_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& VehicleModel::subbrand() const {
  // @@protoc_insertion_point(field_get:dg.model.VehicleModel.SubBrand)
  return subbrand_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void VehicleModel::set_subbrand(const ::std::string& value) {
  
  subbrand_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.VehicleModel.SubBrand)
}
 void VehicleModel::set_subbrand(const char* value) {
  
  subbrand_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.VehicleModel.SubBrand)
}
 void VehicleModel::set_subbrand(const char* value, size_t size) {
  
  subbrand_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.VehicleModel.SubBrand)
}
 ::std::string* VehicleModel::mutable_subbrand() {
  
  // @@protoc_insertion_point(field_mutable:dg.model.VehicleModel.SubBrand)
  return subbrand_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* VehicleModel::release_subbrand() {
  
  return subbrand_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void VehicleModel::set_allocated_subbrand(::std::string* subbrand) {
  if (subbrand != NULL) {
    
  } else {
    
  }
  subbrand_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), subbrand);
  // @@protoc_insertion_point(field_set_allocated:dg.model.VehicleModel.SubBrand)
}

// optional string ModelYear = 8;
void VehicleModel::clear_modelyear() {
  modelyear_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& VehicleModel::modelyear() const {
  // @@protoc_insertion_point(field_get:dg.model.VehicleModel.ModelYear)
  return modelyear_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void VehicleModel::set_modelyear(const ::std::string& value) {
  
  modelyear_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.VehicleModel.ModelYear)
}
 void VehicleModel::set_modelyear(const char* value) {
  
  modelyear_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.VehicleModel.ModelYear)
}
 void VehicleModel::set_modelyear(const char* value, size_t size) {
  
  modelyear_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.VehicleModel.ModelYear)
}
 ::std::string* VehicleModel::mutable_modelyear() {
  
  // @@protoc_insertion_point(field_mutable:dg.model.VehicleModel.ModelYear)
  return modelyear_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* VehicleModel::release_modelyear() {
  
  return modelyear_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void VehicleModel::set_allocated_modelyear(::std::string* modelyear) {
  if (modelyear != NULL) {
    
  } else {
    
  }
  modelyear_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), modelyear);
  // @@protoc_insertion_point(field_set_allocated:dg.model.VehicleModel.ModelYear)
}

// optional int32 IsHead = 9;
void VehicleModel::clear_ishead() {
  ishead_ = 0;
}
 ::google::protobuf::int32 VehicleModel::ishead() const {
  // @@protoc_insertion_point(field_get:dg.model.VehicleModel.IsHead)
  return ishead_;
}
 void VehicleModel::set_ishead(::google::protobuf::int32 value) {
  
  ishead_ = value;
  // @@protoc_insertion_point(field_set:dg.model.VehicleModel.IsHead)
}

// optional float Confidence = 10;
void VehicleModel::clear_confidence() {
  confidence_ = 0;
}
 float VehicleModel::confidence() const {
  // @@protoc_insertion_point(field_get:dg.model.VehicleModel.Confidence)
  return confidence_;
}
 void VehicleModel::set_confidence(float value) {
  
  confidence_ = value;
  // @@protoc_insertion_point(field_set:dg.model.VehicleModel.Confidence)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LicensePlate::kPlateNumFieldNumber;
const int LicensePlate::kCutboardFieldNumber;
const int LicensePlate::kColorIdFieldNumber;
const int LicensePlate::kColorFieldNumber;
const int LicensePlate::kTypeIdFieldNumber;
const int LicensePlate::kTypeFieldNumber;
const int LicensePlate::kConfidenceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LicensePlate::LicensePlate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dg.model.LicensePlate)
}

void LicensePlate::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  cutboard_ = const_cast< ::dg::model::Cutboard*>(&::dg::model::Cutboard::default_instance());
}

LicensePlate::LicensePlate(const LicensePlate& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dg.model.LicensePlate)
}

void LicensePlate::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  platenum_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cutboard_ = NULL;
  colorid_ = 0;
  color_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  typeid__ = 0;
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  confidence_ = 0;
}

LicensePlate::~LicensePlate() {
  // @@protoc_insertion_point(destructor:dg.model.LicensePlate)
  SharedDtor();
}

void LicensePlate::SharedDtor() {
  platenum_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  color_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete cutboard_;
  }
}

void LicensePlate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LicensePlate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LicensePlate_descriptor_;
}

const LicensePlate& LicensePlate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_witness_2eproto();
  return *default_instance_;
}

LicensePlate* LicensePlate::default_instance_ = NULL;

LicensePlate* LicensePlate::New(::google::protobuf::Arena* arena) const {
  LicensePlate* n = new LicensePlate;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LicensePlate::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<LicensePlate*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(colorid_, typeid__);
  platenum_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && cutboard_ != NULL) delete cutboard_;
  cutboard_ = NULL;
  color_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  confidence_ = 0;

#undef ZR_HELPER_
#undef ZR_

}

bool LicensePlate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dg.model.LicensePlate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string PlateNum = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_platenum()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->platenum().data(), this->platenum().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dg.model.LicensePlate.PlateNum"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Cutboard;
        break;
      }

      // optional .dg.model.Cutboard Cutboard = 2;
      case 2: {
        if (tag == 18) {
         parse_Cutboard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cutboard()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ColorId;
        break;
      }

      // optional int32 ColorId = 3;
      case 3: {
        if (tag == 24) {
         parse_ColorId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &colorid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_Color;
        break;
      }

      // optional string Color = 4;
      case 4: {
        if (tag == 34) {
         parse_Color:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_color()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->color().data(), this->color().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dg.model.LicensePlate.Color"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_TypeId;
        break;
      }

      // optional int32 TypeId = 5;
      case 5: {
        if (tag == 40) {
         parse_TypeId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &typeid__)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_Type;
        break;
      }

      // optional string Type = 6;
      case 6: {
        if (tag == 50) {
         parse_Type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dg.model.LicensePlate.Type"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_Confidence;
        break;
      }

      // optional float Confidence = 7;
      case 7: {
        if (tag == 61) {
         parse_Confidence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &confidence_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dg.model.LicensePlate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dg.model.LicensePlate)
  return false;
#undef DO_
}

void LicensePlate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dg.model.LicensePlate)
  // optional string PlateNum = 1;
  if (this->platenum().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->platenum().data(), this->platenum().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.LicensePlate.PlateNum");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->platenum(), output);
  }

  // optional .dg.model.Cutboard Cutboard = 2;
  if (this->has_cutboard()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->cutboard_, output);
  }

  // optional int32 ColorId = 3;
  if (this->colorid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->colorid(), output);
  }

  // optional string Color = 4;
  if (this->color().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->color().data(), this->color().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.LicensePlate.Color");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->color(), output);
  }

  // optional int32 TypeId = 5;
  if (this->typeid_() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->typeid_(), output);
  }

  // optional string Type = 6;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.LicensePlate.Type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->type(), output);
  }

  // optional float Confidence = 7;
  if (this->confidence() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->confidence(), output);
  }

  // @@protoc_insertion_point(serialize_end:dg.model.LicensePlate)
}

::google::protobuf::uint8* LicensePlate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dg.model.LicensePlate)
  // optional string PlateNum = 1;
  if (this->platenum().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->platenum().data(), this->platenum().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.LicensePlate.PlateNum");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->platenum(), target);
  }

  // optional .dg.model.Cutboard Cutboard = 2;
  if (this->has_cutboard()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->cutboard_, target);
  }

  // optional int32 ColorId = 3;
  if (this->colorid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->colorid(), target);
  }

  // optional string Color = 4;
  if (this->color().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->color().data(), this->color().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.LicensePlate.Color");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->color(), target);
  }

  // optional int32 TypeId = 5;
  if (this->typeid_() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->typeid_(), target);
  }

  // optional string Type = 6;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.LicensePlate.Type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->type(), target);
  }

  // optional float Confidence = 7;
  if (this->confidence() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->confidence(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:dg.model.LicensePlate)
  return target;
}

int LicensePlate::ByteSize() const {
  int total_size = 0;

  // optional string PlateNum = 1;
  if (this->platenum().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->platenum());
  }

  // optional .dg.model.Cutboard Cutboard = 2;
  if (this->has_cutboard()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->cutboard_);
  }

  // optional int32 ColorId = 3;
  if (this->colorid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->colorid());
  }

  // optional string Color = 4;
  if (this->color().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->color());
  }

  // optional int32 TypeId = 5;
  if (this->typeid_() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->typeid_());
  }

  // optional string Type = 6;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());
  }

  // optional float Confidence = 7;
  if (this->confidence() != 0) {
    total_size += 1 + 4;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LicensePlate::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const LicensePlate* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LicensePlate>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LicensePlate::MergeFrom(const LicensePlate& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.platenum().size() > 0) {

    platenum_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.platenum_);
  }
  if (from.has_cutboard()) {
    mutable_cutboard()->::dg::model::Cutboard::MergeFrom(from.cutboard());
  }
  if (from.colorid() != 0) {
    set_colorid(from.colorid());
  }
  if (from.color().size() > 0) {

    color_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.color_);
  }
  if (from.typeid_() != 0) {
    set_typeid_(from.typeid_());
  }
  if (from.type().size() > 0) {

    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  if (from.confidence() != 0) {
    set_confidence(from.confidence());
  }
}

void LicensePlate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LicensePlate::CopyFrom(const LicensePlate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LicensePlate::IsInitialized() const {

  return true;
}

void LicensePlate::Swap(LicensePlate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LicensePlate::InternalSwap(LicensePlate* other) {
  platenum_.Swap(&other->platenum_);
  std::swap(cutboard_, other->cutboard_);
  std::swap(colorid_, other->colorid_);
  color_.Swap(&other->color_);
  std::swap(typeid__, other->typeid__);
  type_.Swap(&other->type_);
  std::swap(confidence_, other->confidence_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LicensePlate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LicensePlate_descriptor_;
  metadata.reflection = LicensePlate_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LicensePlate

// optional string PlateNum = 1;
void LicensePlate::clear_platenum() {
  platenum_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& LicensePlate::platenum() const {
  // @@protoc_insertion_point(field_get:dg.model.LicensePlate.PlateNum)
  return platenum_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LicensePlate::set_platenum(const ::std::string& value) {
  
  platenum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.LicensePlate.PlateNum)
}
 void LicensePlate::set_platenum(const char* value) {
  
  platenum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.LicensePlate.PlateNum)
}
 void LicensePlate::set_platenum(const char* value, size_t size) {
  
  platenum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.LicensePlate.PlateNum)
}
 ::std::string* LicensePlate::mutable_platenum() {
  
  // @@protoc_insertion_point(field_mutable:dg.model.LicensePlate.PlateNum)
  return platenum_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LicensePlate::release_platenum() {
  
  return platenum_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LicensePlate::set_allocated_platenum(::std::string* platenum) {
  if (platenum != NULL) {
    
  } else {
    
  }
  platenum_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), platenum);
  // @@protoc_insertion_point(field_set_allocated:dg.model.LicensePlate.PlateNum)
}

// optional .dg.model.Cutboard Cutboard = 2;
bool LicensePlate::has_cutboard() const {
  return !_is_default_instance_ && cutboard_ != NULL;
}
void LicensePlate::clear_cutboard() {
  if (GetArenaNoVirtual() == NULL && cutboard_ != NULL) delete cutboard_;
  cutboard_ = NULL;
}
const ::dg::model::Cutboard& LicensePlate::cutboard() const {
  // @@protoc_insertion_point(field_get:dg.model.LicensePlate.Cutboard)
  return cutboard_ != NULL ? *cutboard_ : *default_instance_->cutboard_;
}
::dg::model::Cutboard* LicensePlate::mutable_cutboard() {
  
  if (cutboard_ == NULL) {
    cutboard_ = new ::dg::model::Cutboard;
  }
  // @@protoc_insertion_point(field_mutable:dg.model.LicensePlate.Cutboard)
  return cutboard_;
}
::dg::model::Cutboard* LicensePlate::release_cutboard() {
  
  ::dg::model::Cutboard* temp = cutboard_;
  cutboard_ = NULL;
  return temp;
}
void LicensePlate::set_allocated_cutboard(::dg::model::Cutboard* cutboard) {
  delete cutboard_;
  cutboard_ = cutboard;
  if (cutboard) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dg.model.LicensePlate.Cutboard)
}

// optional int32 ColorId = 3;
void LicensePlate::clear_colorid() {
  colorid_ = 0;
}
 ::google::protobuf::int32 LicensePlate::colorid() const {
  // @@protoc_insertion_point(field_get:dg.model.LicensePlate.ColorId)
  return colorid_;
}
 void LicensePlate::set_colorid(::google::protobuf::int32 value) {
  
  colorid_ = value;
  // @@protoc_insertion_point(field_set:dg.model.LicensePlate.ColorId)
}

// optional string Color = 4;
void LicensePlate::clear_color() {
  color_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& LicensePlate::color() const {
  // @@protoc_insertion_point(field_get:dg.model.LicensePlate.Color)
  return color_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LicensePlate::set_color(const ::std::string& value) {
  
  color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.LicensePlate.Color)
}
 void LicensePlate::set_color(const char* value) {
  
  color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.LicensePlate.Color)
}
 void LicensePlate::set_color(const char* value, size_t size) {
  
  color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.LicensePlate.Color)
}
 ::std::string* LicensePlate::mutable_color() {
  
  // @@protoc_insertion_point(field_mutable:dg.model.LicensePlate.Color)
  return color_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LicensePlate::release_color() {
  
  return color_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LicensePlate::set_allocated_color(::std::string* color) {
  if (color != NULL) {
    
  } else {
    
  }
  color_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), color);
  // @@protoc_insertion_point(field_set_allocated:dg.model.LicensePlate.Color)
}

// optional int32 TypeId = 5;
void LicensePlate::clear_typeid_() {
  typeid__ = 0;
}
 ::google::protobuf::int32 LicensePlate::typeid_() const {
  // @@protoc_insertion_point(field_get:dg.model.LicensePlate.TypeId)
  return typeid__;
}
 void LicensePlate::set_typeid_(::google::protobuf::int32 value) {
  
  typeid__ = value;
  // @@protoc_insertion_point(field_set:dg.model.LicensePlate.TypeId)
}

// optional string Type = 6;
void LicensePlate::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& LicensePlate::type() const {
  // @@protoc_insertion_point(field_get:dg.model.LicensePlate.Type)
  return type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LicensePlate::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.LicensePlate.Type)
}
 void LicensePlate::set_type(const char* value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.LicensePlate.Type)
}
 void LicensePlate::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.LicensePlate.Type)
}
 ::std::string* LicensePlate::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:dg.model.LicensePlate.Type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LicensePlate::release_type() {
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LicensePlate::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:dg.model.LicensePlate.Type)
}

// optional float Confidence = 7;
void LicensePlate::clear_confidence() {
  confidence_ = 0;
}
 float LicensePlate::confidence() const {
  // @@protoc_insertion_point(field_get:dg.model.LicensePlate.Confidence)
  return confidence_;
}
 void LicensePlate::set_confidence(float value) {
  
  confidence_ = value;
  // @@protoc_insertion_point(field_set:dg.model.LicensePlate.Confidence)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SymbolItem::kSymbolIdFieldNumber;
const int SymbolItem::kSymbolNameFieldNumber;
const int SymbolItem::kSymbolsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SymbolItem::SymbolItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dg.model.SymbolItem)
}

void SymbolItem::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SymbolItem::SymbolItem(const SymbolItem& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dg.model.SymbolItem)
}

void SymbolItem::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  symbolid_ = 0;
  symbolname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

SymbolItem::~SymbolItem() {
  // @@protoc_insertion_point(destructor:dg.model.SymbolItem)
  SharedDtor();
}

void SymbolItem::SharedDtor() {
  symbolname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void SymbolItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SymbolItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SymbolItem_descriptor_;
}

const SymbolItem& SymbolItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_witness_2eproto();
  return *default_instance_;
}

SymbolItem* SymbolItem::default_instance_ = NULL;

SymbolItem* SymbolItem::New(::google::protobuf::Arena* arena) const {
  SymbolItem* n = new SymbolItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SymbolItem::Clear() {
  symbolid_ = 0;
  symbolname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  symbols_.Clear();
}

bool SymbolItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dg.model.SymbolItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 SymbolId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &symbolid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_SymbolName;
        break;
      }

      // optional string SymbolName = 2;
      case 2: {
        if (tag == 18) {
         parse_SymbolName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbolname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->symbolname().data(), this->symbolname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dg.model.SymbolItem.SymbolName"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Symbols;
        break;
      }

      // repeated .dg.model.Symbol Symbols = 3;
      case 3: {
        if (tag == 26) {
         parse_Symbols:
          DO_(input->IncrementRecursionDepth());
         parse_loop_Symbols:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_symbols()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_Symbols;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dg.model.SymbolItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dg.model.SymbolItem)
  return false;
#undef DO_
}

void SymbolItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dg.model.SymbolItem)
  // optional int32 SymbolId = 1;
  if (this->symbolid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->symbolid(), output);
  }

  // optional string SymbolName = 2;
  if (this->symbolname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbolname().data(), this->symbolname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.SymbolItem.SymbolName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->symbolname(), output);
  }

  // repeated .dg.model.Symbol Symbols = 3;
  for (unsigned int i = 0, n = this->symbols_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->symbols(i), output);
  }

  // @@protoc_insertion_point(serialize_end:dg.model.SymbolItem)
}

::google::protobuf::uint8* SymbolItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dg.model.SymbolItem)
  // optional int32 SymbolId = 1;
  if (this->symbolid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->symbolid(), target);
  }

  // optional string SymbolName = 2;
  if (this->symbolname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbolname().data(), this->symbolname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.SymbolItem.SymbolName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->symbolname(), target);
  }

  // repeated .dg.model.Symbol Symbols = 3;
  for (unsigned int i = 0, n = this->symbols_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->symbols(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:dg.model.SymbolItem)
  return target;
}

int SymbolItem::ByteSize() const {
  int total_size = 0;

  // optional int32 SymbolId = 1;
  if (this->symbolid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->symbolid());
  }

  // optional string SymbolName = 2;
  if (this->symbolname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->symbolname());
  }

  // repeated .dg.model.Symbol Symbols = 3;
  total_size += 1 * this->symbols_size();
  for (int i = 0; i < this->symbols_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->symbols(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SymbolItem::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SymbolItem* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SymbolItem>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SymbolItem::MergeFrom(const SymbolItem& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  symbols_.MergeFrom(from.symbols_);
  if (from.symbolid() != 0) {
    set_symbolid(from.symbolid());
  }
  if (from.symbolname().size() > 0) {

    symbolname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbolname_);
  }
}

void SymbolItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SymbolItem::CopyFrom(const SymbolItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SymbolItem::IsInitialized() const {

  return true;
}

void SymbolItem::Swap(SymbolItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SymbolItem::InternalSwap(SymbolItem* other) {
  std::swap(symbolid_, other->symbolid_);
  symbolname_.Swap(&other->symbolname_);
  symbols_.UnsafeArenaSwap(&other->symbols_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SymbolItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SymbolItem_descriptor_;
  metadata.reflection = SymbolItem_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SymbolItem

// optional int32 SymbolId = 1;
void SymbolItem::clear_symbolid() {
  symbolid_ = 0;
}
 ::google::protobuf::int32 SymbolItem::symbolid() const {
  // @@protoc_insertion_point(field_get:dg.model.SymbolItem.SymbolId)
  return symbolid_;
}
 void SymbolItem::set_symbolid(::google::protobuf::int32 value) {
  
  symbolid_ = value;
  // @@protoc_insertion_point(field_set:dg.model.SymbolItem.SymbolId)
}

// optional string SymbolName = 2;
void SymbolItem::clear_symbolname() {
  symbolname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& SymbolItem::symbolname() const {
  // @@protoc_insertion_point(field_get:dg.model.SymbolItem.SymbolName)
  return symbolname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SymbolItem::set_symbolname(const ::std::string& value) {
  
  symbolname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.SymbolItem.SymbolName)
}
 void SymbolItem::set_symbolname(const char* value) {
  
  symbolname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.SymbolItem.SymbolName)
}
 void SymbolItem::set_symbolname(const char* value, size_t size) {
  
  symbolname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.SymbolItem.SymbolName)
}
 ::std::string* SymbolItem::mutable_symbolname() {
  
  // @@protoc_insertion_point(field_mutable:dg.model.SymbolItem.SymbolName)
  return symbolname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SymbolItem::release_symbolname() {
  
  return symbolname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SymbolItem::set_allocated_symbolname(::std::string* symbolname) {
  if (symbolname != NULL) {
    
  } else {
    
  }
  symbolname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), symbolname);
  // @@protoc_insertion_point(field_set_allocated:dg.model.SymbolItem.SymbolName)
}

// repeated .dg.model.Symbol Symbols = 3;
int SymbolItem::symbols_size() const {
  return symbols_.size();
}
void SymbolItem::clear_symbols() {
  symbols_.Clear();
}
const ::dg::model::Symbol& SymbolItem::symbols(int index) const {
  // @@protoc_insertion_point(field_get:dg.model.SymbolItem.Symbols)
  return symbols_.Get(index);
}
::dg::model::Symbol* SymbolItem::mutable_symbols(int index) {
  // @@protoc_insertion_point(field_mutable:dg.model.SymbolItem.Symbols)
  return symbols_.Mutable(index);
}
::dg::model::Symbol* SymbolItem::add_symbols() {
  // @@protoc_insertion_point(field_add:dg.model.SymbolItem.Symbols)
  return symbols_.Add();
}
::google::protobuf::RepeatedPtrField< ::dg::model::Symbol >*
SymbolItem::mutable_symbols() {
  // @@protoc_insertion_point(field_mutable_list:dg.model.SymbolItem.Symbols)
  return &symbols_;
}
const ::google::protobuf::RepeatedPtrField< ::dg::model::Symbol >&
SymbolItem::symbols() const {
  // @@protoc_insertion_point(field_list:dg.model.SymbolItem.Symbols)
  return symbols_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Scene::kIsHeadFieldNumber;
const int Scene::kIsDayFieldNumber;
const int Scene::kBorderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Scene::Scene()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dg.model.Scene)
}

void Scene::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Scene::Scene(const Scene& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dg.model.Scene)
}

void Scene::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ishead_ = 0;
  isday_ = 0;
  border_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Scene::~Scene() {
  // @@protoc_insertion_point(destructor:dg.model.Scene)
  SharedDtor();
}

void Scene::SharedDtor() {
  border_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Scene::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Scene::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Scene_descriptor_;
}

const Scene& Scene::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_witness_2eproto();
  return *default_instance_;
}

Scene* Scene::default_instance_ = NULL;

Scene* Scene::New(::google::protobuf::Arena* arena) const {
  Scene* n = new Scene;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Scene::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Scene*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(ishead_, isday_);
  border_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool Scene::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dg.model.Scene)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 IsHead = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ishead_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_IsDay;
        break;
      }

      // optional int32 IsDay = 2;
      case 2: {
        if (tag == 16) {
         parse_IsDay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isday_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Border;
        break;
      }

      // optional string Border = 3;
      case 3: {
        if (tag == 26) {
         parse_Border:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_border()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->border().data(), this->border().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dg.model.Scene.Border"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dg.model.Scene)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dg.model.Scene)
  return false;
#undef DO_
}

void Scene::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dg.model.Scene)
  // optional int32 IsHead = 1;
  if (this->ishead() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ishead(), output);
  }

  // optional int32 IsDay = 2;
  if (this->isday() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->isday(), output);
  }

  // optional string Border = 3;
  if (this->border().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->border().data(), this->border().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.Scene.Border");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->border(), output);
  }

  // @@protoc_insertion_point(serialize_end:dg.model.Scene)
}

::google::protobuf::uint8* Scene::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dg.model.Scene)
  // optional int32 IsHead = 1;
  if (this->ishead() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ishead(), target);
  }

  // optional int32 IsDay = 2;
  if (this->isday() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->isday(), target);
  }

  // optional string Border = 3;
  if (this->border().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->border().data(), this->border().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.Scene.Border");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->border(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:dg.model.Scene)
  return target;
}

int Scene::ByteSize() const {
  int total_size = 0;

  // optional int32 IsHead = 1;
  if (this->ishead() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ishead());
  }

  // optional int32 IsDay = 2;
  if (this->isday() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->isday());
  }

  // optional string Border = 3;
  if (this->border().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->border());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Scene::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Scene* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Scene>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Scene::MergeFrom(const Scene& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.ishead() != 0) {
    set_ishead(from.ishead());
  }
  if (from.isday() != 0) {
    set_isday(from.isday());
  }
  if (from.border().size() > 0) {

    border_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.border_);
  }
}

void Scene::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Scene::CopyFrom(const Scene& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Scene::IsInitialized() const {

  return true;
}

void Scene::Swap(Scene* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Scene::InternalSwap(Scene* other) {
  std::swap(ishead_, other->ishead_);
  std::swap(isday_, other->isday_);
  border_.Swap(&other->border_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Scene::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Scene_descriptor_;
  metadata.reflection = Scene_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Scene

// optional int32 IsHead = 1;
void Scene::clear_ishead() {
  ishead_ = 0;
}
 ::google::protobuf::int32 Scene::ishead() const {
  // @@protoc_insertion_point(field_get:dg.model.Scene.IsHead)
  return ishead_;
}
 void Scene::set_ishead(::google::protobuf::int32 value) {
  
  ishead_ = value;
  // @@protoc_insertion_point(field_set:dg.model.Scene.IsHead)
}

// optional int32 IsDay = 2;
void Scene::clear_isday() {
  isday_ = 0;
}
 ::google::protobuf::int32 Scene::isday() const {
  // @@protoc_insertion_point(field_get:dg.model.Scene.IsDay)
  return isday_;
}
 void Scene::set_isday(::google::protobuf::int32 value) {
  
  isday_ = value;
  // @@protoc_insertion_point(field_set:dg.model.Scene.IsDay)
}

// optional string Border = 3;
void Scene::clear_border() {
  border_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Scene::border() const {
  // @@protoc_insertion_point(field_get:dg.model.Scene.Border)
  return border_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Scene::set_border(const ::std::string& value) {
  
  border_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.Scene.Border)
}
 void Scene::set_border(const char* value) {
  
  border_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.Scene.Border)
}
 void Scene::set_border(const char* value, size_t size) {
  
  border_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.Scene.Border)
}
 ::std::string* Scene::mutable_border() {
  
  // @@protoc_insertion_point(field_mutable:dg.model.Scene.Border)
  return border_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Scene::release_border() {
  
  return border_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Scene::set_allocated_border(::std::string* border) {
  if (border != NULL) {
    
  } else {
    
  }
  border_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), border);
  // @@protoc_insertion_point(field_set_allocated:dg.model.Scene.Border)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Symbol::kCutboardFieldNumber;
const int Symbol::kConfidenceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Symbol::Symbol()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dg.model.Symbol)
}

void Symbol::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  cutboard_ = const_cast< ::dg::model::Cutboard*>(&::dg::model::Cutboard::default_instance());
}

Symbol::Symbol(const Symbol& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dg.model.Symbol)
}

void Symbol::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  cutboard_ = NULL;
  confidence_ = 0;
}

Symbol::~Symbol() {
  // @@protoc_insertion_point(destructor:dg.model.Symbol)
  SharedDtor();
}

void Symbol::SharedDtor() {
  if (this != default_instance_) {
    delete cutboard_;
  }
}

void Symbol::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Symbol::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Symbol_descriptor_;
}

const Symbol& Symbol::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_witness_2eproto();
  return *default_instance_;
}

Symbol* Symbol::default_instance_ = NULL;

Symbol* Symbol::New(::google::protobuf::Arena* arena) const {
  Symbol* n = new Symbol;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Symbol::Clear() {
  if (GetArenaNoVirtual() == NULL && cutboard_ != NULL) delete cutboard_;
  cutboard_ = NULL;
  confidence_ = 0;
}

bool Symbol::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dg.model.Symbol)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .dg.model.Cutboard Cutboard = 3;
      case 3: {
        if (tag == 26) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cutboard()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_Confidence;
        break;
      }

      // optional float Confidence = 4;
      case 4: {
        if (tag == 37) {
         parse_Confidence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &confidence_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dg.model.Symbol)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dg.model.Symbol)
  return false;
#undef DO_
}

void Symbol::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dg.model.Symbol)
  // optional .dg.model.Cutboard Cutboard = 3;
  if (this->has_cutboard()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->cutboard_, output);
  }

  // optional float Confidence = 4;
  if (this->confidence() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->confidence(), output);
  }

  // @@protoc_insertion_point(serialize_end:dg.model.Symbol)
}

::google::protobuf::uint8* Symbol::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dg.model.Symbol)
  // optional .dg.model.Cutboard Cutboard = 3;
  if (this->has_cutboard()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->cutboard_, target);
  }

  // optional float Confidence = 4;
  if (this->confidence() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->confidence(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:dg.model.Symbol)
  return target;
}

int Symbol::ByteSize() const {
  int total_size = 0;

  // optional .dg.model.Cutboard Cutboard = 3;
  if (this->has_cutboard()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->cutboard_);
  }

  // optional float Confidence = 4;
  if (this->confidence() != 0) {
    total_size += 1 + 4;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Symbol::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Symbol* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Symbol>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Symbol::MergeFrom(const Symbol& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_cutboard()) {
    mutable_cutboard()->::dg::model::Cutboard::MergeFrom(from.cutboard());
  }
  if (from.confidence() != 0) {
    set_confidence(from.confidence());
  }
}

void Symbol::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Symbol::CopyFrom(const Symbol& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Symbol::IsInitialized() const {

  return true;
}

void Symbol::Swap(Symbol* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Symbol::InternalSwap(Symbol* other) {
  std::swap(cutboard_, other->cutboard_);
  std::swap(confidence_, other->confidence_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Symbol::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Symbol_descriptor_;
  metadata.reflection = Symbol_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Symbol

// optional .dg.model.Cutboard Cutboard = 3;
bool Symbol::has_cutboard() const {
  return !_is_default_instance_ && cutboard_ != NULL;
}
void Symbol::clear_cutboard() {
  if (GetArenaNoVirtual() == NULL && cutboard_ != NULL) delete cutboard_;
  cutboard_ = NULL;
}
const ::dg::model::Cutboard& Symbol::cutboard() const {
  // @@protoc_insertion_point(field_get:dg.model.Symbol.Cutboard)
  return cutboard_ != NULL ? *cutboard_ : *default_instance_->cutboard_;
}
::dg::model::Cutboard* Symbol::mutable_cutboard() {
  
  if (cutboard_ == NULL) {
    cutboard_ = new ::dg::model::Cutboard;
  }
  // @@protoc_insertion_point(field_mutable:dg.model.Symbol.Cutboard)
  return cutboard_;
}
::dg::model::Cutboard* Symbol::release_cutboard() {
  
  ::dg::model::Cutboard* temp = cutboard_;
  cutboard_ = NULL;
  return temp;
}
void Symbol::set_allocated_cutboard(::dg::model::Cutboard* cutboard) {
  delete cutboard_;
  cutboard_ = cutboard;
  if (cutboard) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dg.model.Symbol.Cutboard)
}

// optional float Confidence = 4;
void Symbol::clear_confidence() {
  confidence_ = 0;
}
 float Symbol::confidence() const {
  // @@protoc_insertion_point(field_get:dg.model.Symbol.Confidence)
  return confidence_;
}
 void Symbol::set_confidence(float value) {
  
  confidence_ = value;
  // @@protoc_insertion_point(field_set:dg.model.Symbol.Confidence)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace model
}  // namespace dg

// @@protoc_insertion_point(global_scope)
