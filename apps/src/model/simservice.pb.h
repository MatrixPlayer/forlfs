// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: simservice.proto

#ifndef PROTOBUF_simservice_2eproto__INCLUDED
#define PROTOBUF_simservice_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)

namespace dg {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_simservice_2eproto();
void protobuf_AssignDesc_simservice_2eproto();
void protobuf_ShutdownFile_simservice_2eproto();

class FeatureRankingRequest;
class FeatureRankingResponse;

// ===================================================================

class FeatureRankingRequest : public ::google::protobuf::Message {
 public:
  FeatureRankingRequest();
  virtual ~FeatureRankingRequest();

  FeatureRankingRequest(const FeatureRankingRequest& from);

  inline FeatureRankingRequest& operator=(const FeatureRankingRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FeatureRankingRequest& default_instance();

  void Swap(FeatureRankingRequest* other);

  // implements Message ----------------------------------------------

  inline FeatureRankingRequest* New() const { return New(NULL); }

  FeatureRankingRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FeatureRankingRequest& from);
  void MergeFrom(const FeatureRankingRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FeatureRankingRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 ReqId = 1;
  void clear_reqid();
  static const int kReqIdFieldNumber = 1;
  ::google::protobuf::int64 reqid() const;
  void set_reqid(::google::protobuf::int64 value);

  // optional .dg.Image Image = 2;
  bool has_image() const;
  void clear_image();
  static const int kImageFieldNumber = 2;
  const ::dg::Image& image() const;
  ::dg::Image* mutable_image();
  ::dg::Image* release_image();
  void set_allocated_image(::dg::Image* image);

  // repeated .dg.Cutboard InterestedAreas = 3;
  int interestedareas_size() const;
  void clear_interestedareas();
  static const int kInterestedAreasFieldNumber = 3;
  const ::dg::Cutboard& interestedareas(int index) const;
  ::dg::Cutboard* mutable_interestedareas(int index);
  ::dg::Cutboard* add_interestedareas();
  ::google::protobuf::RepeatedPtrField< ::dg::Cutboard >*
      mutable_interestedareas();
  const ::google::protobuf::RepeatedPtrField< ::dg::Cutboard >&
      interestedareas() const;

  // repeated .dg.FeatureVector Candidates = 4;
  int candidates_size() const;
  void clear_candidates();
  static const int kCandidatesFieldNumber = 4;
  const ::dg::FeatureVector& candidates(int index) const;
  ::dg::FeatureVector* mutable_candidates(int index);
  ::dg::FeatureVector* add_candidates();
  ::google::protobuf::RepeatedPtrField< ::dg::FeatureVector >*
      mutable_candidates();
  const ::google::protobuf::RepeatedPtrField< ::dg::FeatureVector >&
      candidates() const;

  // optional int32 Limit = 5;
  void clear_limit();
  static const int kLimitFieldNumber = 5;
  ::google::protobuf::int32 limit() const;
  void set_limit(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:dg.FeatureRankingRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 reqid_;
  ::dg::Image* image_;
  ::google::protobuf::RepeatedPtrField< ::dg::Cutboard > interestedareas_;
  ::google::protobuf::RepeatedPtrField< ::dg::FeatureVector > candidates_;
  ::google::protobuf::int32 limit_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_simservice_2eproto();
  friend void protobuf_AssignDesc_simservice_2eproto();
  friend void protobuf_ShutdownFile_simservice_2eproto();

  void InitAsDefaultInstance();
  static FeatureRankingRequest* default_instance_;
};
// -------------------------------------------------------------------

class FeatureRankingResponse : public ::google::protobuf::Message {
 public:
  FeatureRankingResponse();
  virtual ~FeatureRankingResponse();

  FeatureRankingResponse(const FeatureRankingResponse& from);

  inline FeatureRankingResponse& operator=(const FeatureRankingResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FeatureRankingResponse& default_instance();

  void Swap(FeatureRankingResponse* other);

  // implements Message ----------------------------------------------

  inline FeatureRankingResponse* New() const { return New(NULL); }

  FeatureRankingResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FeatureRankingResponse& from);
  void MergeFrom(const FeatureRankingResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FeatureRankingResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 ReqId = 1;
  void clear_reqid();
  static const int kReqIdFieldNumber = 1;
  ::google::protobuf::int64 reqid() const;
  void set_reqid(::google::protobuf::int64 value);

  // repeated int64 Ids = 2;
  int ids_size() const;
  void clear_ids();
  static const int kIdsFieldNumber = 2;
  ::google::protobuf::int64 ids(int index) const;
  void set_ids(int index, ::google::protobuf::int64 value);
  void add_ids(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      ids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_ids();

  // repeated float Scores = 3;
  int scores_size() const;
  void clear_scores();
  static const int kScoresFieldNumber = 3;
  float scores(int index) const;
  void set_scores(int index, float value);
  void add_scores(float value);
  const ::google::protobuf::RepeatedField< float >&
      scores() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_scores();

  // @@protoc_insertion_point(class_scope:dg.FeatureRankingResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 reqid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > ids_;
  mutable int _ids_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > scores_;
  mutable int _scores_cached_byte_size_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_simservice_2eproto();
  friend void protobuf_AssignDesc_simservice_2eproto();
  friend void protobuf_ShutdownFile_simservice_2eproto();

  void InitAsDefaultInstance();
  static FeatureRankingResponse* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// FeatureRankingRequest

// optional int64 ReqId = 1;
inline void FeatureRankingRequest::clear_reqid() {
  reqid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 FeatureRankingRequest::reqid() const {
  // @@protoc_insertion_point(field_get:dg.FeatureRankingRequest.ReqId)
  return reqid_;
}
inline void FeatureRankingRequest::set_reqid(::google::protobuf::int64 value) {
  
  reqid_ = value;
  // @@protoc_insertion_point(field_set:dg.FeatureRankingRequest.ReqId)
}

// optional .dg.Image Image = 2;
inline bool FeatureRankingRequest::has_image() const {
  return !_is_default_instance_ && image_ != NULL;
}
inline void FeatureRankingRequest::clear_image() {
  if (GetArenaNoVirtual() == NULL && image_ != NULL) delete image_;
  image_ = NULL;
}
inline const ::dg::Image& FeatureRankingRequest::image() const {
  // @@protoc_insertion_point(field_get:dg.FeatureRankingRequest.Image)
  return image_ != NULL ? *image_ : *default_instance_->image_;
}
inline ::dg::Image* FeatureRankingRequest::mutable_image() {
  
  if (image_ == NULL) {
    image_ = new ::dg::Image;
  }
  // @@protoc_insertion_point(field_mutable:dg.FeatureRankingRequest.Image)
  return image_;
}
inline ::dg::Image* FeatureRankingRequest::release_image() {
  
  ::dg::Image* temp = image_;
  image_ = NULL;
  return temp;
}
inline void FeatureRankingRequest::set_allocated_image(::dg::Image* image) {
  delete image_;
  image_ = image;
  if (image) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dg.FeatureRankingRequest.Image)
}

// repeated .dg.Cutboard InterestedAreas = 3;
inline int FeatureRankingRequest::interestedareas_size() const {
  return interestedareas_.size();
}
inline void FeatureRankingRequest::clear_interestedareas() {
  interestedareas_.Clear();
}
inline const ::dg::Cutboard& FeatureRankingRequest::interestedareas(int index) const {
  // @@protoc_insertion_point(field_get:dg.FeatureRankingRequest.InterestedAreas)
  return interestedareas_.Get(index);
}
inline ::dg::Cutboard* FeatureRankingRequest::mutable_interestedareas(int index) {
  // @@protoc_insertion_point(field_mutable:dg.FeatureRankingRequest.InterestedAreas)
  return interestedareas_.Mutable(index);
}
inline ::dg::Cutboard* FeatureRankingRequest::add_interestedareas() {
  // @@protoc_insertion_point(field_add:dg.FeatureRankingRequest.InterestedAreas)
  return interestedareas_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::dg::Cutboard >*
FeatureRankingRequest::mutable_interestedareas() {
  // @@protoc_insertion_point(field_mutable_list:dg.FeatureRankingRequest.InterestedAreas)
  return &interestedareas_;
}
inline const ::google::protobuf::RepeatedPtrField< ::dg::Cutboard >&
FeatureRankingRequest::interestedareas() const {
  // @@protoc_insertion_point(field_list:dg.FeatureRankingRequest.InterestedAreas)
  return interestedareas_;
}

// repeated .dg.FeatureVector Candidates = 4;
inline int FeatureRankingRequest::candidates_size() const {
  return candidates_.size();
}
inline void FeatureRankingRequest::clear_candidates() {
  candidates_.Clear();
}
inline const ::dg::FeatureVector& FeatureRankingRequest::candidates(int index) const {
  // @@protoc_insertion_point(field_get:dg.FeatureRankingRequest.Candidates)
  return candidates_.Get(index);
}
inline ::dg::FeatureVector* FeatureRankingRequest::mutable_candidates(int index) {
  // @@protoc_insertion_point(field_mutable:dg.FeatureRankingRequest.Candidates)
  return candidates_.Mutable(index);
}
inline ::dg::FeatureVector* FeatureRankingRequest::add_candidates() {
  // @@protoc_insertion_point(field_add:dg.FeatureRankingRequest.Candidates)
  return candidates_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::dg::FeatureVector >*
FeatureRankingRequest::mutable_candidates() {
  // @@protoc_insertion_point(field_mutable_list:dg.FeatureRankingRequest.Candidates)
  return &candidates_;
}
inline const ::google::protobuf::RepeatedPtrField< ::dg::FeatureVector >&
FeatureRankingRequest::candidates() const {
  // @@protoc_insertion_point(field_list:dg.FeatureRankingRequest.Candidates)
  return candidates_;
}

// optional int32 Limit = 5;
inline void FeatureRankingRequest::clear_limit() {
  limit_ = 0;
}
inline ::google::protobuf::int32 FeatureRankingRequest::limit() const {
  // @@protoc_insertion_point(field_get:dg.FeatureRankingRequest.Limit)
  return limit_;
}
inline void FeatureRankingRequest::set_limit(::google::protobuf::int32 value) {
  
  limit_ = value;
  // @@protoc_insertion_point(field_set:dg.FeatureRankingRequest.Limit)
}

// -------------------------------------------------------------------

// FeatureRankingResponse

// optional int64 ReqId = 1;
inline void FeatureRankingResponse::clear_reqid() {
  reqid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 FeatureRankingResponse::reqid() const {
  // @@protoc_insertion_point(field_get:dg.FeatureRankingResponse.ReqId)
  return reqid_;
}
inline void FeatureRankingResponse::set_reqid(::google::protobuf::int64 value) {
  
  reqid_ = value;
  // @@protoc_insertion_point(field_set:dg.FeatureRankingResponse.ReqId)
}

// repeated int64 Ids = 2;
inline int FeatureRankingResponse::ids_size() const {
  return ids_.size();
}
inline void FeatureRankingResponse::clear_ids() {
  ids_.Clear();
}
inline ::google::protobuf::int64 FeatureRankingResponse::ids(int index) const {
  // @@protoc_insertion_point(field_get:dg.FeatureRankingResponse.Ids)
  return ids_.Get(index);
}
inline void FeatureRankingResponse::set_ids(int index, ::google::protobuf::int64 value) {
  ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:dg.FeatureRankingResponse.Ids)
}
inline void FeatureRankingResponse::add_ids(::google::protobuf::int64 value) {
  ids_.Add(value);
  // @@protoc_insertion_point(field_add:dg.FeatureRankingResponse.Ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
FeatureRankingResponse::ids() const {
  // @@protoc_insertion_point(field_list:dg.FeatureRankingResponse.Ids)
  return ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
FeatureRankingResponse::mutable_ids() {
  // @@protoc_insertion_point(field_mutable_list:dg.FeatureRankingResponse.Ids)
  return &ids_;
}

// repeated float Scores = 3;
inline int FeatureRankingResponse::scores_size() const {
  return scores_.size();
}
inline void FeatureRankingResponse::clear_scores() {
  scores_.Clear();
}
inline float FeatureRankingResponse::scores(int index) const {
  // @@protoc_insertion_point(field_get:dg.FeatureRankingResponse.Scores)
  return scores_.Get(index);
}
inline void FeatureRankingResponse::set_scores(int index, float value) {
  scores_.Set(index, value);
  // @@protoc_insertion_point(field_set:dg.FeatureRankingResponse.Scores)
}
inline void FeatureRankingResponse::add_scores(float value) {
  scores_.Add(value);
  // @@protoc_insertion_point(field_add:dg.FeatureRankingResponse.Scores)
}
inline const ::google::protobuf::RepeatedField< float >&
FeatureRankingResponse::scores() const {
  // @@protoc_insertion_point(field_list:dg.FeatureRankingResponse.Scores)
  return scores_;
}
inline ::google::protobuf::RepeatedField< float >*
FeatureRankingResponse::mutable_scores() {
  // @@protoc_insertion_point(field_mutable_list:dg.FeatureRankingResponse.Scores)
  return &scores_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace dg

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_simservice_2eproto__INCLUDED
