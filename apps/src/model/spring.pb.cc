// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: spring.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "spring.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace dg {
namespace model {

namespace {

const ::google::protobuf::Descriptor* VehicleObj_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VehicleObj_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_spring_2eproto() {
  protobuf_AddDesc_spring_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "spring.proto");
  GOOGLE_CHECK(file != NULL);
  VehicleObj_descriptor_ = file->message_type(0);
  static const int VehicleObj_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleObj, vehicle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleObj, storageinfo_),
  };
  VehicleObj_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      VehicleObj_descriptor_,
      VehicleObj::default_instance_,
      VehicleObj_offsets_,
      -1,
      -1,
      -1,
      sizeof(VehicleObj),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleObj, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleObj, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_spring_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      VehicleObj_descriptor_, &VehicleObj::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_spring_2eproto() {
  delete VehicleObj::default_instance_;
  delete VehicleObj_reflection_;
}

void protobuf_AddDesc_spring_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::dg::model::protobuf_AddDesc_common_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014spring.proto\022\010dg.model\032\014common.proto\"a"
    "\n\nVehicleObj\022%\n\007Vehicle\030\001 \001(\0132\024.dg.model"
    ".RecVehicle\022,\n\013StorageInfo\030\002 \001(\0132\027.dg.mo"
    "del.StorageConfig2N\n\rSpringService\022=\n\014In"
    "dexVehicle\022\024.dg.model.VehicleObj\032\025.dg.mo"
    "del.NullMessage\"\000b\006proto3", 225);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "spring.proto", &protobuf_RegisterTypes);
  VehicleObj::default_instance_ = new VehicleObj();
  VehicleObj::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_spring_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_spring_2eproto {
  StaticDescriptorInitializer_spring_2eproto() {
    protobuf_AddDesc_spring_2eproto();
  }
} static_descriptor_initializer_spring_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VehicleObj::kVehicleFieldNumber;
const int VehicleObj::kStorageInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VehicleObj::VehicleObj()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dg.model.VehicleObj)
}

void VehicleObj::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  vehicle_ = const_cast< ::dg::model::RecVehicle*>(&::dg::model::RecVehicle::default_instance());
  storageinfo_ = const_cast< ::dg::model::StorageConfig*>(&::dg::model::StorageConfig::default_instance());
}

VehicleObj::VehicleObj(const VehicleObj& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dg.model.VehicleObj)
}

void VehicleObj::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  vehicle_ = NULL;
  storageinfo_ = NULL;
}

VehicleObj::~VehicleObj() {
  // @@protoc_insertion_point(destructor:dg.model.VehicleObj)
  SharedDtor();
}

void VehicleObj::SharedDtor() {
  if (this != default_instance_) {
    delete vehicle_;
    delete storageinfo_;
  }
}

void VehicleObj::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VehicleObj::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VehicleObj_descriptor_;
}

const VehicleObj& VehicleObj::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_spring_2eproto();
  return *default_instance_;
}

VehicleObj* VehicleObj::default_instance_ = NULL;

VehicleObj* VehicleObj::New(::google::protobuf::Arena* arena) const {
  VehicleObj* n = new VehicleObj;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VehicleObj::Clear() {
  if (GetArenaNoVirtual() == NULL && vehicle_ != NULL) delete vehicle_;
  vehicle_ = NULL;
  if (GetArenaNoVirtual() == NULL && storageinfo_ != NULL) delete storageinfo_;
  storageinfo_ = NULL;
}

bool VehicleObj::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dg.model.VehicleObj)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .dg.model.RecVehicle Vehicle = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vehicle()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_StorageInfo;
        break;
      }

      // optional .dg.model.StorageConfig StorageInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_StorageInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_storageinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dg.model.VehicleObj)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dg.model.VehicleObj)
  return false;
#undef DO_
}

void VehicleObj::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dg.model.VehicleObj)
  // optional .dg.model.RecVehicle Vehicle = 1;
  if (this->has_vehicle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->vehicle_, output);
  }

  // optional .dg.model.StorageConfig StorageInfo = 2;
  if (this->has_storageinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->storageinfo_, output);
  }

  // @@protoc_insertion_point(serialize_end:dg.model.VehicleObj)
}

::google::protobuf::uint8* VehicleObj::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dg.model.VehicleObj)
  // optional .dg.model.RecVehicle Vehicle = 1;
  if (this->has_vehicle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->vehicle_, target);
  }

  // optional .dg.model.StorageConfig StorageInfo = 2;
  if (this->has_storageinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->storageinfo_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:dg.model.VehicleObj)
  return target;
}

int VehicleObj::ByteSize() const {
  int total_size = 0;

  // optional .dg.model.RecVehicle Vehicle = 1;
  if (this->has_vehicle()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->vehicle_);
  }

  // optional .dg.model.StorageConfig StorageInfo = 2;
  if (this->has_storageinfo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->storageinfo_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VehicleObj::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const VehicleObj* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const VehicleObj>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VehicleObj::MergeFrom(const VehicleObj& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_vehicle()) {
    mutable_vehicle()->::dg::model::RecVehicle::MergeFrom(from.vehicle());
  }
  if (from.has_storageinfo()) {
    mutable_storageinfo()->::dg::model::StorageConfig::MergeFrom(from.storageinfo());
  }
}

void VehicleObj::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehicleObj::CopyFrom(const VehicleObj& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleObj::IsInitialized() const {

  return true;
}

void VehicleObj::Swap(VehicleObj* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VehicleObj::InternalSwap(VehicleObj* other) {
  std::swap(vehicle_, other->vehicle_);
  std::swap(storageinfo_, other->storageinfo_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VehicleObj::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VehicleObj_descriptor_;
  metadata.reflection = VehicleObj_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VehicleObj

// optional .dg.model.RecVehicle Vehicle = 1;
bool VehicleObj::has_vehicle() const {
  return !_is_default_instance_ && vehicle_ != NULL;
}
void VehicleObj::clear_vehicle() {
  if (GetArenaNoVirtual() == NULL && vehicle_ != NULL) delete vehicle_;
  vehicle_ = NULL;
}
const ::dg::model::RecVehicle& VehicleObj::vehicle() const {
  // @@protoc_insertion_point(field_get:dg.model.VehicleObj.Vehicle)
  return vehicle_ != NULL ? *vehicle_ : *default_instance_->vehicle_;
}
::dg::model::RecVehicle* VehicleObj::mutable_vehicle() {
  
  if (vehicle_ == NULL) {
    vehicle_ = new ::dg::model::RecVehicle;
  }
  // @@protoc_insertion_point(field_mutable:dg.model.VehicleObj.Vehicle)
  return vehicle_;
}
::dg::model::RecVehicle* VehicleObj::release_vehicle() {
  
  ::dg::model::RecVehicle* temp = vehicle_;
  vehicle_ = NULL;
  return temp;
}
void VehicleObj::set_allocated_vehicle(::dg::model::RecVehicle* vehicle) {
  delete vehicle_;
  vehicle_ = vehicle;
  if (vehicle) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dg.model.VehicleObj.Vehicle)
}

// optional .dg.model.StorageConfig StorageInfo = 2;
bool VehicleObj::has_storageinfo() const {
  return !_is_default_instance_ && storageinfo_ != NULL;
}
void VehicleObj::clear_storageinfo() {
  if (GetArenaNoVirtual() == NULL && storageinfo_ != NULL) delete storageinfo_;
  storageinfo_ = NULL;
}
const ::dg::model::StorageConfig& VehicleObj::storageinfo() const {
  // @@protoc_insertion_point(field_get:dg.model.VehicleObj.StorageInfo)
  return storageinfo_ != NULL ? *storageinfo_ : *default_instance_->storageinfo_;
}
::dg::model::StorageConfig* VehicleObj::mutable_storageinfo() {
  
  if (storageinfo_ == NULL) {
    storageinfo_ = new ::dg::model::StorageConfig;
  }
  // @@protoc_insertion_point(field_mutable:dg.model.VehicleObj.StorageInfo)
  return storageinfo_;
}
::dg::model::StorageConfig* VehicleObj::release_storageinfo() {
  
  ::dg::model::StorageConfig* temp = storageinfo_;
  storageinfo_ = NULL;
  return temp;
}
void VehicleObj::set_allocated_storageinfo(::dg::model::StorageConfig* storageinfo) {
  delete storageinfo_;
  storageinfo_ = storageinfo;
  if (storageinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dg.model.VehicleObj.StorageInfo)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace model
}  // namespace dg

// @@protoc_insertion_point(global_scope)
