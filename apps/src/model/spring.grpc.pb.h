// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: spring.proto
#ifndef GRPC_spring_2eproto__INCLUDED
#define GRPC_spring_2eproto__INCLUDED

#include "spring.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/proto_utils.h>
#include <grpc++/impl/codegen/rpc_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/status.h>
#include <grpc++/impl/codegen/stub_options.h>
#include <grpc++/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class RpcService;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace dg {
namespace model {

// ## Business Intelligence APIs
class SpringService GRPC_FINAL {
 public:
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Index stores generic entity.
    // Errors:
    //   40301: Invalid entity.
    virtual ::grpc::Status Index(::grpc::ClientContext* context, const ::dg::model::GenericObj& request, ::dg::model::NullMessage* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dg::model::NullMessage>> AsyncIndex(::grpc::ClientContext* context, const ::dg::model::GenericObj& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dg::model::NullMessage>>(AsyncIndexRaw(context, request, cq));
    }
    // IndexBatch stores generic entities.
    // Errors:
    //   40301: Invalid entity.
    virtual ::grpc::Status IndexBatch(::grpc::ClientContext* context, const ::dg::model::GenericObjs& request, ::dg::model::NullMessage* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dg::model::NullMessage>> AsyncIndexBatch(::grpc::ClientContext* context, const ::dg::model::GenericObjs& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dg::model::NullMessage>>(AsyncIndexBatchRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dg::model::NullMessage>* AsyncIndexRaw(::grpc::ClientContext* context, const ::dg::model::GenericObj& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dg::model::NullMessage>* AsyncIndexBatchRaw(::grpc::ClientContext* context, const ::dg::model::GenericObjs& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub GRPC_FINAL : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status Index(::grpc::ClientContext* context, const ::dg::model::GenericObj& request, ::dg::model::NullMessage* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dg::model::NullMessage>> AsyncIndex(::grpc::ClientContext* context, const ::dg::model::GenericObj& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dg::model::NullMessage>>(AsyncIndexRaw(context, request, cq));
    }
    ::grpc::Status IndexBatch(::grpc::ClientContext* context, const ::dg::model::GenericObjs& request, ::dg::model::NullMessage* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dg::model::NullMessage>> AsyncIndexBatch(::grpc::ClientContext* context, const ::dg::model::GenericObjs& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dg::model::NullMessage>>(AsyncIndexBatchRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::dg::model::NullMessage>* AsyncIndexRaw(::grpc::ClientContext* context, const ::dg::model::GenericObj& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::dg::model::NullMessage>* AsyncIndexBatchRaw(::grpc::ClientContext* context, const ::dg::model::GenericObjs& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    const ::grpc::RpcMethod rpcmethod_Index_;
    const ::grpc::RpcMethod rpcmethod_IndexBatch_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Index stores generic entity.
    // Errors:
    //   40301: Invalid entity.
    virtual ::grpc::Status Index(::grpc::ServerContext* context, const ::dg::model::GenericObj* request, ::dg::model::NullMessage* response);
    // IndexBatch stores generic entities.
    // Errors:
    //   40301: Invalid entity.
    virtual ::grpc::Status IndexBatch(::grpc::ServerContext* context, const ::dg::model::GenericObjs* request, ::dg::model::NullMessage* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Index : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Index() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Index() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Index(::grpc::ServerContext* context, const ::dg::model::GenericObj* request, ::dg::model::NullMessage* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestIndex(::grpc::ServerContext* context, ::dg::model::GenericObj* request, ::grpc::ServerAsyncResponseWriter< ::dg::model::NullMessage>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_IndexBatch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_IndexBatch() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_IndexBatch() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IndexBatch(::grpc::ServerContext* context, const ::dg::model::GenericObjs* request, ::dg::model::NullMessage* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestIndexBatch(::grpc::ServerContext* context, ::dg::model::GenericObjs* request, ::grpc::ServerAsyncResponseWriter< ::dg::model::NullMessage>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Index<WithAsyncMethod_IndexBatch<Service > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_Index : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Index() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Index() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Index(::grpc::ServerContext* context, const ::dg::model::GenericObj* request, ::dg::model::NullMessage* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_IndexBatch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_IndexBatch() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_IndexBatch() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IndexBatch(::grpc::ServerContext* context, const ::dg::model::GenericObjs* request, ::dg::model::NullMessage* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
};
// ### Index APIs

}  // namespace model
}  // namespace dg


#endif  // GRPC_spring_2eproto__INCLUDED
